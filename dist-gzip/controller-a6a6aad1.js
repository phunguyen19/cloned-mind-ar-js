import { c as ir, g as Wv, O as Vv } from "./ui-56ede774.js";
function _v(n, t) {
  for (var e = 0; e < t.length; e++) {
    const s = t[e];
    if (typeof s != "string" && !Array.isArray(s)) {
      for (const o in s)
        if (o !== "default" && !(o in n)) {
          const r = Object.getOwnPropertyDescriptor(s, o);
          r && Object.defineProperty(n, o, r.get ? r : {
            enumerable: !0,
            get: () => s[o]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Av = 1e-7, Ov = 1e-4;
class dx {
  constructor(t, e) {
    this.backend = t, this.dataMover = e, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(t) {
    return this.data.has(t) || this.dataMover.moveData(this.backend, t), this.data.get(t);
  }
  set(t, e) {
    this.dataIdsCount++, this.data.set(t, e);
  }
  has(t) {
    return this.data.has(t);
  }
  delete(t) {
    return this.dataIdsCount--, this.data.delete(t);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class Ep {
  refCount(t) {
    return qe("refCount");
  }
  incRef(t) {
    return qe("incRef");
  }
  timerAvailable() {
    return !0;
  }
  time(t) {
    return qe("time");
  }
  read(t) {
    return qe("read");
  }
  readSync(t) {
    return qe("readSync");
  }
  readToGPU(t, e) {
    return qe("readToGPU");
  }
  numDataIds() {
    return qe("numDataIds");
  }
  disposeData(t, e) {
    return qe("disposeData");
  }
  write(t, e, s) {
    return qe("write");
  }
  move(t, e, s, o, r) {
    return qe("move");
  }
  createTensorFromGPUData(t, e, s) {
    return qe("createTensorFromGPUData");
  }
  memory() {
    return qe("memory");
  }
  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
  floatPrecision() {
    return qe("floatPrecision");
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? Av : Ov;
  }
  dispose() {
    return qe("dispose");
  }
}
function qe(n) {
  throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gp(n) {
  let t = n.length, e = 0;
  for (; t > 0; )
    e = Math.random() * t | 0, t--, Rs(n, t, e);
}
function Xv(n, t) {
  if (n.length !== t.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`);
  let e = n.length, s = 0;
  for (; e > 0; )
    s = Math.random() * e | 0, e--, Rs(n, e, s), Rs(t, e, s);
}
function ro(n, t, e) {
  return Math.max(n, Math.min(t, e));
}
function Kc(n) {
  return n % 2 === 0 ? n : n + 1;
}
function Rs(n, t, e) {
  const s = n[t];
  n[t] = n[e], n[e] = s;
}
function hx(n) {
  let t = 0;
  for (let e = 0; e < n.length; e++)
    t += n[e];
  return t;
}
function Pv(n, t) {
  const e = Math.random();
  return t * e + (1 - e) * n;
}
function Zv(n, t) {
  let e = 0;
  for (let s = 0; s < n.length; s++) {
    const o = Number(n[s]) - Number(t[s]);
    e += o * o;
  }
  return e;
}
function k(n, t) {
  if (!n)
    throw new Error(typeof t == "string" ? t : t());
}
function Xe(n, t, e = "") {
  k($t(n, t), () => e + ` Shapes ${n} and ${t} must match`);
}
function Bc(n) {
  k(n != null, () => "The input to the tensor constructor must be a non-null value.");
}
function X(n) {
  if (n.length === 0)
    return 1;
  let t = n[0];
  for (let e = 1; e < n.length; e++)
    t *= n[e];
  return t;
}
function Kv(n) {
  return n.length === 0;
}
function $t(n, t) {
  if (n === t)
    return !0;
  if (n == null || t == null || n.length !== t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (n[e] !== t[e])
      return !1;
  return !0;
}
function Xo(n) {
  return n % 1 === 0;
}
function Bv(n) {
  if (Math.tanh != null)
    return Math.tanh(n);
  if (n === 1 / 0)
    return 1;
  if (n === -1 / 0)
    return -1;
  {
    const t = Math.exp(2 * n);
    return (t - 1) / (t + 1);
  }
}
function cc(n) {
  const t = Math.ceil(Math.sqrt(n));
  return [t, Math.ceil(n / t)];
}
function Hv(n) {
  const t = new Uint32Array(n);
  for (let e = 0; e < n; ++e)
    t[e] = e;
  return Gp(t), t;
}
function Vo(n, t) {
  return t <= n.length ? n : n + " ".repeat(t - n.length);
}
function Rh(n, t = (o) => 0, e, s) {
  return new Promise((o, r) => {
    let i = 0;
    const a = () => {
      if (n()) {
        o();
        return;
      }
      i++;
      const l = t(i);
      if (e != null && i >= e) {
        r();
        return;
      }
      s != null ? s(a, l) : setTimeout(a, l);
    };
    a();
  });
}
function Lp(n, t) {
  let e = 1, s = -1;
  for (let r = 0; r < n.length; ++r)
    if (n[r] >= 0)
      e *= n[r];
    else if (n[r] === -1) {
      if (s !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${r}`);
      s = r;
    } else if (n[r] < 0)
      throw Error(`Shapes can not be < 0. Found ${n[r]} at dim ${r}`);
  if (s === -1) {
    if (t > 0 && t !== e)
      throw Error(`Size(${t}) must match the product of shape ${n}`);
    return n;
  }
  if (e === 0)
    throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);
  if (t % e !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);
  const o = n.slice();
  return o[s] = t / e, o;
}
function Ct(n, t) {
  const e = t.length;
  return n = n == null ? t.map((s, o) => o) : [].concat(n), k(n.every((s) => s >= -e && s < e), () => `All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`), k(n.every((s) => Xo(s)), () => `All values in axis param must be integers but got axis ${n}`), n.map((s) => s < 0 ? e + s : s);
}
function Ms(n, t) {
  const e = [], s = [], o = t != null && Array.isArray(t) && t.length === 0, r = t == null || o ? null : Ct(t, n).sort();
  let i = 0;
  for (let a = 0; a < n.length; ++a) {
    if (r != null) {
      if (r[i] === a && n[a] !== 1)
        throw new Error(`Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`);
      (r[i] == null || r[i] > a) && n[a] === 1 && (e.push(n[a]), s.push(a)), r[i] <= a && i++;
    }
    n[a] !== 1 && (e.push(n[a]), s.push(a));
  }
  return { newShape: e, keptDims: s };
}
function Ie(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function ae(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else if (n === "string")
    e = new Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function px(n, t) {
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    if (isNaN(s) || !isFinite(s))
      throw Error(`A tensor of type ${t} being uploaded contains ${s}.`);
  }
}
function fx(n) {
  return n === "bool" || n === "complex64" || n === "float32" || n === "int32" || n === "string";
}
function Dp(n, t) {
  return !(t === "complex64" || t === "float32" && n !== "complex64" || t === "int32" && n !== "float32" && n !== "complex64" || t === "bool" && n === "bool");
}
function Vi(n) {
  if (n === "float32" || n === "int32")
    return 4;
  if (n === "complex64")
    return 8;
  if (n === "bool")
    return 1;
  throw new Error(`Unknown dtype ${n}`);
}
function mx(n) {
  if (n == null)
    return 0;
  let t = 0;
  return n.forEach((e) => t += e.length), t;
}
function Qr(n) {
  return typeof n == "string" || n instanceof String;
}
function gx(n) {
  return typeof n == "boolean";
}
function uc(n) {
  return typeof n == "number";
}
function jr(n) {
  return Array.isArray(n) ? jr(n[0]) : n instanceof Float32Array ? "float32" : n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray ? "int32" : uc(n) ? "float32" : Qr(n) ? "string" : gx(n) ? "bool" : "float32";
}
function io(n) {
  return !!(n && n.constructor && n.call && n.apply);
}
function dc(n, t) {
  for (let e = t; e < n; ++e)
    if (n % e === 0)
      return e;
  return n;
}
function dt(n) {
  const t = n.length;
  if (t < 2)
    return [];
  const e = new Array(t - 1);
  e[t - 2] = n[t - 1];
  for (let s = t - 3; s >= 0; --s)
    e[s] = e[s + 1] * n[s + 1];
  return e;
}
function bx(n, t, e, s = !1) {
  const o = new Array();
  if (t.length === 1) {
    const r = t[0] * (s ? 2 : 1);
    for (let i = 0; i < r; i++)
      o[i] = e[n + i];
  } else {
    const r = t[0], i = t.slice(1), a = i.reduce((l, c) => l * c) * (s ? 2 : 1);
    for (let l = 0; l < r; l++)
      o[l] = bx(n + l * a, i, e, s);
  }
  return o;
}
function Mn(n, t, e = !1) {
  if (n.length === 0)
    return t[0];
  const s = n.reduce((o, r) => o * r) * (e ? 2 : 1);
  if (s === 0)
    return [];
  if (s !== t.length)
    throw new Error(`[${n}] does not match the input size ${t.length}${e ? " for a complex tensor" : ""}.`);
  return bx(0, n, t, e);
}
function xx(n, t) {
  if (Array.isArray(n))
    return n;
  if (t === "float32")
    return n instanceof Float32Array ? n : new Float32Array(n);
  if (t === "int32")
    return n instanceof Int32Array ? n : new Int32Array(n);
  if (t === "bool" || t === "string")
    return Uint8Array.from(new Int32Array(n));
  throw new Error(`Unknown dtype ${t}`);
}
function Hc(n, t) {
  const e = Re(n, t);
  for (let s = 0; s < e.length; s++)
    e[s] = 1;
  return e;
}
function Re(n, t) {
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool")
    return new Uint8Array(n);
  throw new Error(`Unknown data type ${t}`);
}
function Mp(n, t) {
  const e = n.reduce((s, o) => s * o, 1);
  if (t == null || t === "float32")
    return Mn(n, new Float32Array(e));
  if (t === "int32")
    return Mn(n, new Int32Array(e));
  if (t === "bool")
    return Mn(n, new Uint8Array(e));
  throw new Error(`Unknown data type ${t}`);
}
function Is(n) {
  n.forEach((t) => {
    k(Number.isInteger(t) && t >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${n}].`);
  });
}
function Yn(n, t, e) {
  if (t === 0)
    return 0;
  if (t === 1)
    return n[0];
  let s = n[n.length - 1];
  for (let o = 0; o < n.length - 1; ++o)
    s += e[o] * n[o];
  return s;
}
function ar(n, t, e) {
  if (t === 0)
    return [];
  if (t === 1)
    return [n];
  const s = new Array(t);
  for (let o = 0; o < s.length - 1; ++o)
    s[o] = Math.floor(n / e[o]), n -= s[o] * e[o];
  return s[s.length - 1] = n, s;
}
function la(n) {
  return n && n.then && typeof n.then == "function";
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wg = "tfjsflags";
class Uv {
  // tslint:disable-next-line: no-any
  constructor(t) {
    this.global = t, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = Yv, this.populateURLFlags();
  }
  setPlatform(t, e) {
    this.platform != null && (V().getBool("IS_TEST") || V().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)), this.platformName = t, this.platform = e;
  }
  registerFlag(t, e, s) {
    if (this.flagRegistry[t] = { evaluationFn: e, setHook: s }, this.urlFlags[t] != null) {
      const o = this.urlFlags[t];
      V().getBool("IS_TEST") || V().getBool("PROD") || console.warn(`Setting feature override from URL ${t}: ${o}.`), this.set(t, o);
    }
  }
  async getAsync(t) {
    return t in this.flags ? this.flags[t] : (this.flags[t] = await this.evaluateFlag(t), this.flags[t]);
  }
  get(t) {
    if (t in this.flags)
      return this.flags[t];
    const e = this.evaluateFlag(t);
    if (la(e))
      throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[t] = e, this.flags[t];
  }
  getNumber(t) {
    return this.get(t);
  }
  getBool(t) {
    return this.get(t);
  }
  getFlags() {
    return this.flags;
  }
  // For backwards compatibility.
  get features() {
    return this.flags;
  }
  set(t, e) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot set flag ${t} as it has not been registered.`);
    this.flags[t] = e, this.flagRegistry[t].setHook != null && this.flagRegistry[t].setHook(e);
  }
  evaluateFlag(t) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);
    return this.flagRegistry[t].evaluationFn();
  }
  setFlags(t) {
    this.flags = Object.assign({}, t);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u")
      return;
    const t = this.getQueryParams(this.global.location.search);
    Wg in t && t[Wg].split(",").forEach((s) => {
      const [o, r] = s.split(":");
      this.urlFlags[o] = jv(o, r);
    });
  }
}
function Yv(n) {
  const t = {};
  return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (e, ...s) => (Qv(t, s[0], s[1]), s.join("="))), t;
}
function Qv(n, t, e) {
  n[decodeURIComponent(t)] = decodeURIComponent(e || "");
}
function jv(n, t) {
  if (t = t.toLowerCase(), t === "true" || t === "false")
    return t === "true";
  if (`${+t}` === t)
    return +t;
  throw new Error(`Could not parse value flag value ${t} for flag ${n}.`);
}
function V() {
  return yx;
}
let yx = null;
function Jv(n) {
  yx = n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Dd;
function wx() {
  if (Dd == null) {
    let n;
    if (typeof window < "u")
      n = window;
    else if (typeof global < "u")
      n = global;
    else if (typeof process < "u")
      n = process;
    else if (typeof self < "u")
      n = self;
    else
      throw new Error("Could not find a global object");
    Dd = n;
  }
  return Dd;
}
function qv() {
  const n = wx();
  return n._tfGlobals == null && (n._tfGlobals = /* @__PURE__ */ new Map()), n._tfGlobals;
}
function zp(n, t) {
  const e = qv();
  if (e.has(n))
    return e.get(n);
  {
    const s = t();
    return e.set(n, s), e.get(n);
  }
}
const Uc = "Abs", ca = "Acos", ua = "Acosh", Jr = "Add", Fp = "AddN", Wp = "All", Vp = "Any", Yc = "ArgMax", Qc = "ArgMin", da = "Asin", ha = "Asinh", pa = "Atan", fa = "Atanh", ma = "Atan2", jc = "AvgPool", _p = "AvgPoolGrad", Jc = "AvgPool3D", Ap = "AvgPool3DGrad", qc = "BatchMatMul", tu = "BatchToSpaceND", Op = "Bincount", tk = "BroadcastTo", Ix = "BroadcastArgs", ga = "Cast", ba = "Ceil", xa = "ClipByValue", Xp = "Complex", eu = "ComplexAbs", nu = "Concat", su = "Conv2D", Pp = "Conv2DBackpropFilter", ou = "Conv2DBackpropInput", ru = "Conv3D", Zp = "Conv3DBackpropFilterV2", Kp = "Conv3DBackpropInputV2", ya = "Cos", wa = "Cosh", Bp = "Cumprod", iu = "Cumsum", Hp = "CropAndResize", Up = "DenseBincount", Yp = "DepthToSpace", au = "DepthwiseConv2dNative", Qp = "DepthwiseConv2dNativeBackpropFilter", jp = "DepthwiseConv2dNativeBackpropInput", Cx = "Diag", lu = "Dilation2D", $h = "Dilation2DBackpropInput", Eh = "Dilation2DBackpropFilter", Ia = "RealDiv", vx = "Einsum", Ca = "Elu", Jp = "EluGrad", va = "Erf", cu = "Equal", ka = "Exp", uu = "ExpandDims", Sa = "Expm1", qp = "FFT", tf = "Fill", ef = "FlipLeftRight", Ta = "Floor", Na = "FloorDiv", du = "FusedBatchNorm", hu = "GatherV2", kx = "GatherNd", pu = "Greater", Ra = "GreaterEqual", $a = "Identity", nf = "IFFT", sf = "Imag", Ea = "IsFinite", Ga = "IsInf", La = "IsNan", fu = "LeakyRelu", mu = "Less", gu = "LessEqual", Sx = "LinSpace", Da = "Log", Ma = "Log1p", bu = "LogicalAnd", xu = "LogicalNot", yu = "LogicalOr", h8 = "LogicalXor", ek = "LogSoftmax", p8 = "LowerBound", wu = "LRN", of = "LRNGrad", Iu = "Max", za = "Maximum", Cu = "MaxPool", rf = "MaxPoolGrad", vu = "MaxPool3D", af = "MaxPool3DGrad", Tx = "MaxPoolWithArgmax", ku = "Mean", Su = "Min", Fa = "Minimum", Tu = "MirrorPad", Wa = "Mod", Nx = "Multinomial", Va = "Multiply", Nu = "Neg", Ru = "NotEqual", lf = "NonMaxSuppressionV3", cf = "NonMaxSuppressionV4", uf = "NonMaxSuppressionV5", $u = "OnesLike", Eu = "OneHot", Gu = "Pack", Lu = "PadV2", f8 = "Pool", _a = "Pow", Du = "Prelu", Mu = "Prod", Rx = "RaggedGather", $x = "RaggedRange", Ex = "RaggedTensorToTensor", df = "Range", hf = "Real", Aa = "Reciprocal", Oa = "Relu", zu = "Reshape", Fu = "ResizeNearestNeighbor", pf = "ResizeNearestNeighborGrad", Wu = "ResizeBilinear", ff = "ResizeBilinearGrad", Xa = "Relu6", Vu = "Reverse", Pa = "Round", Za = "Rsqrt", Gx = "ScatterNd", Lx = "SearchSorted", _u = "Select", Ka = "Selu", Au = "Slice", Ba = "Sin", Ha = "Sinh", Ua = "Sign", Ya = "Sigmoid", Qa = "Softplus", ja = "Sqrt", Ou = "Sum", Xu = "SpaceToBatchND", Pu = "SplitV", Zu = "Softmax", mf = "SparseFillEmptyRows", gf = "SparseReshape", bf = "SparseSegmentMean", xf = "SparseSegmentSum", Dx = "SparseToDense", Ja = "SquaredDifference", yf = "Square", wf = "StridedSlice", If = "StringNGrams", Cf = "StringSplit", vf = "StringToHashBucketFast", qa = "Sub", tl = "Tan", el = "Tanh", nl = "Tile", kf = "TopK", Sf = "Transform", Rr = "Transpose", Tf = "Unique", Ku = "Unpack", Bu = "UnsortedSegmentSum", m8 = "UpperBound", Hu = "ZerosLike", sl = "Step", Gh = "FromPixels", Nf = "RotateWithOffset", hc = "_FusedMatMul", pc = "FusedConv2D", Mx = "FusedDepthwiseConv2D";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fn(...n) {
  V().getBool("IS_TEST") || V().getBool("PROD") || console.warn(...n);
}
function nk(...n) {
  V().getBool("IS_TEST") || V().getBool("PROD") || console.log(...n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zr = zp("kernelRegistry", () => /* @__PURE__ */ new Map()), _i = zp("gradRegistry", () => /* @__PURE__ */ new Map());
function Lh(n, t) {
  const e = Rf(n, t);
  return zr.get(e);
}
function Vg(n) {
  return _i.get(n);
}
function Dh(n) {
  const t = zr.entries(), e = [];
  for (; ; ) {
    const { done: s, value: o } = t.next();
    if (s)
      break;
    const [r, i] = o, [a] = r.split("_");
    a === n && e.push(i);
  }
  return e;
}
function cn(n) {
  const { kernelName: t, backendName: e } = n, s = Rf(t, e);
  zr.has(s) && fn(`The kernel '${t}' for backend '${e}' is already registered`), zr.set(s, n);
}
function sk(n) {
  const { kernelName: t } = n;
  _i.has(t) && V().getBool("DEBUG") && fn(`Overriding the gradient for '${t}'`), _i.set(t, n);
}
function g8(n, t) {
  const e = Rf(n, t);
  if (!zr.has(e))
    throw new Error(`The kernel '${n}' for backend '${t}' is not registered`);
  zr.delete(e);
}
function b8(n) {
  if (!_i.has(n))
    throw new Error(`The gradient '${n}' for backend is not registered`);
  _i.delete(n);
}
function x8(n, t) {
  Dh(n).forEach((s) => {
    const o = Object.assign({}, s, { backendName: t });
    cn(o);
  });
}
function Rf(n, t) {
  return `${t}_${n}`;
}
var Mh = Ht, $n = null;
try {
  $n = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    13,
    2,
    96,
    0,
    1,
    127,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    3,
    7,
    6,
    0,
    1,
    1,
    1,
    1,
    1,
    6,
    6,
    1,
    127,
    1,
    65,
    0,
    11,
    7,
    50,
    6,
    3,
    109,
    117,
    108,
    0,
    1,
    5,
    100,
    105,
    118,
    95,
    115,
    0,
    2,
    5,
    100,
    105,
    118,
    95,
    117,
    0,
    3,
    5,
    114,
    101,
    109,
    95,
    115,
    0,
    4,
    5,
    114,
    101,
    109,
    95,
    117,
    0,
    5,
    8,
    103,
    101,
    116,
    95,
    104,
    105,
    103,
    104,
    0,
    0,
    10,
    191,
    1,
    6,
    4,
    0,
    35,
    0,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    126,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    127,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    128,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    129,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    130,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11
  ])), {}).exports;
} catch {
}
function Ht(n, t, e) {
  this.low = n | 0, this.high = t | 0, this.unsigned = !!e;
}
Ht.prototype.__isLong__;
Object.defineProperty(Ht.prototype, "__isLong__", { value: !0 });
function un(n) {
  return (n && n.__isLong__) === !0;
}
Ht.isLong = un;
var _g = {}, Ag = {};
function lr(n, t) {
  var e, s, o;
  return t ? (n >>>= 0, (o = 0 <= n && n < 256) && (s = Ag[n], s) ? s : (e = Ut(n, (n | 0) < 0 ? -1 : 0, !0), o && (Ag[n] = e), e)) : (n |= 0, (o = -128 <= n && n < 128) && (s = _g[n], s) ? s : (e = Ut(n, n < 0 ? -1 : 0, !1), o && (_g[n] = e), e));
}
Ht.fromInt = lr;
function En(n, t) {
  if (isNaN(n))
    return t ? Lo : Gn;
  if (t) {
    if (n < 0)
      return Lo;
    if (n >= zx)
      return Vx;
  } else {
    if (n <= -Xg)
      return nn;
    if (n + 1 >= Xg)
      return Wx;
  }
  return n < 0 ? En(-n, t).neg() : Ut(n % Fr | 0, n / Fr | 0, t);
}
Ht.fromNumber = En;
function Ut(n, t, e) {
  return new Ht(n, t, e);
}
Ht.fromBits = Ut;
var fc = Math.pow;
function $f(n, t, e) {
  if (n.length === 0)
    throw Error("empty string");
  if (n === "NaN" || n === "Infinity" || n === "+Infinity" || n === "-Infinity")
    return Gn;
  if (typeof t == "number" ? (e = t, t = !1) : t = !!t, e = e || 10, e < 2 || 36 < e)
    throw RangeError("radix");
  var s;
  if ((s = n.indexOf("-")) > 0)
    throw Error("interior hyphen");
  if (s === 0)
    return $f(n.substring(1), t, e).neg();
  for (var o = En(fc(e, 8)), r = Gn, i = 0; i < n.length; i += 8) {
    var a = Math.min(8, n.length - i), l = parseInt(n.substring(i, i + a), e);
    if (a < 8) {
      var c = En(fc(e, a));
      r = r.mul(c).add(En(l));
    } else
      r = r.mul(o), r = r.add(En(l));
  }
  return r.unsigned = t, r;
}
Ht.fromString = $f;
function ns(n, t) {
  return typeof n == "number" ? En(n, t) : typeof n == "string" ? $f(n, t) : Ut(n.low, n.high, typeof t == "boolean" ? t : n.unsigned);
}
Ht.fromValue = ns;
var Og = 1 << 16, ok = 1 << 24, Fr = Og * Og, zx = Fr * Fr, Xg = zx / 2, Pg = lr(ok), Gn = lr(0);
Ht.ZERO = Gn;
var Lo = lr(0, !0);
Ht.UZERO = Lo;
var Tr = lr(1);
Ht.ONE = Tr;
var Fx = lr(1, !0);
Ht.UONE = Fx;
var zh = lr(-1);
Ht.NEG_ONE = zh;
var Wx = Ut(-1, 2147483647, !1);
Ht.MAX_VALUE = Wx;
var Vx = Ut(-1, -1, !0);
Ht.MAX_UNSIGNED_VALUE = Vx;
var nn = Ut(0, -2147483648, !1);
Ht.MIN_VALUE = nn;
var tt = Ht.prototype;
tt.toInt = function() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
tt.toNumber = function() {
  return this.unsigned ? (this.high >>> 0) * Fr + (this.low >>> 0) : this.high * Fr + (this.low >>> 0);
};
tt.toString = function(t) {
  if (t = t || 10, t < 2 || 36 < t)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative())
    if (this.eq(nn)) {
      var e = En(t), s = this.div(e), o = s.mul(e).sub(this);
      return s.toString(t) + o.toInt().toString(t);
    } else
      return "-" + this.neg().toString(t);
  for (var r = En(fc(t, 6), this.unsigned), i = this, a = ""; ; ) {
    var l = i.div(r), c = i.sub(l.mul(r)).toInt() >>> 0, u = c.toString(t);
    if (i = l, i.isZero())
      return u + a;
    for (; u.length < 6; )
      u = "0" + u;
    a = "" + u + a;
  }
};
tt.getHighBits = function() {
  return this.high;
};
tt.getHighBitsUnsigned = function() {
  return this.high >>> 0;
};
tt.getLowBits = function() {
  return this.low;
};
tt.getLowBitsUnsigned = function() {
  return this.low >>> 0;
};
tt.getNumBitsAbs = function() {
  if (this.isNegative())
    return this.eq(nn) ? 64 : this.neg().getNumBitsAbs();
  for (var t = this.high != 0 ? this.high : this.low, e = 31; e > 0 && !(t & 1 << e); e--)
    ;
  return this.high != 0 ? e + 33 : e + 1;
};
tt.isZero = function() {
  return this.high === 0 && this.low === 0;
};
tt.eqz = tt.isZero;
tt.isNegative = function() {
  return !this.unsigned && this.high < 0;
};
tt.isPositive = function() {
  return this.unsigned || this.high >= 0;
};
tt.isOdd = function() {
  return (this.low & 1) === 1;
};
tt.isEven = function() {
  return (this.low & 1) === 0;
};
tt.equals = function(t) {
  return un(t) || (t = ns(t)), this.unsigned !== t.unsigned && this.high >>> 31 === 1 && t.high >>> 31 === 1 ? !1 : this.high === t.high && this.low === t.low;
};
tt.eq = tt.equals;
tt.notEquals = function(t) {
  return !this.eq(
    /* validates */
    t
  );
};
tt.neq = tt.notEquals;
tt.ne = tt.notEquals;
tt.lessThan = function(t) {
  return this.comp(
    /* validates */
    t
  ) < 0;
};
tt.lt = tt.lessThan;
tt.lessThanOrEqual = function(t) {
  return this.comp(
    /* validates */
    t
  ) <= 0;
};
tt.lte = tt.lessThanOrEqual;
tt.le = tt.lessThanOrEqual;
tt.greaterThan = function(t) {
  return this.comp(
    /* validates */
    t
  ) > 0;
};
tt.gt = tt.greaterThan;
tt.greaterThanOrEqual = function(t) {
  return this.comp(
    /* validates */
    t
  ) >= 0;
};
tt.gte = tt.greaterThanOrEqual;
tt.ge = tt.greaterThanOrEqual;
tt.compare = function(t) {
  if (un(t) || (t = ns(t)), this.eq(t))
    return 0;
  var e = this.isNegative(), s = t.isNegative();
  return e && !s ? -1 : !e && s ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1;
};
tt.comp = tt.compare;
tt.negate = function() {
  return !this.unsigned && this.eq(nn) ? nn : this.not().add(Tr);
};
tt.neg = tt.negate;
tt.add = function(t) {
  un(t) || (t = ns(t));
  var e = this.high >>> 16, s = this.high & 65535, o = this.low >>> 16, r = this.low & 65535, i = t.high >>> 16, a = t.high & 65535, l = t.low >>> 16, c = t.low & 65535, u = 0, d = 0, h = 0, p = 0;
  return p += r + c, h += p >>> 16, p &= 65535, h += o + l, d += h >>> 16, h &= 65535, d += s + a, u += d >>> 16, d &= 65535, u += e + i, u &= 65535, Ut(h << 16 | p, u << 16 | d, this.unsigned);
};
tt.subtract = function(t) {
  return un(t) || (t = ns(t)), this.add(t.neg());
};
tt.sub = tt.subtract;
tt.multiply = function(t) {
  if (this.isZero())
    return Gn;
  if (un(t) || (t = ns(t)), $n) {
    var e = $n.mul(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return Ut(e, $n.get_high(), this.unsigned);
  }
  if (t.isZero())
    return Gn;
  if (this.eq(nn))
    return t.isOdd() ? nn : Gn;
  if (t.eq(nn))
    return this.isOdd() ? nn : Gn;
  if (this.isNegative())
    return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();
  if (t.isNegative())
    return this.mul(t.neg()).neg();
  if (this.lt(Pg) && t.lt(Pg))
    return En(this.toNumber() * t.toNumber(), this.unsigned);
  var s = this.high >>> 16, o = this.high & 65535, r = this.low >>> 16, i = this.low & 65535, a = t.high >>> 16, l = t.high & 65535, c = t.low >>> 16, u = t.low & 65535, d = 0, h = 0, p = 0, f = 0;
  return f += i * u, p += f >>> 16, f &= 65535, p += r * u, h += p >>> 16, p &= 65535, p += i * c, h += p >>> 16, p &= 65535, h += o * u, d += h >>> 16, h &= 65535, h += r * c, d += h >>> 16, h &= 65535, h += i * l, d += h >>> 16, h &= 65535, d += s * u + o * c + r * l + i * a, d &= 65535, Ut(p << 16 | f, d << 16 | h, this.unsigned);
};
tt.mul = tt.multiply;
tt.divide = function(t) {
  if (un(t) || (t = ns(t)), t.isZero())
    throw Error("division by zero");
  if ($n) {
    if (!this.unsigned && this.high === -2147483648 && t.low === -1 && t.high === -1)
      return this;
    var e = (this.unsigned ? $n.div_u : $n.div_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return Ut(e, $n.get_high(), this.unsigned);
  }
  if (this.isZero())
    return this.unsigned ? Lo : Gn;
  var s, o, r;
  if (this.unsigned) {
    if (t.unsigned || (t = t.toUnsigned()), t.gt(this))
      return Lo;
    if (t.gt(this.shru(1)))
      return Fx;
    r = Lo;
  } else {
    if (this.eq(nn)) {
      if (t.eq(Tr) || t.eq(zh))
        return nn;
      if (t.eq(nn))
        return Tr;
      var i = this.shr(1);
      return s = i.div(t).shl(1), s.eq(Gn) ? t.isNegative() ? Tr : zh : (o = this.sub(t.mul(s)), r = s.add(o.div(t)), r);
    } else if (t.eq(nn))
      return this.unsigned ? Lo : Gn;
    if (this.isNegative())
      return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();
    if (t.isNegative())
      return this.div(t.neg()).neg();
    r = Gn;
  }
  for (o = this; o.gte(t); ) {
    s = Math.max(1, Math.floor(o.toNumber() / t.toNumber()));
    for (var a = Math.ceil(Math.log(s) / Math.LN2), l = a <= 48 ? 1 : fc(2, a - 48), c = En(s), u = c.mul(t); u.isNegative() || u.gt(o); )
      s -= l, c = En(s, this.unsigned), u = c.mul(t);
    c.isZero() && (c = Tr), r = r.add(c), o = o.sub(u);
  }
  return r;
};
tt.div = tt.divide;
tt.modulo = function(t) {
  if (un(t) || (t = ns(t)), $n) {
    var e = (this.unsigned ? $n.rem_u : $n.rem_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return Ut(e, $n.get_high(), this.unsigned);
  }
  return this.sub(this.div(t).mul(t));
};
tt.mod = tt.modulo;
tt.rem = tt.modulo;
tt.not = function() {
  return Ut(~this.low, ~this.high, this.unsigned);
};
tt.and = function(t) {
  return un(t) || (t = ns(t)), Ut(this.low & t.low, this.high & t.high, this.unsigned);
};
tt.or = function(t) {
  return un(t) || (t = ns(t)), Ut(this.low | t.low, this.high | t.high, this.unsigned);
};
tt.xor = function(t) {
  return un(t) || (t = ns(t)), Ut(this.low ^ t.low, this.high ^ t.high, this.unsigned);
};
tt.shiftLeft = function(t) {
  return un(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? Ut(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : Ut(0, this.low << t - 32, this.unsigned);
};
tt.shl = tt.shiftLeft;
tt.shiftRight = function(t) {
  return un(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? Ut(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : Ut(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
tt.shr = tt.shiftRight;
tt.shiftRightUnsigned = function(t) {
  if (un(t) && (t = t.toInt()), t &= 63, t === 0)
    return this;
  var e = this.high;
  if (t < 32) {
    var s = this.low;
    return Ut(s >>> t | e << 32 - t, e >>> t, this.unsigned);
  } else
    return t === 32 ? Ut(e, 0, this.unsigned) : Ut(e >>> t - 32, 0, this.unsigned);
};
tt.shru = tt.shiftRightUnsigned;
tt.shr_u = tt.shiftRightUnsigned;
tt.toSigned = function() {
  return this.unsigned ? Ut(this.low, this.high, !1) : this;
};
tt.toUnsigned = function() {
  return this.unsigned ? this : Ut(this.low, this.high, !0);
};
tt.toBytes = function(t) {
  return t ? this.toBytesLE() : this.toBytesBE();
};
tt.toBytesLE = function() {
  var t = this.high, e = this.low;
  return [
    e & 255,
    e >>> 8 & 255,
    e >>> 16 & 255,
    e >>> 24,
    t & 255,
    t >>> 8 & 255,
    t >>> 16 & 255,
    t >>> 24
  ];
};
tt.toBytesBE = function() {
  var t = this.high, e = this.low;
  return [
    t >>> 24,
    t >>> 16 & 255,
    t >>> 8 & 255,
    t & 255,
    e >>> 24,
    e >>> 16 & 255,
    e >>> 8 & 255,
    e & 255
  ];
};
Ht.fromBytes = function(t, e, s) {
  return s ? Ht.fromBytesLE(t, e) : Ht.fromBytesBE(t, e);
};
Ht.fromBytesLE = function(t, e) {
  return new Ht(
    t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24,
    t[4] | t[5] << 8 | t[6] << 16 | t[7] << 24,
    e
  );
};
Ht.fromBytesBE = function(t, e) {
  return new Ht(
    t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7],
    t[0] << 24 | t[1] << 16 | t[2] << 8 | t[3],
    e
  );
};
const rk = /* @__PURE__ */ _v({
  __proto__: null,
  default: Mh
}, [Mh]);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ro = (
  // tslint:disable-next-line
  Mh || rk
);
function ol(n) {
  return Ro.fromString(n, !0, 16);
}
const _x = ol("c3a5c85c97cb3127"), No = ol("b492b66fbe98f273"), Ve = ol("9ae16a3b2f90404f");
function Fh(n) {
  return n.xor(n.shru(47));
}
function Ax(n, t, e) {
  const s = n.slice(t, t + e);
  return Ro.fromBytes(Array.from(s), !0, !0);
}
function Xt(n, t) {
  return Ax(n, t, 8);
}
function Zg(n, t) {
  return Ax(n, t, 4);
}
function xe(n, t) {
  return t === 0 ? n : n.shru(t).or(n.shl(64 - t));
}
function qs(n, t, e = ol("9ddfea08eb382d69")) {
  let s = n.xor(t).mul(e);
  s = s.xor(s.shru(47));
  let o = t.xor(s).mul(e);
  return o = o.xor(o.shru(47)), o = o.mul(e), o;
}
function ik(n, t, e, s, o, r) {
  o = o.add(n), r = xe(r.add(o).add(s), 21);
  const i = o;
  return o = o.add(t), o = o.add(e), r = r.add(xe(o, 44)), [o.add(s), r.add(i)];
}
function Fl(n, t, e, s) {
  return ik(Xt(n, t), Xt(n, t + 8), Xt(n, t + 16), Xt(n, t + 24), e, s);
}
function ak(n, t = n.length) {
  if (t >= 8) {
    const e = Ve.add(t * 2), s = Xt(n, 0).add(Ve), o = Xt(n, t - 8), r = xe(o, 37).mul(e).add(s), i = xe(s, 25).add(o).mul(e);
    return qs(r, i, e);
  }
  if (t >= 4) {
    const e = Ve.add(t * 2), s = Zg(n, 0);
    return qs(s.shl(3).add(t), Zg(n, t - 4), e);
  }
  if (t > 0) {
    const e = n[0], s = n[t >> 1], o = n[t - 1], r = e + (s << 8), i = t + (o << 2);
    return Fh(Ve.mul(r).xor(_x.mul(i))).mul(Ve);
  }
  return Ve;
}
function lk(n, t = n.length) {
  const e = Ve.add(t * 2), s = Xt(n, 0).mul(No), o = Xt(n, 8), r = Xt(n, t - 8).mul(e), i = Xt(n, t - 16).mul(Ve);
  return qs(xe(s.add(o), 43).add(xe(r, 30)).add(i), s.add(xe(o.add(Ve), 18)).add(r), e);
}
function ck(n, t = n.length) {
  const e = Ve.add(t * 2), s = Xt(n, 0).mul(Ve), o = Xt(n, 8), r = Xt(n, t - 8).mul(e), i = Xt(n, t - 16).mul(Ve), a = xe(s.add(o), 43).add(xe(r, 30)).add(i), l = qs(a, s.add(xe(o.add(Ve), 18)).add(r), e), c = Xt(n, 16).mul(e), u = Xt(n, 24), d = a.add(Xt(n, t - 32)).mul(e), h = l.add(Xt(n, t - 24)).mul(e);
  return qs(xe(c.add(u), 43).add(xe(d, 30)).add(h), c.add(xe(u.add(s), 18)).add(d), e);
}
function Ox(n, t = n.length) {
  const e = Ro.fromNumber(81, !0);
  if (t <= 32)
    return t <= 16 ? ak(n, t) : lk(n, t);
  if (t <= 64)
    return ck(n, t);
  let s = e, o = e.mul(No).add(113), r = Fh(o.mul(Ve).add(113)).mul(Ve), i = [Ro.UZERO, Ro.UZERO], a = [Ro.UZERO, Ro.UZERO];
  s = s.mul(Ve).add(Xt(n, 0));
  let l = 0;
  const c = (t - 1 >> 6) * 64, u = c + (t - 1 & 63) - 63;
  do
    s = xe(s.add(o).add(i[0]).add(Xt(n, l + 8)), 37).mul(No), o = xe(o.add(i[1]).add(Xt(n, l + 48)), 42).mul(No), s = s.xor(a[1]), o = o.add(i[0]).add(Xt(n, l + 40)), r = xe(r.add(a[0]), 33).mul(No), i = Fl(n, l, i[1].mul(No), s.add(a[0])), a = Fl(n, l + 32, r.add(a[1]), o.add(Xt(n, l + 16))), [r, s] = [s, r], l += 64;
  while (l !== c);
  const d = No.add(r.and(255).shl(1));
  return l = u, a[0] = a[0].add(t - 1 & 63), i[0] = i[0].add(a[0]), a[0] = a[0].add(i[0]), s = xe(s.add(o).add(i[0]).add(Xt(n, l + 8)), 37).mul(d), o = xe(o.add(i[1]).add(Xt(n, l + 48)), 42).mul(d), s = s.xor(a[1].mul(9)), o = o.add(i[0].mul(9).add(Xt(n, l + 40))), r = xe(r.add(a[0]), 33).mul(d), i = Fl(n, l, i[1].mul(d), s.add(a[0])), a = Fl(n, l + 32, r.add(a[1]), o.add(Xt(n, l + 16))), [r, s] = [s, r], qs(qs(i[0], a[0], d).add(Fh(o).mul(_x)).add(r), qs(i[1], a[1], d).add(s), d);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zs(n, t) {
  return t === "string" ? Es(n) : fo([n], t);
}
function uk(n, t) {
  return n instanceof Float32Array && t === "float32" || n instanceof Int32Array && t === "int32" || n instanceof Uint8Array && t === "bool";
}
function fo(n, t) {
  if (t === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(n) && (n = ao(n)), V().getBool("DEBUG") && px(n, t), uk(n, t))
    return n;
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool") {
    const e = new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      Math.round(n[s]) !== 0 && (e[s] = 1);
    return e;
  } else
    throw new Error(`Unknown data type ${t}`);
}
function Te() {
  return V().platform.now();
}
function dk(n, t) {
  return V().platform.fetch(n, t);
}
function Es(n, t = "utf-8") {
  return t = t || "utf-8", V().platform.encode(n, t);
}
function Gs(n, t = "utf-8") {
  return t = t || "utf-8", V().platform.decode(n, t);
}
function wn(n) {
  return V().platform.isTypedArray(n);
}
function ao(n, t = [], e = !1) {
  if (t == null && (t = []), typeof n == "boolean" || typeof n == "number" || typeof n == "string" || la(n) || n == null || wn(n) && e)
    t.push(n);
  else if (Array.isArray(n) || wn(n))
    for (let s = 0; s < n.length; ++s)
      ao(n[s], t, e);
  else {
    let s = -1;
    for (const o of Object.keys(n))
      /^([1-9]+[0-9]*|0)$/.test(o) && (s = Math.max(s, Number(o)));
    for (let o = 0; o <= s; o++)
      ao(n[o], t, e);
  }
  return t;
}
const y8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arraysEqual: $t,
  assert: k,
  assertNonNegativeIntegerDimensions: Is,
  assertNonNull: Bc,
  assertShapesMatch: Xe,
  bytesFromStringArray: mx,
  bytesPerElement: Vi,
  checkConversionForErrors: px,
  clamp: ro,
  computeStrides: dt,
  convertBackendValuesAndArrayBuffer: xx,
  createScalarValue: zs,
  createShuffledIndices: Hv,
  decodeString: Gs,
  distSquared: Zv,
  encodeString: Es,
  fetch: dk,
  fingerPrint64: Ox,
  flatten: ao,
  getArrayFromDType: ae,
  getTypedArrayFromDType: Ie,
  hasEncodingLoss: Dp,
  hexToLong: ol,
  indexToLoc: ar,
  inferDtype: jr,
  inferFromImplicitShape: Lp,
  isBoolean: gx,
  isFunction: io,
  isInt: Xo,
  isNumber: uc,
  isPromise: la,
  isScalarShape: Kv,
  isString: Qr,
  isTypedArray: wn,
  isValidDtype: fx,
  locToIndex: Yn,
  makeOnesTypedArray: Hc,
  makeZerosNestedTypedArray: Mp,
  makeZerosTypedArray: Re,
  nearestDivisor: dc,
  nearestLargerEven: Kc,
  now: Te,
  parseAxisParam: Ct,
  randUniform: Pv,
  repeatedTry: Rh,
  rightPad: Vo,
  shuffle: Gp,
  shuffleCombo: Xv,
  sizeFromShape: X,
  sizeToSquarishShape: cc,
  squeezeShape: Ms,
  sum: hx,
  swap: Rs,
  tanh: Bv,
  toNestedArray: Mn,
  toTypedArray: fo
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hk {
  constructor(t, e) {
    this.backendTimer = t, this.logger = e, e == null && (this.logger = new fk());
  }
  profileKernel(t, e, s) {
    let o;
    const r = () => {
      o = s();
    };
    let i;
    const a = Te();
    if (this.backendTimer.timerAvailable())
      i = this.backendTimer.time(r);
    else {
      r();
      for (const c of o)
        c.dataSync();
      i = Promise.resolve({ kernelMs: Te() - a });
    }
    if (V().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let c = 0; c < o.length; c++) {
        const u = o[c];
        u.data().then((d) => {
          pk(d, u.dtype, t);
        });
      }
    return {
      kernelName: t,
      outputs: o,
      inputs: e,
      timeMs: i.then((c) => c.kernelMs),
      extraInfo: i.then((c) => c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : "")
    };
  }
  logKernelProfile(t) {
    const { kernelName: e, outputs: s, timeMs: o, inputs: r, extraInfo: i } = t;
    s.forEach((a) => {
      Promise.all([a.data(), o, i]).then((l) => {
        this.logger.logKernelProfile(e, a, l[0], l[1], r, l[2]);
      });
    });
  }
}
function pk(n, t, e) {
  if (t !== "float32")
    return !1;
  for (let s = 0; s < n.length; s++) {
    const o = n[s];
    if (isNaN(o) || !isFinite(o))
      return console.warn(`Found ${o} in the result of '${e}'`), !0;
  }
  return !1;
}
class fk {
  logKernelProfile(t, e, s, o, r, i) {
    const a = typeof o == "number" ? Vo(`${o}ms`, 9) : o.error, l = Vo(t, 25), c = e.rank, u = e.size, d = Vo(e.shape.toString(), 14);
    let h = "";
    for (const p in r) {
      const f = r[p];
      if (f != null) {
        const m = f.shape || e.shape, g = m.length;
        h += `${p}: ${g}D ${g > 0 ? m : ""} `;
      }
    }
    console.log(`%c${l}	%c${a}	%c${c}D ${d}	%c${u}	%c${h}	%c${i}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mk(n, t, e) {
  const s = {}, o = {};
  for (let l = 0; l < t.length; l++)
    s[t[l].id] = !0;
  for (let l = 0; l < n.length; l++) {
    const c = n[l], u = c.inputs;
    for (const d in u) {
      const h = u[d];
      let p = !1;
      for (let f = 0; f < t.length; f++)
        if (s[h.id]) {
          c.outputs.forEach((m) => s[m.id] = !0), p = !0, o[c.id] = !0;
          break;
        }
      if (p)
        break;
    }
  }
  const r = {};
  r[e.id] = !0;
  const i = {};
  for (let l = n.length - 1; l >= 0; l--) {
    const c = n[l], u = c.inputs;
    for (let d = 0; d < c.outputs.length; d++)
      if (r[c.outputs[d].id]) {
        for (const h in u)
          r[u[h].id] = !0, i[c.id] = !0;
        break;
      }
  }
  const a = [];
  for (let l = 0; l < n.length; l++) {
    const c = n[l];
    if (o[c.id] && i[c.id]) {
      const u = {};
      for (const h in c.inputs) {
        const p = c.inputs[h];
        s[p.id] && (u[h] = p);
      }
      const d = Object.assign({}, c);
      d.inputs = u, d.outputs = c.outputs, a.push(d);
    }
  }
  return a;
}
function gk(n, t, e, s) {
  for (let o = t.length - 1; o >= 0; o--) {
    const r = t[o], i = [];
    if (r.outputs.forEach((l) => {
      const c = n[l.id];
      c != null ? i.push(c) : i.push(null);
    }), r.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);
    const a = r.gradient(i);
    for (const l in r.inputs) {
      if (!(l in a))
        throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);
      const c = e(() => a[l]());
      if (c.dtype !== "float32")
        throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`);
      const u = r.inputs[l];
      if (!$t(c.shape, u.shape))
        throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`);
      if (n[u.id] == null)
        n[u.id] = c;
      else {
        const d = n[u.id];
        n[u.id] = s(d, c), d.dispose();
      }
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kg = 20, bi = 3, Md = 7;
function bk(n, t, e, s) {
  const o = dt(t), r = xk(n, t, e, o), i = t.length, a = oc(n, t, e, o, r), l = ["Tensor"];
  return s && (l.push(`  dtype: ${e}`), l.push(`  rank: ${i}`), l.push(`  shape: [${t}]`), l.push("  values:")), l.push(a.map((c) => "    " + c).join(`
`)), l.join(`
`);
}
function xk(n, t, e, s) {
  const o = X(t), r = s[s.length - 1], i = new Array(r).fill(0), a = t.length, l = e === "complex64" ? Si(n) : n;
  if (a > 1)
    for (let c = 0; c < o / r; c++) {
      const u = c * r;
      for (let d = 0; d < r; d++)
        i[d] = Math.max(i[d], ki(l[u + d], 0, e).length);
    }
  return i;
}
function ki(n, t, e) {
  let s;
  return Array.isArray(n) ? s = `${parseFloat(n[0].toFixed(Md))} + ${parseFloat(n[1].toFixed(Md))}j` : Qr(n) ? s = `'${n}'` : e === "bool" ? s = Xx(n) : s = parseFloat(n.toFixed(Md)).toString(), Vo(s, t);
}
function Xx(n) {
  return n === 0 ? "false" : "true";
}
function oc(n, t, e, s, o, r = !0) {
  const i = e === "complex64" ? 2 : 1, a = t[0], l = t.length;
  if (l === 0) {
    if (e === "complex64") {
      const m = Si(n);
      return [ki(m[0], 0, e)];
    }
    return e === "bool" ? [Xx(n[0])] : [n[0].toString()];
  }
  if (l === 1) {
    if (a > Kg) {
      const g = bi * i;
      let b = Array.from(n.slice(0, g)), x = Array.from(n.slice((a - bi) * i, a * i));
      return e === "complex64" && (b = Si(b), x = Si(x)), [
        "[" + b.map((w, y) => ki(w, o[y], e)).join(", ") + ", ..., " + x.map((w, y) => ki(w, o[a - bi + y], e)).join(", ") + "]"
      ];
    }
    return [
      "[" + (e === "complex64" ? Si(n) : Array.from(n)).map((g, b) => ki(g, o[b], e)).join(", ") + "]"
    ];
  }
  const c = t.slice(1), u = s.slice(1), d = s[0] * i, h = [];
  if (a > Kg) {
    for (let m = 0; m < bi; m++) {
      const g = m * d, b = g + d;
      h.push(...oc(
        n.slice(g, b),
        c,
        e,
        u,
        o,
        !1
        /* isLast */
      ));
    }
    h.push("...");
    for (let m = a - bi; m < a; m++) {
      const g = m * d, b = g + d;
      h.push(...oc(
        n.slice(g, b),
        c,
        e,
        u,
        o,
        m === a - 1
        /* isLast */
      ));
    }
  } else
    for (let m = 0; m < a; m++) {
      const g = m * d, b = g + d;
      h.push(...oc(
        n.slice(g, b),
        c,
        e,
        u,
        o,
        m === a - 1
        /* isLast */
      ));
    }
  const p = l === 2 ? "," : "";
  h[0] = "[" + (a > 0 ? h[0] + p : "");
  for (let m = 1; m < h.length - 1; m++)
    h[m] = " " + h[m] + p;
  let f = `,
`;
  for (let m = 2; m < l; m++)
    f += `
`;
  return h[h.length - 1] = " " + h[h.length - 1] + "]" + (r ? "" : f), h;
}
function Si(n) {
  const t = [];
  for (let e = 0; e < n.length; e += 2)
    t.push([n[e], n[e + 1]]);
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Me {
  constructor(t, e, s) {
    if (this.dtype = e, this.shape = t.slice(), this.size = X(t), s != null) {
      const o = s.length;
      k(o === this.size, () => `Length of values '${o}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (e === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = s || ae(e, this.size), this.strides = dt(t);
  }
  /**
   * Sets a value in the buffer at a given location.
   *
   * @param value The value to set.
   * @param locs  The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  set(t, ...e) {
    e.length === 0 && (e = [0]), k(e.length === this.rank, () => `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);
    const s = this.locToIndex(e);
    this.values[s] = t;
  }
  /**
   * Returns the value in the buffer at the provided location.
   *
   * @param locs The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  get(...t) {
    t.length === 0 && (t = [0]);
    let e = 0;
    for (const o of t) {
      if (o < 0 || o >= this.shape[e]) {
        const r = `Requested out of range element at ${t}.   Buffer shape=${this.shape}`;
        throw new Error(r);
      }
      e++;
    }
    let s = t[t.length - 1];
    for (let o = 0; o < t.length - 1; ++o)
      s += this.strides[o] * t[o];
    return this.values[s];
  }
  locToIndex(t) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return t[0];
    let e = t[t.length - 1];
    for (let s = 0; s < t.length - 1; ++s)
      e += this.strides[s] * t[s];
    return e;
  }
  indexToLoc(t) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [t];
    const e = new Array(this.shape.length);
    for (let s = 0; s < e.length - 1; ++s)
      e[s] = Math.floor(t / this.strides[s]), t -= e[s] * this.strides[s];
    return e[e.length - 1] = t, e;
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Creates an immutable `tf.Tensor` object from the buffer.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  toTensor() {
    return Bn().makeTensor(this.values, this.shape, this.dtype);
  }
}
let Bn = null, kr = null;
function yk(n) {
  Bn = n;
}
function wk(n) {
  kr = n;
}
class Mt {
  constructor(t, e, s, o) {
    this.kept = !1, this.isDisposedInternal = !1, this.shape = t.slice(), this.dtype = e || "float32", this.size = X(t), this.strides = dt(t), this.dataId = s, this.id = o, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async buffer() {
    const t = await this.data();
    return kr.buffer(this.shape, this.dtype, t);
  }
  /**
   * Returns a `tf.TensorBuffer` that holds the underlying data.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  bufferSync() {
    return kr.buffer(this.shape, this.dtype, this.dataSync());
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * asynchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async array() {
    const t = await this.data();
    return Mn(this.shape, t, this.dtype === "complex64");
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * synchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  arraySync() {
    return Mn(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  /**
   * Asynchronously downloads the values from the `tf.Tensor`. Returns a
   * promise of `TypedArray` that resolves when the computation has finished.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async data() {
    this.throwIfDisposed();
    const t = Bn().read(this.dataId);
    if (this.dtype === "string") {
      const e = await t;
      try {
        return e.map((s) => Gs(s));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return t;
  }
  /**
   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
   * and `data()`, this method prevents data from being downloaded to CPU.
   *
   * For WebGL backend, the data will be stored on a densely packed texture.
   * This means that the texture will use the RGBA channels to store value.
   *
   * For WebGPU backend, the data will be stored on a buffer. There is no
   * parameter, so can not use a user-defined size to create the buffer.
   *
   * @param options:
   *     For WebGL,
   *         - customTexShape: Optional. If set, will use the user defined
   *     texture shape to create the texture.
   *
   * @returns For WebGL backend, a GPUData contains the new texture and
   *     its information.
   *     {
   *        tensorRef: The tensor that is associated with this texture,
   *        texture: WebGLTexture,
   *        texShape: [number, number] // [height, width]
   *     }
   *
   *     For WebGPU backend, a GPUData contains the new buffer and
   *     its information.
   *     {
   *        tensorRef: The tensor that is associated with this buffer,
   *        buffer: GPUBuffer,
   *        bufSize: number
   *     }
   *
   *     Remember to dispose the GPUData after it is used by
   *     `res.tensorRef.dispose()`.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataToGPU(t) {
    return this.throwIfDisposed(), Bn().readToGPU(this.dataId, t);
  }
  /**
   * Synchronously downloads the values from the `tf.Tensor`. This blocks the
   * UI thread until the values are ready, which can cause performance issues.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataSync() {
    this.throwIfDisposed();
    const t = Bn().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return t.map((e) => Gs(e));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return t;
  }
  /** Returns the underlying bytes of the tensor's data. */
  async bytes() {
    this.throwIfDisposed();
    const t = await Bn().read(this.dataId);
    return this.dtype === "string" ? t : new Uint8Array(t.buffer);
  }
  /**
   * Disposes `tf.Tensor` from memory.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dispose() {
    this.isDisposed || (Bn().disposeTensor(this), this.isDisposedInternal = !0);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  /**
   * Prints the `tf.Tensor`. See `tf.print` for details.
   *
   * @param verbose Whether to print verbose information about the tensor,
   *    including dtype and size.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  print(t = !1) {
    return kr.print(this, t);
  }
  /**
   * Returns a copy of the tensor. See `tf.clone` for details.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  clone() {
    return this.throwIfDisposed(), kr.clone(this);
  }
  /**
   * Returns a human-readable description of the tensor. Useful for logging.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  toString(t = !1) {
    const e = this.dataSync();
    return bk(e, this.shape, this.dtype, t);
  }
  cast(t) {
    return this.throwIfDisposed(), kr.cast(this, t);
  }
  variable(t = !0, e, s) {
    return this.throwIfDisposed(), Bn().makeVariable(this, t, e, s);
  }
}
Object.defineProperty(Mt, Symbol.hasInstance, {
  value: (n) => !!n && n.data != null && n.dataSync != null && n.throwIfDisposed != null
});
function P() {
  return zp("Tensor", () => Mt);
}
P();
class mc extends Mt {
  constructor(t, e, s, o) {
    super(t.shape, t.dtype, t.dataId, o), this.trainable = e, this.name = s;
  }
  /**
   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
   * the same shape and dtype as the old `tf.Tensor`.
   *
   * @param newValue New tensor to be assigned to this variable.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  assign(t) {
    if (t.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);
    if (!$t(t.shape, this.shape))
      throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);
    Bn().disposeTensor(this), this.dataId = t.dataId, Bn().incRef(
      this,
      null
      /* backend */
    );
  }
  dispose() {
    Bn().disposeVariable(this), this.isDisposedInternal = !0;
  }
}
Object.defineProperty(mc, Symbol.hasInstance, {
  value: (n) => n instanceof Mt && n.assign != null && n.assign instanceof Function
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Bg;
(function(n) {
  n.R0 = "R0", n.R1 = "R1", n.R2 = "R2", n.R3 = "R3", n.R4 = "R4", n.R5 = "R5", n.R6 = "R6";
})(Bg || (Bg = {}));
var Wh;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "int32", n.complex64 = "complex64";
})(Wh || (Wh = {}));
var Vh;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "bool", n.complex64 = "complex64";
})(Vh || (Vh = {}));
var _h;
(function(n) {
  n.float32 = "float32", n.int32 = "float32", n.bool = "float32", n.complex64 = "complex64";
})(_h || (_h = {}));
var Ah;
(function(n) {
  n.float32 = "complex64", n.int32 = "complex64", n.bool = "complex64", n.complex64 = "complex64";
})(Ah || (Ah = {}));
const Ik = {
  float32: _h,
  int32: Wh,
  bool: Vh,
  complex64: Ah
};
function rn(n, t) {
  if (n === "string" || t === "string") {
    if (n === "string" && t === "string")
      return "string";
    throw new Error(`Can not upcast ${n} with ${t}`);
  }
  return Ik[n][t];
}
function Ef(n) {
  return rn(n, "int32");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function re(n, t) {
  if (n.dtype === t.dtype)
    return [n, t];
  const e = rn(n.dtype, t.dtype);
  return [n.cast(e), t.cast(e)];
}
function Ck(n, t) {
  k(n.dtype === t.dtype, () => `The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`);
}
function Uu(n, t) {
  return t.some((e) => e.id === n.id);
}
function Ls(n) {
  const t = [];
  return Px(n, t, /* @__PURE__ */ new Set()), t;
}
function Px(n, t, e) {
  if (n == null)
    return;
  if (n instanceof Mt) {
    t.push(n);
    return;
  }
  if (!vk(n))
    return;
  const s = n;
  for (const o in s) {
    const r = s[o];
    e.has(r) || (e.add(r), Px(r, t, e));
  }
}
function vk(n) {
  return Array.isArray(n) || typeof n == "object";
}
const w8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertTypesMatch: Ck,
  getTensorsInContainer: Ls,
  isTensorInList: Uu,
  makeTypesMatch: re
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zd(n) {
  return n.kernelName != null;
}
class Hg {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = !1, this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null,
      get kernelNames() {
        return Array.from(new Set(this.kernels.map((t) => t.name)));
      }
    };
  }
  dispose() {
    for (const t in this.registeredVariables)
      this.registeredVariables[t].dispose();
  }
}
class Wr {
  constructor(t) {
    this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Hg();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e];
      if (await this.initializeBackend(s).success) {
        await this.setBackend(s);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: t, asyncInit: e } = this.initializeBackendsAndReturnBest();
      if (e)
        throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(t);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(t) {
    if (!(t in this.registry))
      if (t in this.registryFactory) {
        const { asyncInit: e } = this.initializeBackend(t);
        if (e)
          return null;
      } else
        return null;
    return this.registry[t];
  }
  findBackendFactory(t) {
    return t in this.registryFactory ? this.registryFactory[t].factory : null;
  }
  registerBackend(t, e, s = 1) {
    return t in this.registryFactory ? (fn(`${t} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[t] = { factory: e, priority: s }, !0);
  }
  async setBackend(t) {
    if (this.registryFactory[t] == null)
      throw new Error(`Backend name '${t}' not found in registry`);
    if (this.backendName = t, this.registry[t] == null) {
      this.backendInstance = null;
      const { success: e, asyncInit: s } = this.initializeBackend(t);
      if (!(s ? await e : e))
        return !1;
    }
    return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new hk(this.backendInstance), !0;
  }
  setupRegisteredKernels() {
    Dh(this.backendName).forEach((e) => {
      e.setupFunc != null && e.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(t) {
    Dh(t).forEach((s) => {
      s.disposeFunc != null && s.disposeFunc(this.registry[t]);
    });
  }
  /**
   * Initializes a backend by looking up the backend name in the factory
   * registry and calling the factory method. Returns a boolean representing
   * whether the initialization of the backend suceeded. Throws an error if
   * there is no backend in the factory registry.
   */
  initializeBackend(t) {
    const e = this.registryFactory[t];
    if (e == null)
      throw new Error(`Cannot initialize backend ${t}, no registration found.`);
    try {
      const s = e.factory();
      if (s && !(s instanceof Ep) && typeof s.then == "function") {
        const o = ++this.pendingBackendInitId, r = s.then((i) => o < this.pendingBackendInitId ? !1 : (this.registry[t] = i, this.pendingBackendInit = null, !0)).catch((i) => (o < this.pendingBackendInitId || (this.pendingBackendInit = null, fn(`Initialization of backend ${t} failed`), fn(i.stack || i.message)), !1));
        return this.pendingBackendInit = r, { success: r, asyncInit: !0 };
      } else
        return this.registry[t] = s, { success: !0, asyncInit: !1 };
    } catch (s) {
      return fn(`Initialization of backend ${t} failed`), fn(s.stack || s.message), { success: !1, asyncInit: !1 };
    }
  }
  removeBackend(t) {
    if (!(t in this.registryFactory))
      throw new Error(`${t} backend not found in registry`);
    this.backendName === t && this.pendingBackendInit != null && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((t, e) => this.registryFactory[e].priority - this.registryFactory[t].priority);
  }
  initializeBackendsAndReturnBest() {
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e], { success: o, asyncInit: r } = this.initializeBackend(s);
      if (r || o)
        return { name: s, asyncInit: r };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(t, e) {
    const s = this.state.tensorInfo.get(e), o = s.backend, r = this.readSync(e), i = o.refCount(e);
    o.disposeData(e, !0), s.backend = t, t.move(e, r, s.shape, s.dtype, i), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(t, e) {
    let s = null;
    if (e == null) {
      if (typeof t != "function")
        throw new Error("Please provide a function to tidy()");
      e = t;
    } else {
      if (typeof t != "string" && !(t instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof e != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      s = t;
    }
    let o;
    return this.scopedRun(() => this.startScope(s), () => this.endScope(o), () => (o = e(), o instanceof Promise && console.error("Cannot return a Promise inside of tidy."), o));
  }
  scopedRun(t, e, s) {
    t();
    try {
      const o = s();
      return e(), o;
    } catch (o) {
      throw e(), o;
    }
  }
  nextTensorId() {
    return Wr.nextTensorId++;
  }
  nextVariableId() {
    return Wr.nextVariableId++;
  }
  /**
   * This method is called instead of the public-facing tensor.clone() when
   * saving a tensor for backwards pass. It makes sure to add the clone
   * operation to the tape regardless of being called inside a kernel
   * execution.
   */
  clone(t) {
    const e = E.runKernel($a, { x: t }), s = { x: t }, o = (i) => ({
      x: () => {
        const a = "float32", l = { x: i }, c = { dtype: a };
        return E.runKernel(
          ga,
          l,
          // tslint:disable-next-line: no-unnecessary-type-assertion
          c
        );
      }
    }), r = [];
    return this.addTapeNode(this.state.activeScope.name, s, [e], o, r, {}), e;
  }
  /**
   * Execute a kernel with the given name and return the output tensor.
   *
   * @param kernelName The name of the kernel to execute.
   * @param inputs A map of input names to tensors.
   * @param attrs A map of attribute names to their values. An attribute is a
   *     primitive (non-tensor) input to the kernel.
   * @param inputsToSave A list of tensors, inputs to save for the backprop
   *     computation.
   * @param outputsToSave A list of booleans, specifying which output to save
   *     for the backprop computation. These are booleans since the output
   * tensors are not visible to the user.
   */
  runKernel(t, e, s) {
    if (this.backendName == null && this.backend, !(Lh(t, this.backendName) != null))
      throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: t, inputs: e, attrs: s });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(t, e, s) {
    const o = this.backend.numDataIds();
    let r = 0;
    s.forEach((l) => {
      r += l.dtype === "complex64" ? 3 : 1;
    });
    const i = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], a = o - e - r - i;
    if (a > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`);
  }
  /**
   * Internal helper method to execute a kernel Func
   *
   * Use `runKernel` to execute kernels from outside of engine.
   */
  runKernelFunc(t) {
    let e, s = [];
    const o = this.isTapeOn(), r = this.state.numBytes, i = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let a;
    this.backendName == null && this.backend;
    let l;
    const c = zd(t) ? t.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (zd(t)) {
      const { kernelName: f, inputs: m, attrs: g } = t;
      this.backendName == null && this.backend;
      const b = Lh(f, this.backendName);
      k(b != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), a = () => {
        const x = this.backend.numDataIds();
        l = b.kernelFunc({ inputs: m, attrs: g, backend: this.backend });
        const w = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, x, w);
        const y = w.map((I) => I.rank != null ? I : this.makeTensorFromTensorInfo(I));
        if (o) {
          const I = this.getTensorsForGradient(f, m, y);
          s = this.saveTensorsForBackwardMode(I);
        }
        return y;
      };
    } else {
      const { forwardFunc: f } = t, m = (g) => {
        o && (s = g.map((b) => this.keep(this.clone(b))));
      };
      a = () => {
        const g = this.backend.numDataIds();
        l = this.tidy(() => f(this.backend, m));
        const b = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(c, g, b), b;
      };
    }
    const { inputs: u, attrs: d } = t, h = zd(t) ? null : t.backwardsFunc;
    let p;
    return this.scopedRun(
      // Stop recording to a tape when running a kernel.
      () => this.state.kernelDepth++,
      () => this.state.kernelDepth--,
      () => {
        !this.ENV.getBool("DEBUG") && !this.state.profiling ? e = a() : (p = this.profiler.profileKernel(c, u, () => a()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(p), e = p.outputs);
      }
    ), o && this.addTapeNode(c, u, e, h, s, d), this.state.profiling && this.state.activeProfile.kernels.push({
      name: c,
      bytesAdded: this.state.numBytes - r,
      totalBytesSnapshot: this.state.numBytes,
      tensorsAdded: this.state.numTensors - i,
      totalTensorsSnapshot: this.state.numTensors,
      inputShapes: Object.keys(u).map((f) => u[f] != null ? u[f].shape : null),
      outputShapes: e.map((f) => f.shape),
      kernelTimeMs: p.timeMs,
      extraInfo: p.extraInfo
    }), Array.isArray(l) ? e : e[0];
  }
  /**
   * Saves tensors used in forward mode for use in backward mode.
   *
   * @param tensors the list of tensors to save.
   */
  saveTensorsForBackwardMode(t) {
    return t.map((s) => this.keep(this.clone(s)));
  }
  /**
   * Returns a list of tensors to save for a given gradient calculation.
   *
   * @param kernelName name of kernel to look up gradient for.
   * @param inputs a map of input tensors.
   * @param outputs an array of output tensors from forward mode of kernel.
   */
  getTensorsForGradient(t, e, s) {
    const o = Vg(t);
    if (o != null) {
      const r = o.inputsToSave || [], i = o.outputsToSave || [];
      let a;
      o.saveAllInputs ? (k(Array.isArray(e), () => "saveAllInputs is true, expected inputs to be an array."), a = Object.keys(e).map((c) => e[c])) : a = r.map((c) => e[c]);
      const l = s.filter((c, u) => i[u]);
      return a.concat(l);
    }
    return [];
  }
  /**
   * Internal method used by public APIs for tensor creation. Makes a new
   * tensor with the provided shape, dtype and values. It always
   * creates a new data id and writes the values to the underlying backend.
   */
  makeTensor(t, e, s, o) {
    if (t == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    s = s || "float32", o = o || this.backend;
    let r = t;
    s === "string" && Qr(t[0]) && (r = t.map((l) => Es(l)));
    const i = o.write(r, e, s), a = new Mt(e, s, i, this.nextTensorId());
    if (this.trackTensor(a, o), s === "string") {
      const l = this.state.tensorInfo.get(i), c = mx(r);
      this.state.numBytes += c - l.bytes, l.bytes = c;
    }
    return a;
  }
  /**
   * Internal method used by backends. Makes a new tensor
   * that is a wrapper around an existing data id. It doesn't create
   * a new data id, only increments the ref count used in memory tracking.
   * @deprecated
   */
  makeTensorFromDataId(t, e, s, o) {
    s = s || "float32";
    const r = { dataId: t, shape: e, dtype: s };
    return this.makeTensorFromTensorInfo(r, o);
  }
  /**
   * Internal method used by backends. Makes a new tensor that is a wrapper
   * around an existing data id in TensorInfo. It doesn't create a new data id,
   * only increments the ref count used in memory tracking.
   */
  makeTensorFromTensorInfo(t, e) {
    const { dataId: s, shape: o, dtype: r } = t, i = new Mt(o, r, s, this.nextTensorId());
    return this.trackTensor(i, e), i;
  }
  makeVariable(t, e = !0, s, o) {
    s = s || this.nextVariableId().toString(), o != null && o !== t.dtype && (t = t.cast(o));
    const r = new mc(t, e, s, this.nextTensorId());
    if (this.state.registeredVariables[r.name] != null)
      throw new Error(`Variable with name ${r.name} was already registered`);
    return this.state.registeredVariables[r.name] = r, this.incRef(r, this.backend), r;
  }
  trackTensor(t, e) {
    this.state.numTensors++, t.dtype === "string" && this.state.numStringTensors++;
    let s = 0;
    t.dtype !== "complex64" && t.dtype !== "string" && (s = t.size * Vi(t.dtype)), this.state.numBytes += s, this.state.tensorInfo.has(t.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(t.dataId, {
      backend: e || this.backend,
      dtype: t.dtype,
      shape: t.shape,
      bytes: s
    })), t instanceof mc || this.track(t);
  }
  // Track the tensor by dataId and increase the refCount for the dataId in the
  // backend.
  // TODO(pyu10055): This is currently used by makeVariable method, to increase
  // refCount on the backend for the dataId. It can potentially be replaced with
  // Identity op indead of calling backend directly.
  incRef(t, e) {
    this.trackTensor(t, e), this.backend.incRef(t.dataId);
  }
  removeDataId(t, e) {
    this.state.tensorInfo.has(t) && this.state.tensorInfo.get(t).backend === e && (this.state.tensorInfo.delete(t), this.state.numDataBuffers--);
  }
  disposeTensor(t) {
    if (!this.state.tensorInfo.has(t.dataId))
      return;
    const e = this.state.tensorInfo.get(t.dataId);
    if (this.state.numTensors--, t.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= e.bytes), t.dtype !== "complex64" && t.dtype !== "string") {
      const s = t.size * Vi(t.dtype);
      this.state.numBytes -= s;
    }
    e.backend.disposeData(t.dataId) && this.removeDataId(t.dataId, e.backend);
  }
  disposeVariables() {
    for (const t in this.state.registeredVariables) {
      const e = this.state.registeredVariables[t];
      this.disposeVariable(e);
    }
  }
  disposeVariable(t) {
    this.disposeTensor(t), this.state.registeredVariables[t.name] != null && delete this.state.registeredVariables[t.name];
  }
  memory() {
    const t = this.backend.memory();
    return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = !0, t.reasons == null && (t.reasons = []), t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t;
  }
  async profile(t) {
    this.state.profiling = !0;
    const e = this.state.numBytes, s = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await t(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((o) => o.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - e, this.state.activeProfile.newTensors = this.state.numTensors - s;
    for (const o of this.state.activeProfile.kernels)
      o.kernelTimeMs = await o.kernelTimeMs, o.extraInfo = await o.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(t, e, s, o, r, i) {
    const a = { id: this.state.nextTapeNodeId++, kernelName: t, inputs: e, outputs: s, saved: r }, l = Vg(t);
    l != null && (o = l.gradFunc), o != null && (a.gradient = (c) => (c = c.map((u, d) => {
      if (u == null) {
        const h = s[d], p = Re(h.size, h.dtype);
        return this.makeTensor(p, h.shape, h.dtype);
      }
      return u;
    }), o(c.length > 1 ? c : c[0], r, i))), this.state.activeTape.push(a);
  }
  keep(t) {
    return t.kept = !0, t;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  /**
   * Start a scope. Use this with endScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  startScope(t) {
    const e = {
      track: [],
      name: "unnamed scope",
      id: this.state.nextScopeId++
    };
    t && (e.name = t), this.state.scopeStack.push(e), this.state.activeScope = e;
  }
  /**
   * End a scope. Use this with startScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  endScope(t) {
    const e = Ls(t), s = new Set(e.map((r) => r.id));
    for (let r = 0; r < this.state.activeScope.track.length; r++) {
      const i = this.state.activeScope.track[r];
      !i.kept && !s.has(i.id) && i.dispose();
    }
    const o = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], e.forEach((r) => {
      !r.kept && r.scopeId === o.id && this.track(r);
    });
  }
  /**
   * Returns gradients of `f` with respect to each of the `xs`. The gradients
   * returned are of the same length as `xs`, but some might be null if `f`
   * was not a function of that `x`. It also takes optional dy to multiply the
   * gradient, which defaults to `1`.
   */
  gradients(t, e, s, o = !1) {
    if (k(e.length > 0, () => "gradients() received an empty list of xs."), s != null && s.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);
    const r = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", t));
    k(r instanceof Mt, () => "The result y returned by f() must be a tensor.");
    const i = mk(this.state.activeTape, e, r);
    if (!o && i.length === 0 && e.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const a = {};
      a[r.id] = s ?? kk(r.shape), gk(
        a,
        i,
        // Pass the tidy function to avoid circular dep with `tape.ts`.
        (c) => this.tidy(c),
        // Pass an add function to avoide a circular dep with `tape.ts`.
        Sk
      );
      const l = e.map((c) => a[c.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((c) => {
        for (const u of c.saved)
          u.dispose();
      }), this.state.activeTape = null), { value: r, grads: l };
    });
  }
  customGrad(t) {
    return k(io(t), () => "The f passed in customGrad(f) must be a function."), (...e) => {
      k(e.every((a) => a instanceof Mt), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let s;
      const o = {};
      e.forEach((a, l) => {
        o[l] = a;
      });
      const r = (a, l) => (s = t(...e, l), k(s.value instanceof Mt, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), k(io(s.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), s.value), i = (a, l) => {
        const c = s.gradFunc(a, l), u = Array.isArray(c) ? c : [c];
        k(u.length === e.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), k(u.every((h) => h instanceof Mt), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const d = {};
        return u.forEach((h, p) => {
          d[p] = () => h;
        }), d;
      };
      return this.runKernelFunc({
        forwardFunc: r,
        backwardsFunc: i,
        inputs: o
      });
    };
  }
  readSync(t) {
    return this.state.tensorInfo.get(t).backend.readSync(t);
  }
  read(t) {
    return this.state.tensorInfo.get(t).backend.read(t);
  }
  readToGPU(t, e) {
    return this.state.tensorInfo.get(t).backend.readToGPU(t, e);
  }
  async time(t) {
    const e = Te(), s = await this.backend.time(t);
    return s.wallMs = Te() - e, s;
  }
  /**
   * Tracks a Tensor in the current scope to be automatically cleaned up
   * when the current scope ends, and returns the value.
   *
   * @param result The Tensor to track in the current scope.
   */
  track(t) {
    return this.state.activeScope != null && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  /**
   * Resets the engine state. Removes all backends but does not remove
   * registered backend factories.
   */
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Hg();
    for (const t in this.registry)
      this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
Wr.nextTensorId = 0;
Wr.nextVariableId = 0;
function kk(n) {
  const t = Hc(X(n), "float32");
  return E.makeTensor(t, n, "float32");
}
function Zx() {
  const n = wx();
  if (n._tfengine == null) {
    const t = new Uv(n);
    n._tfengine = new Wr(t);
  }
  return Jv(n._tfengine.ENV), yk(() => n._tfengine), n._tfengine;
}
const E = Zx();
function Sk(n, t) {
  const e = { a: n, b: t };
  return E.runKernel(Jr, e);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tk() {
  return typeof navigator < "u" && navigator != null;
}
let Oh;
function Nk(n) {
  Oh = n;
}
function Gf(n) {
  if (Oh !== void 0)
    return Oh;
  if (n || Tk()) {
    if (n || (n = navigator), n.product === "ReactNative")
      return !0;
    const t = n.userAgent || n.vendor || // tslint:disable-next-line:no-any
    (typeof window < "u" ? window.opera : "");
    if (!t) {
      const e = n;
      return e.userAgentData && e.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || // tslint:disable-next-line:max-line-length
    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4));
  }
  return !1;
}
function Lf() {
  return typeof window < "u" && window.document != null || //@ts-ignore
  typeof WorkerGlobalScope < "u";
}
const I8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isBrowser: Lf,
  isMobile: Gf,
  mockIsMobile: Nk
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const In = V();
In.registerFlag("DEBUG", () => !1, (n) => {
  n && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
In.registerFlag("IS_BROWSER", () => Lf());
In.registerFlag("IS_NODE", () => typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u");
In.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
In.registerFlag("PROD", () => !1);
In.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => In.getBool("DEBUG"));
In.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0);
In.registerFlag("IS_TEST", () => !1);
In.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => !0);
In.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1);
In.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1);
In.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rl(n, t) {
  let e = n;
  if (wn(n))
    return t === "string" ? [] : [n.length];
  if (typeof n == "object") {
    if ("texture" in n) {
      const r = n.channels || "RGBA";
      return [n.height, n.width * r.length];
    } else if ("buffer" in n && !(n.buffer instanceof ArrayBuffer))
      return [n.buffer.size / (t == null ? 4 : Vi(t))];
  }
  if (!Array.isArray(n))
    return [];
  const o = [];
  for (; Array.isArray(e) || wn(e) && t !== "string"; )
    o.push(e.length), e = e[0];
  return Array.isArray(n) && V().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && Kx(n, o, []), o;
}
function Kx(n, t, e) {
  if (e = e || [], !Array.isArray(n) && !wn(n)) {
    k(t.length === 0, () => `Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);
    return;
  }
  k(t.length > 0, () => `Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`), k(n.length === t[0], () => `Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);
  const s = t.slice(1);
  for (let o = 0; o < n.length; ++o)
    Kx(n[o], s, e.concat(o));
}
function Ug(n, t, e, s) {
  if (n !== "string_or_numeric") {
    if (n == null)
      throw new Error("Expected dtype cannot be null.");
    if (n !== "numeric" && n !== t || n === "numeric" && t === "string")
      throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`);
  }
}
function T(n, t, e, s = "numeric") {
  if (n instanceof Mt)
    return Ug(s, n.dtype, t, e), n;
  let o = jr(n);
  if (o !== "string" && ["bool", "int32", "float32"].indexOf(s) >= 0 && (o = s), Ug(s, o, t, e), n == null || !wn(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string") {
    const l = n == null ? "null" : n.constructor.name;
    throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`);
  }
  const r = rl(n, o);
  !wn(n) && !Array.isArray(n) && (n = [n]);
  const a = o !== "string" ? fo(n, o) : ao(n, [], !0);
  return E.makeTensor(a, r, o);
}
function Df(n, t, e, s = "numeric") {
  if (!Array.isArray(n))
    throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return n.map((r, i) => T(r, `${t}[${i}]`, e, s));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rk = "__op";
function D(n) {
  const t = Object.keys(n);
  if (t.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);
  let e = t[0];
  const s = n[e];
  e.endsWith("_") && (e = e.substring(0, e.length - 1)), e = e + Rk;
  const o = (...r) => {
    E.startScope(e);
    try {
      const i = s(...r);
      return la(i) && console.error("Cannot return a Promise inside of tidy."), E.endScope(i), i;
    } catch (i) {
      throw E.endScope(null), i;
    }
  };
  return Object.defineProperty(o, "name", { value: e, configurable: !0 }), o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $k(n, t) {
  const e = T(n, "real", "complex"), s = T(t, "imag", "complex");
  Xe(e.shape, s.shape, `real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`);
  const o = { real: e, imag: s };
  return E.runKernel(Xp, o);
}
const Po = /* @__PURE__ */ D({ complex_: $k });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function il(n, t, e, s) {
  if (s == null)
    s = jr(n);
  else if (s === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (typeof n == "object" && ("texture" in n || "buffer" in n && !(n.buffer instanceof ArrayBuffer))) {
    if (s !== "float32" && s !== "int32")
      throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);
    return E.backend.createTensorFromGPUData(n, t || e, s);
  }
  if (!wn(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (t != null) {
    Is(t);
    const o = X(t), r = X(e);
    k(o === r, () => `Based on the provided shape, [${t}], the tensor should have ${o} values but has ${r}`);
    for (let i = 0; i < e.length; ++i) {
      const a = e[i], l = i === e.length - 1 ? a !== X(t.slice(i)) : !0;
      k(e[i] === t[i] || !l, () => `Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `);
    }
  }
  return !wn(n) && !Array.isArray(n) && (n = [n]), t = t || e, n = s !== "string" ? fo(n, s) : ao(n, [], !0), E.makeTensor(n, t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function De(n, t, e) {
  const s = rl(n, e);
  return il(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Xh = {
  float32: 4,
  float16: 2,
  int32: 4,
  uint16: 2,
  uint8: 1,
  bool: 1,
  complex64: 8
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gc = 4;
async function Yg(n, t) {
  const e = [], s = [], o = Array.isArray(n) ? n.map((i) => i.name) : Object.keys(n);
  for (let i = 0; i < o.length; ++i) {
    const a = o[i], l = Array.isArray(n) ? n[i].tensor : n[a];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);
    const c = { name: a, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      const u = new Promise(async (d) => {
        const h = await l.bytes(), p = h.reduce((g, b) => g + b.length, 0) + gc * h.length, f = new Uint8Array(p);
        let m = 0;
        for (let g = 0; g < h.length; g++) {
          const b = h[g], x = new Uint8Array(new Uint32Array([b.length]).buffer);
          f.set(x, m), m += gc, f.set(b, m), m += b.length;
        }
        d(f);
      });
      s.push(u);
    } else
      s.push(l.data());
    t != null && (c.group = t), e.push(c);
  }
  const r = await Promise.all(s);
  return { data: Ek(r), specs: e };
}
function Bx(n, t) {
  const e = {};
  let s, o = 0;
  for (const r of t) {
    const i = r.name, a = r.dtype, l = r.shape, c = X(l);
    let u;
    if ("quantization" in r) {
      const d = r.quantization;
      if (d.dtype === "uint8" || d.dtype === "uint16") {
        if (!("min" in d && "scale" in d))
          throw new Error(`Weight ${r.name} with quantization ${d.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (d.dtype === "float16") {
        if (a !== "float32")
          throw new Error(`Weight ${r.name} is quantized with ${d.dtype} which only supports weights of type float32 not ${a}.`);
      } else
        throw new Error(`Weight ${r.name} has unknown quantization dtype ${d.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      const h = Xh[d.dtype], p = n.slice(o, o + c * h), f = d.dtype === "uint8" ? new Uint8Array(p) : new Uint16Array(p);
      if (a === "float32")
        if (d.dtype === "uint8" || d.dtype === "uint16") {
          u = new Float32Array(f.length);
          for (let m = 0; m < f.length; m++) {
            const g = f[m];
            u[m] = g * d.scale + d.min;
          }
        } else if (d.dtype === "float16")
          s === void 0 && (s = Ak()), u = s(f);
        else
          throw new Error(`Unsupported quantization type ${d.dtype} for weight type float32.`);
      else if (a === "int32") {
        if (d.dtype !== "uint8" && d.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${d.dtype} for weight type int32.`);
        u = new Int32Array(f.length);
        for (let m = 0; m < f.length; m++) {
          const g = f[m];
          u[m] = Math.round(g * d.scale + d.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      o += c * h;
    } else if (a === "string") {
      const d = X(r.shape);
      u = [];
      for (let h = 0; h < d; h++) {
        const p = new Uint32Array(n.slice(o, o + gc))[0];
        o += gc;
        const f = new Uint8Array(n.slice(o, o + p));
        u.push(f), o += p;
      }
    } else {
      const d = Xh[a], h = n.slice(o, o + c * d);
      if (a === "float32")
        u = new Float32Array(h);
      else if (a === "int32")
        u = new Int32Array(h);
      else if (a === "bool")
        u = new Uint8Array(h);
      else if (a === "complex64") {
        u = new Float32Array(h);
        const p = new Float32Array(u.length / 2), f = new Float32Array(u.length / 2);
        for (let b = 0; b < p.length; b++)
          p[b] = u[b * 2], f[b] = u[b * 2 + 1];
        const m = De(p, l, "float32"), g = De(f, l, "float32");
        e[i] = Po(m, g), m.dispose(), g.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      o += c * d;
    }
    a !== "complex64" && (e[i] = De(u, l, a));
  }
  return e;
}
function Ek(n) {
  if (n === null)
    throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
  let t = 0;
  const e = [];
  n.forEach((r) => {
    if (t += r.byteLength, e.push(r.byteLength === r.buffer.byteLength ? r : new r.constructor(r)), !(r instanceof Float32Array || r instanceof Int32Array || r instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${r.constructor.name}`);
  });
  const s = new Uint8Array(t);
  let o = 0;
  return e.forEach((r) => {
    s.set(new Uint8Array(r.buffer), o), o += r.byteLength;
  }), s.buffer;
}
const Mf = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function Qg(n) {
  return Mf ? Buffer.byteLength(n) : new Blob([n]).size;
}
function Gk(n) {
  if (Mf)
    return Buffer.from(n).toString("base64");
  const t = new Uint8Array(n);
  let e = "";
  for (let s = 0, o = t.length; s < o; s++)
    e += String.fromCharCode(t[s]);
  return btoa(e);
}
function Lk(n) {
  if (Mf) {
    const s = Buffer.from(n, "base64");
    return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
  }
  const t = atob(n), e = new Uint8Array(t.length);
  for (let s = 0; s < t.length; ++s)
    e.set([t.charCodeAt(s)], s);
  return e.buffer;
}
function Hx(n) {
  if (n.length === 1)
    return n[0];
  let t = 0;
  n.forEach((o) => {
    t += o.byteLength;
  });
  const e = new Uint8Array(t);
  let s = 0;
  return n.forEach((o) => {
    e.set(new Uint8Array(o), s), s += o.byteLength;
  }), e.buffer;
}
function C8(n) {
  const t = "/";
  for (n = n.trim(); n.endsWith(t); )
    n = n.slice(0, n.length - 1);
  const e = n.split(t);
  return e[e.length - 1];
}
function Dk(n, t) {
  const e = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy,
    weightsManifest: t
  };
  return n.signature != null && (e.signature = n.signature), n.userDefinedMetadata != null && (e.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (e.modelInitializer = n.modelInitializer), n.initializerSignature != null && (e.initializerSignature = n.initializerSignature), n.trainingConfig != null && (e.trainingConfig = n.trainingConfig), e;
}
function Mk(n, t, e) {
  const s = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy
  };
  if (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig), n.weightsManifest != null) {
    if (!t)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    s.weightSpecs = t, s.weightData = e;
  }
  return n.signature != null && (s.signature = n.signature), n.userDefinedMetadata != null && (s.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (s.modelInitializer = n.modelInitializer), n.initializerSignature != null && (s.initializerSignature = n.initializerSignature), s;
}
async function zk(n, t) {
  let e, s;
  return n.weightsManifest != null && ([e, s] = await t(n.weightsManifest)), Mk(n, e, s);
}
function zf(n) {
  if (n.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return {
    dateSaved: new Date(),
    modelTopologyType: "JSON",
    modelTopologyBytes: n.modelTopology == null ? 0 : Qg(JSON.stringify(n.modelTopology)),
    weightSpecsBytes: n.weightSpecs == null ? 0 : Qg(JSON.stringify(n.weightSpecs)),
    weightDataBytes: n.weightData == null ? 0 : n.weightData.byteLength
  };
}
function Fk(n) {
  const t = [];
  for (const e of n)
    t.push(...e.weights);
  return t;
}
function Wk() {
  const n = (e) => {
    let s = e << 13, o = 0;
    for (; !(s & 8388608); )
      o -= 8388608, s <<= 1;
    return s &= -8388609, o += 947912704, s | o;
  }, t = new Uint32Array(2048);
  t[0] = 0;
  for (let e = 1; e < 1024; e++)
    t[e] = n(e);
  for (let e = 1024; e < 2048; e++)
    t[e] = 939524096 + (e - 1024 << 13);
  return t;
}
function Vk() {
  const n = new Uint32Array(64);
  n[0] = 0, n[31] = 1199570944, n[32] = 2147483648, n[63] = 3347054592;
  for (let t = 1; t < 31; t++)
    n[t] = t << 23;
  for (let t = 33; t < 63; t++)
    n[t] = 2147483648 + (t - 32 << 23);
  return n;
}
function _k() {
  const n = new Uint32Array(64);
  for (let t = 0; t < 64; t++)
    n[t] = 1024;
  return n[0] = n[32] = 0, n;
}
function Ak() {
  const n = Wk(), t = Vk(), e = _k();
  return (s) => {
    const o = new ArrayBuffer(4 * s.length), r = new Uint32Array(o);
    for (let i = 0; i < s.length; i++) {
      const a = s[i], l = n[e[a >> 10] + (a & 1023)] + t[a >> 10];
      r[i] = l;
    }
    return new Float32Array(o);
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class oe {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return oe.instance == null && (oe.instance = new oe()), oe.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerSaveRouter(t) {
    oe.getInstance().saveRouters.push(t);
  }
  /**
   * Register a load-handler router.
   *
   * @param loadRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `load` method defined or `null`.
   */
  static registerLoadRouter(t) {
    oe.getInstance().loadRouters.push(t);
  }
  /**
   * Look up IOHandler for saving, given a URL-like string.
   *
   * @param url
   * @returns If only one match is found, an instance of IOHandler with the
   * `save` method defined. If no match is found, `null`.
   * @throws Error, if more than one match is found.
   */
  static getSaveHandlers(t) {
    return oe.getHandlers(t, "save");
  }
  /**
   * Look up IOHandler for loading, given a URL-like string.
   *
   * @param url
   * @param loadOptions Optional, custom load options.
   * @returns All valid handlers for `url`, given the currently registered
   *   handler routers.
   */
  static getLoadHandlers(t, e) {
    return oe.getHandlers(t, "load", e);
  }
  static getHandlers(t, e, s) {
    const o = [];
    return (e === "load" ? oe.getInstance().loadRouters : oe.getInstance().saveRouters).forEach((i) => {
      const a = i(t, s);
      a !== null && o.push(a);
    }), o;
  }
}
const v8 = (n) => oe.registerSaveRouter(n), k8 = (n) => oe.registerLoadRouter(n), Ok = (n) => oe.getSaveHandlers(n), Xk = (n, t) => oe.getLoadHandlers(n, t);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ph = "tensorflowjs", Zh = 1, Do = "models_store", Hs = "model_info_store";
function Ux() {
  if (!V().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const n = typeof window > "u" ? self : window, t = n.indexedDB || n.mozIndexedDB || n.webkitIndexedDB || n.msIndexedDB || n.shimIndexedDB;
  if (t == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return t;
}
function Kh(n) {
  const t = n.result;
  t.createObjectStore(Do, { keyPath: "modelPath" }), t.createObjectStore(Hs, { keyPath: "modelPath" });
}
class Zo {
  constructor(t) {
    if (this.indexedDB = Ux(), t == null || !t)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = t;
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, t);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  /**
   * Perform database action to put model artifacts into or read model artifacts
   * from IndexedDB object store.
   *
   * Whether the action is put or get depends on whether `modelArtifacts` is
   * specified. If it is specified, the action will be put; otherwise the action
   * will be get.
   *
   * @param modelPath A unique string path for the model.
   * @param modelArtifacts If specified, it will be the model artifacts to be
   *   stored in IndexedDB.
   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
   *   of `ModelArtifacts`, if the action is get.
   */
  databaseAction(t, e) {
    return new Promise((s, o) => {
      const r = this.indexedDB.open(Ph, Zh);
      r.onupgradeneeded = () => Kh(r), r.onsuccess = () => {
        const i = r.result;
        if (e == null) {
          const a = i.transaction(Do, "readonly"), c = a.objectStore(Do).get(this.modelPath);
          c.onsuccess = () => {
            if (c.result == null)
              return i.close(), o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            s(c.result.modelArtifacts);
          }, c.onerror = (u) => (i.close(), o(c.error)), a.oncomplete = () => i.close();
        } else {
          const a = zf(e), l = i.transaction(Hs, "readwrite");
          let c = l.objectStore(Hs);
          const u = c.put({ modelPath: this.modelPath, modelArtifactsInfo: a });
          let d;
          u.onsuccess = () => {
            d = i.transaction(Do, "readwrite");
            const p = d.objectStore(Do).put({
              modelPath: this.modelPath,
              modelArtifacts: e,
              modelArtifactsInfo: a
            });
            p.onsuccess = () => s({ modelArtifactsInfo: a }), p.onerror = (f) => {
              c = l.objectStore(Hs);
              const m = c.delete(this.modelPath);
              m.onsuccess = () => (i.close(), o(p.error)), m.onerror = (g) => (i.close(), o(p.error));
            };
          }, u.onerror = (h) => (i.close(), o(u.error)), l.oncomplete = () => {
            d == null ? i.close() : d.oncomplete = () => i.close();
          };
        }
      }, r.onerror = (i) => o(r.error);
    });
  }
}
Zo.URL_SCHEME = "indexeddb://";
const Yx = (n) => V().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(Zo.URL_SCHEME) ? Pk(n.slice(Zo.URL_SCHEME.length)) : null;
oe.registerSaveRouter(Yx);
oe.registerLoadRouter(Yx);
function Pk(n) {
  return new Zo(n);
}
function Zk(n) {
  return n.startsWith(Zo.URL_SCHEME) ? n.slice(Zo.URL_SCHEME.length) : n;
}
class Kk {
  constructor() {
    this.indexedDB = Ux();
  }
  async listModels() {
    return new Promise((t, e) => {
      const s = this.indexedDB.open(Ph, Zh);
      s.onupgradeneeded = () => Kh(s), s.onsuccess = () => {
        const o = s.result, r = o.transaction(Hs, "readonly"), a = r.objectStore(Hs).getAll();
        a.onsuccess = () => {
          const l = {};
          for (const c of a.result)
            l[c.modelPath] = c.modelArtifactsInfo;
          t(l);
        }, a.onerror = (l) => (o.close(), e(a.error)), r.oncomplete = () => o.close();
      }, s.onerror = (o) => e(s.error);
    });
  }
  async removeModel(t) {
    return t = Zk(t), new Promise((e, s) => {
      const o = this.indexedDB.open(Ph, Zh);
      o.onupgradeneeded = () => Kh(o), o.onsuccess = () => {
        const r = o.result, i = r.transaction(Hs, "readwrite"), a = i.objectStore(Hs), l = a.get(t);
        let c;
        l.onsuccess = () => {
          if (l.result == null)
            return r.close(), s(new Error(`Cannot find model with path '${t}' in IndexedDB.`));
          {
            const u = a.delete(t), d = () => {
              c = r.transaction(Do, "readwrite");
              const p = c.objectStore(Do).delete(t);
              p.onsuccess = () => e(l.result.modelArtifactsInfo), p.onerror = (f) => s(l.error);
            };
            u.onsuccess = d, u.onerror = (h) => (d(), r.close(), s(l.error));
          }
        }, l.onerror = (u) => (r.close(), s(l.error)), i.oncomplete = () => {
          c == null ? r.close() : c.oncomplete = () => r.close();
        };
      }, o.onerror = (r) => s(o.error);
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $s = "/", Sr = "tensorflowjs_models", Qx = "info", Bk = "model_topology", Hk = "weight_specs", Uk = "weight_data", Yk = "model_metadata";
function jx(n) {
  return {
    info: [Sr, n, Qx].join($s),
    topology: [Sr, n, Bk].join($s),
    weightSpecs: [Sr, n, Hk].join($s),
    weightData: [Sr, n, Uk].join($s),
    modelMetadata: [Sr, n, Yk].join($s)
  };
}
function Jx(n) {
  for (const t of Object.values(n))
    window.localStorage.removeItem(t);
}
function Qk(n) {
  const t = n.split($s);
  if (t.length < 3)
    throw new Error(`Invalid key format: ${n}`);
  return t.slice(1, t.length - 1).join($s);
}
function jk(n) {
  return n.startsWith(Ko.URL_SCHEME) ? n.slice(Ko.URL_SCHEME.length) : n;
}
class Ko {
  constructor(t) {
    if (!V().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, t == null || !t)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = t, this.keys = jx(this.modelPath);
  }
  /**
   * Save model artifacts to browser local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @param modelArtifacts The model artifacts to be stored.
   * @returns An instance of SaveResult.
   */
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const e = JSON.stringify(t.modelTopology), s = JSON.stringify(t.weightSpecs), o = zf(t);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(o)), this.LS.setItem(this.keys.topology, e), this.LS.setItem(this.keys.weightSpecs, s), this.LS.setItem(this.keys.weightData, Gk(t.weightData));
        const r = {
          format: t.format,
          generatedBy: t.generatedBy,
          convertedBy: t.convertedBy,
          signature: t.signature != null ? t.signature : void 0,
          userDefinedMetadata: t.userDefinedMetadata != null ? t.userDefinedMetadata : void 0,
          modelInitializer: t.modelInitializer != null ? t.modelInitializer : void 0,
          initializerSignature: t.initializerSignature != null ? t.initializerSignature : void 0,
          trainingConfig: t.trainingConfig != null ? t.trainingConfig : void 0
        };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(r)), { modelArtifactsInfo: o };
      } catch {
        throw Jx(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${o.modelTopologyBytes}, weightSpecsBytes=${o.weightSpecsBytes}, weightDataBytes=${o.weightDataBytes}.`);
      }
    }
  }
  /**
   * Load a model from local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @returns The loaded model (if loading succeeds).
   */
  async load() {
    const t = JSON.parse(this.LS.getItem(this.keys.info));
    if (t == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (t.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const e = {}, s = JSON.parse(this.LS.getItem(this.keys.topology));
    if (s == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    e.modelTopology = s;
    const o = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (o == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    e.weightSpecs = o;
    const r = this.LS.getItem(this.keys.modelMetadata);
    if (r != null) {
      const a = JSON.parse(r);
      e.format = a.format, e.generatedBy = a.generatedBy, e.convertedBy = a.convertedBy, a.signature != null && (e.signature = a.signature), a.userDefinedMetadata != null && (e.userDefinedMetadata = a.userDefinedMetadata), a.modelInitializer != null && (e.modelInitializer = a.modelInitializer), a.initializerSignature != null && (e.initializerSignature = a.initializerSignature), a.trainingConfig != null && (e.trainingConfig = a.trainingConfig);
    }
    const i = this.LS.getItem(this.keys.weightData);
    if (i == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return e.weightData = Lk(i), e;
  }
}
Ko.URL_SCHEME = "localstorage://";
const qx = (n) => V().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(Ko.URL_SCHEME) ? Jk(n.slice(Ko.URL_SCHEME.length)) : null;
oe.registerSaveRouter(qx);
oe.registerLoadRouter(qx);
function Jk(n) {
  return new Ko(n);
}
class qk {
  constructor() {
    k(V().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), k(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const t = {}, e = Sr + $s, s = $s + Qx;
    for (let o = 0; o < this.LS.length; ++o) {
      const r = this.LS.key(o);
      if (r.startsWith(e) && r.endsWith(s)) {
        const i = Qk(r);
        t[i] = JSON.parse(this.LS.getItem(r));
      }
    }
    return t;
  }
  async removeModel(t) {
    t = jk(t);
    const e = jx(t);
    if (this.LS.getItem(e.info) == null)
      throw new Error(`Cannot find model at path '${t}'`);
    const s = JSON.parse(this.LS.getItem(e.info));
    return Jx(e), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $r = "://";
class We {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return We.instance == null && (We.instance = new We()), We.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerManager(t, e) {
    k(t != null, () => "scheme must not be undefined or null."), t.endsWith($r) && (t = t.slice(0, t.indexOf($r))), k(t.length > 0, () => "scheme must not be an empty string.");
    const s = We.getInstance();
    k(s.managers[t] == null, () => `A model store manager is already registered for scheme '${t}'.`), s.managers[t] = e;
  }
  static getManager(t) {
    const e = We.getInstance().managers[t];
    if (e == null)
      throw new Error(`Cannot find model manager for scheme '${t}'`);
    return e;
  }
  static getSchemes() {
    return Object.keys(We.getInstance().managers);
  }
}
function rc(n) {
  if (n.indexOf($r) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${We.getSchemes().join(",")}`);
  return {
    scheme: n.split($r)[0],
    path: n.split($r)[1]
  };
}
async function t1(n, t, e = !1) {
  k(n !== t, () => `Old path and new path are the same: '${n}'`);
  const s = oe.getLoadHandlers(n);
  k(s.length > 0, () => `Copying failed because no load handler is found for source URL ${n}.`), k(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);
  const o = s[0], r = oe.getSaveHandlers(t);
  k(r.length > 0, () => `Copying failed because no save handler is found for destination URL ${t}.`), k(r.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);
  const i = r[0], a = rc(n).scheme, l = rc(n).path, c = a === rc(n).scheme, u = await o.load();
  e && c && await We.getManager(a).removeModel(l);
  const d = await i.save(u);
  return e && !c && await We.getManager(a).removeModel(l), d.modelArtifactsInfo;
}
async function S8() {
  const n = We.getSchemes(), t = {};
  for (const e of n) {
    const s = await We.getManager(e).listModels();
    for (const o in s) {
      const r = e + $r + o;
      t[r] = s[o];
    }
  }
  return t;
}
async function T8(n) {
  const t = rc(n);
  return We.getManager(t.scheme).removeModel(t.path);
}
async function N8(n, t) {
  return t1(n, t, !1);
}
async function R8(n, t) {
  return t1(n, t, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tS {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1;
  }
  fetch(t, e) {
    return fetch(t, e);
  }
  now() {
    return performance.now();
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t);
  }
  decode(t, e) {
    return new TextDecoder(e).decode(t);
  }
  // If the setTimeout nesting level is greater than 5 and timeout is less
  // than 4ms, timeout will be clamped to 4ms, which hurts the perf.
  // Interleaving window.postMessage and setTimeout will trick the browser and
  // avoid the clamp.
  setTimeoutCustom(t, e) {
    if (typeof window > "u" || !V().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(t, e);
      return;
    }
    this.functionRefs.push(t), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, e), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", (s) => {
      if (s.source === window && s.data.name === this.messageName) {
        s.stopPropagation();
        const o = this.functionRefs[s.data.index];
        o(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, !0));
  }
  isTypedArray(t) {
    return t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array || t instanceof Uint8ClampedArray;
  }
}
if (V().get("IS_BROWSER")) {
  V().setPlatform("browser", new tS());
  try {
    We.registerManager(Ko.URL_SCHEME, new qk());
  } catch {
  }
  try {
    We.registerManager(Zo.URL_SCHEME, new Kk());
  } catch {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eS = {
  // tslint:disable-next-line:no-require-imports
  importFetch: () => require("node-fetch")
};
let Fd;
class nS {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(t, e) {
    return V().global.fetch != null ? V().global.fetch(t, e) : (Fd == null && (Fd = eS.importFetch()), Fd(t, e));
  }
  now() {
    const t = process.hrtime();
    return t[0] * 1e3 + t[1] / 1e6;
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);
    return this.textEncoder.encode(t);
  }
  decode(t, e) {
    return t.length === 0 ? "" : new this.util.TextDecoder(e).decode(t);
  }
  isTypedArray(t) {
    return this.util.types.isFloat32Array(t) || this.util.types.isInt32Array(t) || this.util.types.isUint8Array(t) || this.util.types.isUint8ClampedArray(t);
  }
}
V().get("IS_NODE") && !V().get("IS_BROWSER") && V().setPlatform("node", new nS());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vt(n, t = "float32", e) {
  return t = t || "float32", Is(n), new Me(n, t, e);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sS(n, t) {
  const e = T(n, "x", "cast");
  if (!fx(t))
    throw new Error(`Failed to cast to unknown dtype ${t}`);
  if (t === "string" && e.dtype !== "string" || t !== "string" && e.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  const s = { x: e }, o = { dtype: t };
  return E.runKernel(ga, s, o);
}
const et = /* @__PURE__ */ D({ cast_: sS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oS(n) {
  const e = { x: T(n, "x", "clone", "string_or_numeric") };
  return E.runKernel($a, e);
}
const _o = /* @__PURE__ */ D({ clone_: oS });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rS(n, t = !1) {
  console.log(n.toString(t));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Zx();
const iS = {
  buffer: vt,
  cast: et,
  clone: _o,
  print: rS
};
wk(iS);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $8() {
  V().set("PROD", !0);
}
function E8() {
  V().set("DEBUG", !0);
}
function G8() {
  V().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function L8(n) {
  V().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(n + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function D8() {
  E.disposeVariables();
}
function Ot() {
  return E;
}
function bc() {
  return E.memory();
}
function M8(n) {
  return E.profile(n);
}
function z(n, t) {
  return E.tidy(n, t);
}
function yt(n) {
  Ls(n).forEach((e) => e.dispose());
}
function xn(n) {
  return E.keep(n);
}
function z8(n) {
  return E.time(n);
}
function F8(n) {
  return E.setBackend(n);
}
function W8() {
  return E.ready();
}
function V8() {
  return E.backendName;
}
function _8(n) {
  E.removeBackend(n);
}
function A8(n) {
  return E.findBackend(n);
}
function O8(n) {
  return E.findBackendFactory(n);
}
function e1(n, t, e = 1) {
  return E.registerBackend(n, t, e);
}
function Us() {
  return E.backend;
}
function X8(n, t) {
  V().setPlatform(n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aS(n, t) {
  let e = T(n, "a", "add"), s = T(t, "b", "add");
  [e, s] = re(e, s);
  const o = { a: e, b: s };
  return E.runKernel(Jr, o);
}
const U = /* @__PURE__ */ D({ add_: aS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lS(n, t) {
  let e = T(n, "a", "floorDiv"), s = T(t, "b", "floorDiv");
  [e, s] = re(e, s);
  const o = { a: e, b: s };
  return E.runKernel(Na, o);
}
const n1 = /* @__PURE__ */ D({ floorDiv_: lS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cS(n, t) {
  let e = T(n, "a", "div"), s = T(t, "b", "div");
  if ([e, s] = re(e, s), e.dtype === "int32" && s.dtype === "int32")
    return n1(e, s);
  const o = { a: e, b: s }, r = {};
  return E.runKernel(Ia, o, r);
}
const ut = /* @__PURE__ */ D({ div_: cS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uS(n, t) {
  let e = T(n, "a", "mul"), s = T(t, "b", "mul");
  [e, s] = re(e, s);
  const o = { a: e, b: s };
  return E.runKernel(Va, o);
}
const G = /* @__PURE__ */ D({ mul_: uS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dS(n) {
  const t = T(n, "x", "abs");
  if (t.dtype === "complex64") {
    const e = { x: t };
    return E.runKernel(eu, e);
  } else {
    const e = { x: t };
    return E.runKernel(Uc, e);
  }
}
const be = /* @__PURE__ */ D({ abs_: dS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hS(n) {
  const e = { x: T(n, "x", "acos") };
  return E.runKernel(ca, e);
}
const pS = /* @__PURE__ */ D({ acos_: hS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fS(n) {
  const e = { x: T(n, "x", "acosh") };
  return E.runKernel(ua, e);
}
const mS = /* @__PURE__ */ D({ acosh_: fS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gS(n, t = null, e = !1) {
  const o = { x: T(n, "x", "all", "bool") }, r = { axis: t, keepDims: e };
  return E.runKernel(Wp, o, r);
}
const s1 = /* @__PURE__ */ D({ all_: gS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bS(n, t = null, e = !1) {
  const o = { x: T(n, "x", "any", "bool") }, r = { axis: t, keepDims: e };
  return E.runKernel(Vp, o, r);
}
const Bh = /* @__PURE__ */ D({ any_: bS });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xS(n, t = 0) {
  const s = { x: T(n, "x", "argMax") }, o = { axis: t };
  return E.runKernel(Yc, s, o);
}
const Ai = /* @__PURE__ */ D({ argMax_: xS });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yS(n, t = 0) {
  const s = { x: T(n, "x", "argMin") }, o = { axis: t };
  return E.runKernel(Qc, s, o);
}
const wS = /* @__PURE__ */ D({ argMin_: yS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IS(n) {
  const e = { x: T(n, "x", "asin") };
  return E.runKernel(da, e);
}
const CS = /* @__PURE__ */ D({ asin_: IS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vS(n) {
  const e = { x: T(n, "x", "asinh") };
  return E.runKernel(ha, e);
}
const kS = /* @__PURE__ */ D({ asinh_: vS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SS(n) {
  const e = { x: T(n, "x", "atan") };
  return E.runKernel(pa, e);
}
const TS = /* @__PURE__ */ D({ atan_: SS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NS(n, t) {
  let e = T(n, "a", "atan2"), s = T(t, "b", "atan2");
  [e, s] = re(e, s);
  const o = { a: e, b: s };
  return E.runKernel(ma, o);
}
const RS = /* @__PURE__ */ D({ atan2_: NS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $S(n) {
  const e = { x: T(n, "x", "atanh") };
  return E.runKernel(fa, e);
}
const ES = /* @__PURE__ */ D({ atanh_: $S });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function al(n, t, e, s, o = "NHWC", r) {
  const i = n[3], a = [...t, i], l = Ws(o);
  return $e(n, a, e, r, s, null, null, l);
}
function An(n, t, e, s, o, r, i = "channelsLast") {
  const [a, l] = Oi(t);
  let c;
  if (i === "channelsLast")
    c = [a, l, n[3], n[3]];
  else if (i === "channelsFirst")
    c = [a, l, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return $e(n, c, e, s, o, r, !1, i);
}
function Fs(n, t, e, s, o, r, i = "NDHWC") {
  const [a, l, c] = Hh(t);
  let u, d;
  if (i === "NDHWC")
    d = "channelsLast", u = [a, l, c, n[4], n[4]];
  else if (i === "NCDHW")
    d = "channelsFirst", u = [a, l, c, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return mo(n, u, e, s, o, !1, d, r);
}
function $e(n, t, e, s, o, r, i = !1, a = "channelsLast") {
  let [l, c, u, d] = [-1, -1, -1, -1];
  if (a === "channelsLast")
    [l, c, u, d] = n;
  else if (a === "channelsFirst")
    [l, d, c, u] = n;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  const [h, p, , f] = t, [m, g] = Oi(e), [b, x] = Oi(s), w = Er(h, b), y = Er(p, x), { padInfo: I, outHeight: C, outWidth: v } = DS(o, c, u, m, g, w, y, r, a), S = i ? f * d : f;
  let N;
  return a === "channelsFirst" ? N = [l, S, C, v] : a === "channelsLast" && (N = [l, C, v, S]), {
    batchSize: l,
    dataFormat: a,
    inHeight: c,
    inWidth: u,
    inChannels: d,
    outHeight: C,
    outWidth: v,
    outChannels: S,
    padInfo: I,
    strideHeight: m,
    strideWidth: g,
    filterHeight: h,
    filterWidth: p,
    effectiveFilterHeight: w,
    effectiveFilterWidth: y,
    dilationHeight: b,
    dilationWidth: x,
    inShape: n,
    outShape: N,
    filterShape: t
  };
}
function mo(n, t, e, s, o, r = !1, i = "channelsLast", a) {
  let [l, c, u, d, h] = [-1, -1, -1, -1, -1];
  if (i === "channelsLast")
    [l, c, u, d, h] = n;
  else if (i === "channelsFirst")
    [l, h, c, u, d] = n;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  const [p, f, m, , g] = t, [b, x, w] = Hh(e), [y, I, C] = Hh(s), v = Er(p, y), S = Er(f, I), N = Er(m, C), { padInfo: R, outDepth: $, outHeight: F, outWidth: W } = MS(o, c, u, d, b, x, w, v, S, N, a), _ = r ? g * h : g;
  let A;
  return i === "channelsFirst" ? A = [l, _, $, F, W] : i === "channelsLast" && (A = [l, $, F, W, _]), {
    batchSize: l,
    dataFormat: i,
    inDepth: c,
    inHeight: u,
    inWidth: d,
    inChannels: h,
    outDepth: $,
    outHeight: F,
    outWidth: W,
    outChannels: _,
    padInfo: R,
    strideDepth: b,
    strideHeight: x,
    strideWidth: w,
    filterDepth: p,
    filterHeight: f,
    filterWidth: m,
    effectiveFilterDepth: v,
    effectiveFilterHeight: S,
    effectiveFilterWidth: N,
    dilationDepth: y,
    dilationHeight: I,
    dilationWidth: C,
    inShape: n,
    outShape: A,
    filterShape: t
  };
}
function GS(n, t, e, s, o) {
  s == null && (s = Ff(n, t, e));
  const r = n[0], i = n[1], a = Xi((r - t + 2 * s) / e + 1, o), l = Xi((i - t + 2 * s) / e + 1, o);
  return [a, l];
}
function LS(n, t, e, s, o, r) {
  o == null && (o = Ff(n, t[0], s[0]));
  const i = [0, 0, 0, e];
  for (let a = 0; a < 3; a++)
    n[a] + 2 * o >= t[a] && (i[a] = Xi((n[a] - t[a] + 2 * o) / s[a] + 1, r));
  return i;
}
function Ff(n, t, e, s = 1) {
  const o = Er(t, s);
  return Math.floor((n[0] * (e - 1) - e + o) / 2);
}
function Oi(n) {
  return typeof n == "number" ? [n, n, n] : n.length === 2 ? [n[0], n[1], 1] : n;
}
function Hh(n) {
  return typeof n == "number" ? [n, n, n] : n;
}
function Er(n, t) {
  return t <= 1 ? n : n + (n - 1) * (t - 1);
}
function DS(n, t, e, s, o, r, i, a, l) {
  let c, u, d;
  if (typeof n == "number") {
    c = { top: n, bottom: n, left: n, right: n, type: n === 0 ? "VALID" : "NUMBER" };
    const p = GS([t, e], r, s, n, a);
    u = p[0], d = p[1];
  } else if (n === "same") {
    u = Math.ceil(t / s), d = Math.ceil(e / o);
    const h = Math.max(0, (u - 1) * s + r - t), p = Math.max(0, (d - 1) * o + i - e), f = Math.floor(h / 2), m = h - f, g = Math.floor(p / 2), b = p - g;
    c = { top: f, bottom: m, left: g, right: b, type: "SAME" };
  } else if (n === "valid")
    c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, u = Math.ceil((t - r + 1) / s), d = Math.ceil((e - i + 1) / o);
  else if (typeof n == "object") {
    const h = l === "channelsLast" ? n[1][0] : n[2][0], p = l === "channelsLast" ? n[1][1] : n[2][1], f = l === "channelsLast" ? n[2][0] : n[3][0], m = l === "channelsLast" ? n[2][1] : n[3][1];
    c = { top: h, bottom: p, left: f, right: m, type: h === 0 && p === 0 && f === 0 && m === 0 ? "VALID" : "EXPLICIT" }, u = Xi((t - r + h + p) / s + 1, a), d = Xi((e - i + f + m) / o + 1, a);
  } else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: c, outHeight: u, outWidth: d };
}
function MS(n, t, e, s, o, r, i, a, l, c, u) {
  let d, h, p, f;
  if (n === "valid" && (n = 0), typeof n == "number") {
    d = {
      top: n,
      bottom: n,
      left: n,
      right: n,
      front: n,
      back: n,
      type: n === 0 ? "VALID" : "NUMBER"
    };
    const g = LS([t, e, s, 1], [a, l, c], 1, [o, r, i], n, u);
    h = g[0], p = g[1], f = g[2];
  } else if (n === "same") {
    h = Math.ceil(t / o), p = Math.ceil(e / r), f = Math.ceil(s / i);
    const m = (h - 1) * o + a - t, g = (p - 1) * r + l - e, b = (f - 1) * i + c - s, x = Math.floor(m / 2), w = m - x, y = Math.floor(g / 2), I = g - y, C = Math.floor(b / 2), v = b - C;
    d = { top: y, bottom: I, left: C, right: v, front: x, back: w, type: "SAME" };
  } else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: d, outDepth: h, outHeight: p, outWidth: f };
}
function Xi(n, t) {
  if (!t)
    return Math.trunc(n);
  switch (t) {
    case "round":
      return Math.round(n);
    case "ceil":
      return Math.ceil(n);
    case "floor":
      return Math.floor(n);
    default:
      throw new Error(`Unknown roundingMode ${t}`);
  }
}
function Bo(n) {
  const [t, e, s] = Oi(n);
  return t === 1 && e === 1 && s === 1;
}
function Fe(n, t) {
  return Bo(n) || Bo(t);
}
function Ho(n) {
  return Oi(n).every((t) => t > 0);
}
function Ws(n) {
  if (n === "NHWC")
    return "channelsLast";
  if (n === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${n}`);
}
function je(n, t, e) {
  if (e != null) {
    if (typeof t == "string")
      throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    if (typeof t == "number")
      k(Xo(t), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    else if (typeof t == "object")
      t.forEach((s) => {
        s.forEach((o) => {
          k(Xo(o), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${o}.`);
        });
      });
    else
      throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zS(n, t) {
  const s = { x: T(n, "x", "reshape", "string_or_numeric") }, o = { shape: t };
  return E.runKernel(zu, s, o);
}
const M = /* @__PURE__ */ D({ reshape_: zS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FS(n, t, e, s, o) {
  const r = T(n, "x", "avgPool", "float32"), i = 1;
  k(Fe(e, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);
  let a = r, l = !1;
  r.rank === 3 && (l = !0, a = M(r, [1, r.shape[0], r.shape[1], r.shape[2]])), k(a.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${a.rank}.`), je("avgPool", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o };
  let d = E.runKernel(jc, c, u);
  return d = et(d, r.dtype), l ? M(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const Wf = /* @__PURE__ */ D({ avgPool_: FS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WS(n, t, e, s, o, r = "NDHWC") {
  const i = T(n, "x", "avgPool3d", "float32");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = M(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), k(a.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`), k(r === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`), k(typeof e == "number" && e > 0 || Array.isArray(e) && e[0] > 0 && e[1] > 0 && e[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${e}'`), je("avgPool3d", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o, dataFormat: r };
  let d = E.runKernel(Jc, c, u);
  return d = et(d, a.dtype), l ? M(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const VS = /* @__PURE__ */ D({ avgPool3d_: WS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _S(n, t = 0) {
  k(n.length >= 1, () => "Pass at least one tensor to concat");
  const e = Df(n, "tensors", "concat", "string_or_numeric");
  if (e[0].dtype === "complex64" && e.forEach((r) => {
    if (r.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${r.dtype}. `);
  }), e.length === 1)
    return _o(e[0]);
  const s = e, o = { axis: t };
  return E.runKernel(nu, s, o);
}
const ze = /* @__PURE__ */ D({ concat_: _S });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AS(n, t, e = !1, s = !1) {
  let o = T(n, "a", "matMul"), r = T(t, "b", "matMul");
  [o, r] = re(o, r);
  const i = { a: o, b: r }, a = { transposeA: e, transposeB: s };
  return E.runKernel(qc, i, a);
}
const Gt = /* @__PURE__ */ D({ matMul_: AS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OS(n) {
  const e = { x: T(n, "x", "sigmoid", "float32") };
  return E.runKernel(Ya, e);
}
const qr = /* @__PURE__ */ D({ sigmoid_: OS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XS(n, t, e) {
  const s = T(n, "x", "slice", "string_or_numeric");
  if (s.rank === 0)
    throw new Error("Slicing scalar is not possible");
  const o = { x: s }, r = { begin: t, size: e };
  return E.runKernel(Au, o, r);
}
const Wt = /* @__PURE__ */ D({ slice_: XS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PS(n) {
  const e = { x: T(n, "x", "tanh", "float32") };
  return E.runKernel(el, e);
}
const Vf = /* @__PURE__ */ D({ tanh_: PS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZS(n, t, e) {
  const s = T(n, "x", "batchToSpaceND"), o = t.reduce((a, l) => a * l);
  k(s.rank >= 1 + t.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${t.length}`), k(e.length === t.length, () => `crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`), k(s.shape[0] % o === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${o}`);
  const r = { x: s }, i = { blockShape: t, crops: e };
  return E.runKernel(tu, r, i);
}
const _f = /* @__PURE__ */ D({ batchToSpaceND_: ZS });
function KS(n) {
  let t;
  return n.rank === 0 || n.rank === 1 ? t = M(n, [1, 1, 1, n.size]) : n.rank === 2 ? t = M(n, [1, 1, n.shape[0], n.shape[1]]) : n.rank === 3 ? t = M(n, [1, n.shape[0], n.shape[1], n.shape[2]]) : t = n, t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BS(n, t, e, s, o, r) {
  r == null && (r = 1e-3);
  const i = T(n, "x", "batchNorm"), a = T(t, "mean", "batchNorm"), l = T(e, "variance", "batchNorm");
  let c;
  o != null && (c = T(o, "scale", "batchNorm"));
  let u;
  s != null && (u = T(s, "offset", "batchNorm")), k(a.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), k(u == null || a.rank === u.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), k(c == null || a.rank === c.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const h = {
    x: KS(i),
    scale: c,
    offset: u,
    mean: a,
    variance: l
  }, p = { varianceEpsilon: r }, f = E.runKernel(du, h, p);
  return M(f, i.shape);
}
const Yu = /* @__PURE__ */ D({ batchNorm_: BS });
function HS(n, t, e, s, o, r) {
  const i = T(n, "x", "batchNorm"), a = T(t, "mean", "batchNorm"), l = T(e, "variance", "batchNorm");
  let c;
  o != null && (c = T(o, "scale", "batchNorm"));
  let u;
  return s != null && (u = T(s, "offset", "batchNorm")), k(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), k(a.rank === 2 || a.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`), k(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), c != null && k(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`), u != null && k(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`), Yu(i, a, l, u, c, r);
}
const US = /* @__PURE__ */ D({ batchNorm2d_: HS });
function YS(n, t, e, s, o, r) {
  const i = T(n, "x", "batchNorm"), a = T(t, "mean", "batchNorm"), l = T(e, "variance", "batchNorm");
  let c;
  o != null && (c = T(o, "scale", "batchNorm"));
  let u;
  return s != null && (u = T(s, "offset", "batchNorm")), k(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), k(a.rank === 3 || a.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`), k(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), c != null && k(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`), u != null && k(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`), Yu(i, a, l, u, c, r);
}
const QS = /* @__PURE__ */ D({ batchNorm3d_: YS });
function jS(n, t, e, s, o, r) {
  const i = T(n, "x", "batchNorm"), a = T(t, "mean", "batchNorm"), l = T(e, "variance", "batchNorm");
  let c;
  o != null && (c = T(o, "scale", "batchNorm"));
  let u;
  return s != null && (u = T(s, "offset", "batchNorm")), k(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), k(a.rank === 4 || a.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`), k(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), c != null && k(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`), u != null && k(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`), Yu(i, a, l, u, c, r);
}
const JS = /* @__PURE__ */ D({ batchNorm4d_: jS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qS(n, t, e) {
  const s = T(n, "x", "bincount"), o = T(t, "weights", "bincount");
  k(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), k(e >= 0, () => `size must be non-negative, but got ${e}.`), k(o.size === s.size || o.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${o.shape}.`);
  const r = { x: s, weights: o }, i = { size: e };
  return E.runKernel(Op, r, i);
}
const tT = /* @__PURE__ */ D({ bincount_: qS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eT(n, t) {
  let e = T(n, "broadcastTo", "x");
  const s = e.shape;
  if (Is(t), t.length < e.rank)
    throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);
  if (t.length > e.rank) {
    const c = e.shape.slice();
    for (; c.length < t.length; )
      c.unshift(1);
    e = M(e, c);
  }
  const o = e.shape, r = Array.from(t);
  for (let c = t.length - 1; c >= 0; c--)
    if (o[c] === t[c])
      r[c] = 1;
    else if (e.shape[c] !== 1)
      throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);
  if (r.map((c, u) => c > 1 ? u : -1).filter((c) => c >= 0).length === 0)
    return _o(e);
  const a = { x: e }, l = { reps: r };
  return E.runKernel(nl, a, l);
}
const Li = /* @__PURE__ */ D({ broadcastTo_: eT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nT(n) {
  const e = { x: T(n, "x", "ceil", "float32") };
  return E.runKernel(ba, e);
}
const sT = /* @__PURE__ */ D({ ceil_: nT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ll(n, t, e) {
  Is(n);
  const s = { shape: n, value: t, dtype: e };
  return E.runKernel(tf, {}, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oT(n, t, e) {
  const s = T(n, "x", "clipByValue");
  if (k(t <= e, () => `Error in clip: min (${t}) must be less than or equal to max (${e}).`), t === e)
    return ll(s.shape, t, s.dtype);
  const o = { x: s }, r = { clipValueMin: t, clipValueMax: e };
  return E.runKernel(xa, o, r);
}
const Cn = /* @__PURE__ */ D({ clipByValue_: oT });
function rT(n) {
  return ze(
    n,
    0
    /* axis */
  );
}
const iT = /* @__PURE__ */ D({ concat1d_: rT });
function aT(n, t) {
  return ze(n, t);
}
const lT = /* @__PURE__ */ D({ concat2d_: aT });
function cT(n, t) {
  return ze(n, t);
}
const uT = /* @__PURE__ */ D({ concat3d_: cT });
function dT(n, t) {
  return ze(n, t);
}
const hT = /* @__PURE__ */ D({ concat4d_: dT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pT(n, t, e, s, o = "NHWC", r = [1, 1], i) {
  const a = T(n, "x", "conv2d", "float32"), l = T(t, "filter", "conv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = M(a, [1, a.shape[0], a.shape[1], a.shape[2]])), k(c.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`), k(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), je("conv2d", s, i);
  const d = o === "NHWC" ? c.shape[3] : c.shape[1];
  k(d === l.shape[2], () => `Error in conv2d: depth of input (${d}) must match input depth for filter ${l.shape[2]}.`), k(Fe(e, r), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`), k(Ho(r), () => "Error in conv2D: Dilated rates should be larger than 0."), k(Ho(e), () => "Error in conv2D: Strides should be larger than 0.");
  const h = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: o, dilations: r, dimRoundingMode: i }, f = E.runKernel(su, h, p);
  return u ? M(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Uo = /* @__PURE__ */ D({ conv2d_: pT });
function fT(n, t, e, s, o = "NWC", r = 1, i) {
  const a = T(n, "x", "conv1d"), l = T(t, "filter", "conv1d");
  let c = a, u = !1;
  a.rank === 2 && (u = !0, c = M(a, [1, a.shape[0], a.shape[1]])), k(c.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`), k(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), je("conv1d", s, i), k(c.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`), k(Fe(e, r), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${r}'`), k(Ho(r), () => "Error in conv1D: Dilated rates should be larger than 0."), k(Ho(e), () => "Error in conv1D: Stride should be larger than 0."), k(o === "NWC", () => `Error in conv1d: got dataFormat of ${o} but only NWC is currently supported.`);
  const d = M(l, [1, l.shape[0], l.shape[1], l.shape[2]]), h = M(c, [c.shape[0], 1, c.shape[1], c.shape[2]]), g = Uo(h, d, [1, e], s, "NHWC", [1, r], i);
  return u ? M(g, [g.shape[2], g.shape[3]]) : M(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
const o1 = /* @__PURE__ */ D({ conv1d_: fT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mT(n, t, e, s, o, r = "NHWC", i) {
  k(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let a = n, l = t, c = !1;
  t.rank === 3 && (c = !0, l = M(t, [1, t.shape[0], t.shape[1], t.shape[2]]), a = [1, n[0], n[1], n[2]]), k(a.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`), k(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), k(e.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);
  const u = r === "NHWC" ? a[3] : a[1], d = r === "NHWC" ? l.shape[3] : l.shape[1];
  k(u === e.shape[2], () => `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${e.shape[2]}.`), k(d === e.shape[3], () => `Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${e.shape[3]}.`), je("conv2dDerInput", o, i);
  const h = { dy: l, filter: e }, p = { strides: s, pad: o, dataFormat: r, dimRoundingMode: i, inputShape: a }, f = E.runKernel(ou, h, p);
  return c ? M(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Af = /* @__PURE__ */ D({ conv2DBackpropInput_: mT });
function gT(n, t, e, s, o, r) {
  const i = T(n, "x", "conv2dTranspose"), a = T(t, "filter", "conv2dTranspose");
  return Af(e, i, a, s, o, "NHWC", r);
}
const r1 = /* @__PURE__ */ D({ conv2dTranspose_: gT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bT(n, t, e, s, o = "NDHWC", r = [1, 1, 1]) {
  const i = T(n, "x", "conv3d"), a = T(t, "filter", "conv3d");
  let l = i, c = !1;
  i.rank === 4 && (c = !0, l = M(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), k(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), k(a.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`), k(l.shape[4] === a.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`), k(Fe(e, r), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`), k(o === "NDHWC", () => `Error in conv3d: got dataFormat of ${o} but only NDHWC is currently supported.`), k(Ho(r), () => "Error in conv3D: Dilated rates should be larger than 0."), k(Ho(e), () => "Error in conv3D: Strides should be larger than 0.");
  const u = { x: l, filter: a }, d = { strides: e, pad: s, dataFormat: o, dilations: r }, h = E.runKernel(ru, u, d);
  return c ? M(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const xT = /* @__PURE__ */ D({ conv3d_: bT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yT(n, t, e, s, o) {
  k(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let r = n, i = t, a = !1;
  t.rank === 4 && (a = !0, i = M(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]), r = [1, n[0], n[1], n[2], n[3]]);
  const l = r[4], c = i.shape[4];
  k(r.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${r.length}.`), k(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), k(e.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`), k(l === e.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`), k(c === e.shape[4], () => `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${e.shape[4]}.`);
  const u = { dy: i, filter: e }, d = { pad: o, strides: s, inputShape: r }, h = E.runKernel(Kp, u, d);
  return a ? M(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const i1 = /* @__PURE__ */ D({ conv3DBackpropInput_: yT });
function wT(n, t, e, s, o) {
  const r = T(n, "x", "conv3dTranspose"), i = T(t, "filter", "conv3dTranspose");
  return i1(e, r, i, s, o);
}
const IT = /* @__PURE__ */ D({ conv3dTranspose_: wT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CT(n) {
  const e = { x: T(n, "x", "cos", "float32") };
  return E.runKernel(ya, e);
}
const Of = /* @__PURE__ */ D({ cos_: CT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vT(n) {
  const e = { x: T(n, "x", "cosh", "float32") };
  return E.runKernel(wa, e);
}
const a1 = /* @__PURE__ */ D({ cosh_: vT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kT(n, t = 0, e = !1, s = !1) {
  const r = { x: T(n, "x", "cumprod") }, i = { axis: t, exclusive: e, reverse: s };
  return E.runKernel(Bp, r, i);
}
const Uh = /* @__PURE__ */ D({ cumprod_: kT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ST(n, t = 0, e = !1, s = !1) {
  const r = { x: T(n, "x", "cumsum") }, i = { axis: t, exclusive: e, reverse: s };
  return E.runKernel(iu, r, i);
}
const l1 = /* @__PURE__ */ D({ cumsum_: ST });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TT(n, t, e, s = !1) {
  const o = T(n, "x", "denseBincount"), r = T(t, "weights", "denseBincount");
  k(o.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${o.dtype}`), k(o.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${o.rank}.`), k(e >= 0, () => `size must be non-negative, but got ${e}.`), k(r.size === o.size || r.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${o.shape}, weights shape: ${r.shape}.`);
  const i = { x: o, weights: r }, a = { size: e, binaryOutput: s };
  return E.runKernel(Up, i, a);
}
const jg = /* @__PURE__ */ D({ denseBincount_: TT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NT(n, t, e = "NHWC") {
  const s = T(n, "x", "depthToSpace", "float32"), o = e === "NHWC" ? s.shape[1] : s.shape[2], r = e === "NHWC" ? s.shape[2] : s.shape[3], i = e === "NHWC" ? s.shape[3] : s.shape[1];
  k(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`), k(o * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${t}  for depthToSpace with input shape
    ${s.shape}`), k(r * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t} for depthToSpace with input shape
        ${s.shape}`), k(i % (t * t) === 0, () => `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${s.shape}`);
  const a = { x: s }, l = { blockSize: t, dataFormat: e };
  return E.runKernel(Yp, a, l);
}
const RT = /* @__PURE__ */ D({ depthToSpace_: NT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $T(n, t, e, s, o = "NHWC", r = [1, 1], i) {
  const a = T(n, "x", "depthwiseConv2d", "float32"), l = T(t, "filter", "depthwiseConv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = M(a, [1, a.shape[0], a.shape[1], a.shape[2]])), k(c.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`), k(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
  const d = o === "NHWC" ? c.shape[3] : c.shape[1];
  k(d === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${d}) must match the inChannels dimension in filter ${l.shape[2]}.`), je("depthwiseConv2d", s, i);
  const h = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: o, dilations: r, dimRoundingMode: i }, f = E.runKernel(au, h, p);
  return u ? M(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Xf = /* @__PURE__ */ D({ depthwiseConv2d_: $T });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ET(n, t, e, s, o = [1, 1], r = "NHWC") {
  const i = T(n, "x", "dilation2d"), a = T(t, "filter", "dilation2d");
  k(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), k(a.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`), k(r === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${r}`);
  let l = i, c = !1;
  i.rank === 3 && (l = M(i, [1, i.shape[0], i.shape[1], i.shape[2]]), c = !0), k(l.shape[3] === a.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${a.shape[2]}`);
  const u = { x: l, filter: a }, d = { strides: e, pad: s, dilations: o }, h = E.runKernel(lu, u, d);
  return c ? M(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const GT = /* @__PURE__ */ D({ dilation2d_: ET });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yo(n, t) {
  const e = n.length, s = [];
  for (let o = 0; o < e; o++) {
    const r = e - 1 - o, i = n[r] || 1;
    (t[t.length - 1 - o] || 1) > 1 && i === 1 && s.unshift(r);
  }
  return s;
}
function de(n, t) {
  const e = [];
  for (let s = 0; s < t.length; s++) {
    const o = n[n.length - s - 1], r = t.length - s - 1, i = t[r];
    (o == null || o === 1 && i > 1) && e.unshift(r);
  }
  return e;
}
function bt(n, t) {
  const e = [], s = Math.max(n.length, t.length);
  for (let o = 0; o < s; o++) {
    let r = n[n.length - o - 1];
    r == null && (r = 1);
    let i = t[t.length - o - 1];
    if (i == null && (i = 1), r === 1)
      e.unshift(i);
    else if (i === 1)
      e.unshift(r);
    else if (r !== i) {
      const a = `Operands could not be broadcast together with shapes ${n} and ${t}.`;
      throw Error(a);
    } else
      e.unshift(r);
  }
  return e;
}
const P8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertAndGetBroadcastShape: bt,
  getBroadcastDims: Yo,
  getReductionAxes: de
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LT(n, t) {
  let e = T(n, "a", "equal", "string_or_numeric"), s = T(t, "b", "equal", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(cu, o);
}
const zn = /* @__PURE__ */ D({ equal_: LT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DT(n, t, e) {
  const s = T(t, "a", "where"), o = T(e, "b", "where"), r = T(n, "condition", "where", "bool"), i = bt(bt(r.shape, s.shape), o.shape), a = Li(r, i), l = Li(s, i), c = Li(o, i), u = {
    condition: a,
    t: l,
    e: c
  };
  return E.runKernel(_u, u);
}
const Ue = /* @__PURE__ */ D({ where_: DT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MT(n) {
  const e = { x: T(n, "x", "zerosLike") };
  return E.runKernel(Hu, e);
}
const Nt = /* @__PURE__ */ D({ zerosLike_: MT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zT(n, t) {
  let e = T(n, "a", "div"), s = T(t, "b", "div");
  [e, s] = re(e, s);
  const o = ut(e, s), r = Nt(o), i = zn(s, r);
  return Ue(i, r, o);
}
const FT = /* @__PURE__ */ D({ divNoNan_: zT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WT(n, t) {
  const e = T(n, "t1", "dot"), s = T(t, "t2", "dot");
  k((e.rank === 1 || e.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);
  const o = e.rank === 1 ? e.size : e.shape[1], r = s.rank === 1 ? s.size : s.shape[0];
  if (k(o === r, () => `Error in dot: inner dimensions of inputs must match, but got ${o} and ${r}.`), e.rank === 1 && s.rank === 1) {
    const i = M(e, [1, -1]), a = M(s, [-1, 1]), l = Gt(i, a);
    return M(l, []);
  } else if (e.rank === 1 && s.rank === 2) {
    const i = M(e, [1, -1]), a = M(s, [s.shape[0], s.shape[1]]), l = Gt(i, a);
    return M(l, [l.size]);
  } else if (e.rank === 2 && s.rank === 1) {
    const i = M(s, [-1, 1]), a = Gt(e, i);
    return M(a, [a.size]);
  } else {
    const i = M(s, [s.shape[0], s.shape[1]]);
    return Gt(e, i);
  }
}
const VT = /* @__PURE__ */ D({ dot_: WT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _T(n) {
  const e = { x: T(n, "x", "elu", "float32") };
  return E.runKernel(Ca, e);
}
const Qu = /* @__PURE__ */ D({ elu_: _T });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AT(n) {
  let t = T(n, "x", "erf");
  k(t.dtype === "int32" || t.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t.dtype === "int32" && (t = et(t, "float32"));
  const e = { x: t };
  return E.runKernel(va, e);
}
const OT = /* @__PURE__ */ D({ erf_: AT });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pf(n, t) {
  for (let e = 0; e < n.length; ++e)
    if (n[n.length - e - 1] !== t - 1 - e)
      return !1;
  return !0;
}
function c1(n, t, e) {
  const s = n.length + t.length, o = [];
  let r = 0, i = 0;
  for (let a = 0; a < s; a++)
    e.indexOf(a) === -1 ? o.push(n[r++]) : o.push(t[i++]);
  return o;
}
function Ce(n, t) {
  const e = [], s = n.length;
  for (let r = 0; r < s; r++)
    t.indexOf(r) === -1 && e.push(n[r]);
  const o = t.map((r) => n[r]);
  return [e, o];
}
function le(n, t) {
  const e = t.map((s) => 1);
  return c1(n, e, t);
}
function Ee(n, t, e) {
  k(Pf(t, e), () => `${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`);
}
function ne(n, t) {
  if (Pf(n, t))
    return null;
  const e = [];
  for (let s = 0; s < t; ++s)
    n.indexOf(s) === -1 && e.push(s);
  return n.forEach((s) => e.push(s)), e;
}
function go(n) {
  return n.map((t, e) => [e, t]).sort((t, e) => t[1] - e[1]).map((t) => t[0]);
}
function ce(n, t) {
  const e = [];
  for (let s = t - n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XT(n, t = null, e = !1) {
  const o = { x: T(n, "x", "max") }, r = { reductionIndices: t, keepDims: e };
  return E.runKernel(Iu, o, r);
}
const Qn = /* @__PURE__ */ D({ max_: XT });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PT(n, t = null, e = !1) {
  const o = { x: T(n, "x", "min") }, r = { axis: t, keepDims: e };
  return E.runKernel(Su, o, r);
}
const xc = /* @__PURE__ */ D({ min_: PT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZT(n, t) {
  let e = T(n, "base", "pow"), s = T(t, "exp", "pow");
  [e, s] = re(e, s);
  const o = { a: e, b: s };
  return E.runKernel(_a, o);
}
const Vr = /* @__PURE__ */ D({ pow_: ZT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gt(n, t) {
  if ((wn(n) && t !== "string" || Array.isArray(n)) && t !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (t === "string" && wn(n) && !(n instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return il(n, [], [], t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KT(n) {
  const e = { x: T(n, "x", "sqrt", "float32") };
  return E.runKernel(ja, e);
}
const Ae = /* @__PURE__ */ D({ sqrt_: KT });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BT(n) {
  const t = T(n, "x", "square"), e = {};
  return E.runKernel("Square", { x: t }, e);
}
const Pt = /* @__PURE__ */ D({ square_: BT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HT(n, t = null, e = !1) {
  let s = T(n, "x", "sum");
  s.dtype === "bool" && (s = et(s, "int32"));
  const o = { x: s }, r = { axis: t, keepDims: e };
  return E.runKernel(Ou, o, r);
}
const at = /* @__PURE__ */ D({ sum_: HT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UT(n, t = "euclidean", e = null, s = !1) {
  n = T(n, "x", "norm");
  const o = u1(n, t, e);
  let r = o.shape;
  if (s) {
    const i = Ct(e, n.shape);
    r = le(o.shape, i);
  }
  return M(o, r);
}
function u1(n, t, e = null) {
  if (n.rank === 0)
    return be(n);
  if (n.rank !== 1 && e === null)
    return u1(M(n, [-1]), t, e);
  if (n.rank === 1 || typeof e == "number" || Array.isArray(e) && e.length === 1) {
    if (t === 1)
      return at(be(n), e);
    if (t === 1 / 0)
      return Qn(be(n), e);
    if (t === -1 / 0)
      return xc(be(n), e);
    if (t === "euclidean" || t === 2)
      return Ae(at(Vr(be(n), gt(2, "int32")), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  if (Array.isArray(e) && e.length === 2) {
    if (t === 1)
      return Qn(at(be(n), e[0]), e[1] - 1);
    if (t === 1 / 0)
      return Qn(at(be(n), e[1]), e[0]);
    if (t === -1 / 0)
      return xc(at(be(n), e[1]), e[0]);
    if (t === "fro" || t === "euclidean")
      return Ae(at(Pt(n), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  throw new Error(`Error in norm: invalid axis: ${e}`);
}
const ju = /* @__PURE__ */ D({ norm_: UT });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YT(n, t = null, e = !1) {
  return ju(n, "euclidean", t, e);
}
const QT = /* @__PURE__ */ D({ euclideanNorm_: YT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jT(n) {
  const e = { x: T(n, "x", "exp") };
  return E.runKernel(ka, e);
}
const Fn = /* @__PURE__ */ D({ exp_: jT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JT(n, t = 0) {
  const e = T(n, "x", "expandDims", "string_or_numeric");
  k(t <= e.rank, () => "Axis must be <= rank of the tensor");
  const s = { input: e }, o = { dim: t };
  return E.runKernel(uu, s, o);
}
const tn = /* @__PURE__ */ D({ expandDims_: JT });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qT(n) {
  const e = { x: T(n, "x", "expm1") };
  return E.runKernel(Sa, e);
}
const tN = /* @__PURE__ */ D({ expm1_: qT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eN(n, t) {
  const e = T(n, "x", "tile", "string_or_numeric");
  k(e.rank === t.length, () => `Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);
  const s = { x: e }, o = { reps: t };
  return E.runKernel(nl, s, o);
}
const Un = /* @__PURE__ */ D({ tile_: eN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nN(n, t, e, s = "float32") {
  t == null && (t = n);
  const o = vt([n, t], s), r = n <= t ? n : t;
  for (let a = 0; a < r; ++a)
    o.set(1, a, a);
  const i = M(o.toTensor(), [n, t]);
  if (e == null)
    return i;
  if (e.length === 1)
    return Un(tn(i, 0), [e[0], 1, 1]);
  if (e.length === 2)
    return Un(tn(tn(i, 0), 0), [e[0], e[1], 1, 1]);
  if (e.length === 3)
    return Un(tn(tn(tn(i, 0), 0), 0), [
      e[0],
      e[1],
      e[2],
      1,
      1
    ]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`);
}
const d1 = /* @__PURE__ */ D({ eye_: nN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sN(n) {
  const e = { x: T(n, "x", "floor", "float32") };
  return E.runKernel(Ta, e);
}
const Ju = /* @__PURE__ */ D({ floor_: sN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oN(n, t, e = 0, s = 0) {
  const o = T(n, "x", "gather"), r = T(t, "indices", "gather", "int32"), i = { x: o, indices: r }, a = { axis: e, batchDims: s };
  return E.runKernel(hu, i, a);
}
const Zf = /* @__PURE__ */ D({ gather_: oN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rN(n, t) {
  let e = T(n, "a", "greater", "string_or_numeric"), s = T(t, "b", "greater", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(pu, o);
}
const dn = /* @__PURE__ */ D({ greater_: rN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iN(n, t) {
  let e = T(n, "a", "greaterEqual", "string_or_numeric"), s = T(t, "b", "greaterEqual", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(Ra, o);
}
const cr = /* @__PURE__ */ D({ greaterEqual_: iN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aN(n) {
  const e = { input: T(n, "input", "imag") };
  return E.runKernel(sf, e);
}
const Kf = /* @__PURE__ */ D({ imag_: aN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lN(n) {
  const e = { x: T(n, "x", "isFinite") };
  return E.runKernel(Ea, e);
}
const cN = /* @__PURE__ */ D({ isFinite_: lN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uN(n) {
  const e = { x: T(n, "x", "isInf") };
  return E.runKernel(Ga, e);
}
const dN = /* @__PURE__ */ D({ isInf_: uN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hN(n) {
  const e = { x: T(n, "x", "isNaN") };
  return E.runKernel(La, e);
}
const pN = /* @__PURE__ */ D({ isNaN_: hN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fN(n, t = 0.2) {
  const s = { x: T(n, "x", "leakyRelu") }, o = { alpha: t };
  return E.runKernel(fu, s, o);
}
const Bf = /* @__PURE__ */ D({ leakyRelu_: fN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mN(n, t) {
  let e = T(n, "a", "less", "string_or_numeric"), s = T(t, "b", "less", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(mu, o);
}
const h1 = /* @__PURE__ */ D({ less_: mN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gN(n, t) {
  let e = T(n, "a", "lessEqual", "string_or_numeric"), s = T(t, "b", "lessEqual", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(gu, o);
}
const ti = /* @__PURE__ */ D({ lessEqual_: gN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bN(n, t = 5, e = 1, s = 1, o = 0.5) {
  const r = T(n, "x", "localResponseNormalization");
  k(r.rank === 4 || r.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${r.rank}.`), k(Xo(t), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);
  let i = r, a = !1;
  r.rank === 3 && (a = !0, i = M(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const l = { x: i }, c = { depthRadius: t, bias: e, alpha: s, beta: o }, u = E.runKernel(wu, l, c);
  return a ? M(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
const xN = /* @__PURE__ */ D({ localResponseNormalization_: bN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yN(n) {
  const e = { x: T(n, "x", "log", "float32") };
  return E.runKernel(Da, e);
}
const Wn = /* @__PURE__ */ D({ log_: yN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wN(n) {
  const e = { x: T(n, "x", "log1p") };
  return E.runKernel(Ma, e);
}
const Hf = /* @__PURE__ */ D({ log1p_: wN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z8(n) {
  return k(io(n), () => "The f passed in grad(f) must be a function"), (t, e) => {
    const s = T(t, "x", "tf.grad", "string_or_numeric"), o = e != null ? T(e, "dy", "tf.grad") : null;
    return E.tidy(() => {
      const { value: r, grads: i } = E.gradients(() => n(s), [s], o);
      return o != null && Xe(r.shape, o.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), qu(i), i[0];
    });
  };
}
function K8(n) {
  return k(io(n), () => "The f passed in grads(f) must be a function"), (t, e) => {
    k(Array.isArray(t), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    const s = Df(t, "args", "tf.grads", "string_or_numeric"), o = e != null ? T(e, "dy", "tf.grads") : null;
    return E.tidy(() => {
      const { value: r, grads: i } = E.gradients(() => n(...s), s, o);
      return o != null && Xe(r.shape, o.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), qu(i), i;
    });
  };
}
function B8(n) {
  return k(io(n), () => "The f passed in valueAndGrad(f) must be a function"), (t, e) => {
    k(t instanceof Mt, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), k(e == null || e instanceof Mt, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    const { grads: s, value: o } = E.gradients(() => n(t), [t], e);
    return qu(s), { grad: s[0], value: o };
  };
}
function H8(n) {
  return k(io(n), () => "The f passed in valueAndGrads(f) must be a function"), (t, e) => {
    k(Array.isArray(t) && t.every((o) => o instanceof Mt), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), k(e == null || e instanceof Mt, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    const s = E.gradients(() => n(...t), t, e);
    return e != null && Xe(s.value.shape, e.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), qu(s.grads), s;
  };
}
function IN(n, t) {
  k(io(n), () => "The f passed in variableGrads(f) must be a function"), k(t == null || Array.isArray(t) && t.every((c) => c instanceof mc), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  const e = t != null;
  if (!e) {
    t = [];
    for (const c in E.registeredVariables)
      t.push(E.registeredVariables[c]);
  }
  const s = e ? t.filter((c) => !c.trainable) : null, o = t.length;
  t = t.filter((c) => c.trainable), k(t.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`);
  const r = !0, { value: i, grads: a } = E.gradients(n, t, null, r);
  k(a.some((c) => c != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), k(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);
  const l = {};
  return t.forEach((c, u) => {
    a[u] != null && (l[c.name] = a[u]);
  }), s != null && s.forEach((c) => l[c.name] = null), { value: i, grads: l };
}
function Qo(n) {
  return E.customGrad(n);
}
function qu(n) {
  if (n.filter((e) => e == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CN(n) {
  const e = { x: T(n, "x", "neg") };
  return E.runKernel(Nu, e);
}
const ee = /* @__PURE__ */ D({ neg_: CN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vN(n) {
  const e = { x: T(n, "x", "softplus") };
  return E.runKernel(Qa, e);
}
const cl = /* @__PURE__ */ D({ softplus_: vN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kN(n) {
  const t = T(n, "x", "logSigmoid");
  return Qo((s) => ({ value: ee(cl(ee(s))), gradFunc: (i) => G(i, qr(ee(s))) }))(t);
}
const SN = /* @__PURE__ */ D({ logSigmoid_: kN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TN(n, t) {
  let e = T(n, "a", "sub"), s = T(t, "b", "sub");
  [e, s] = re(e, s);
  const o = { a: e, b: s };
  return E.runKernel(qa, o);
}
const lt = /* @__PURE__ */ D({ sub_: TN });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NN(n, t = -1) {
  const e = T(n, "logits", "logSoftmax");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);
  return Qo((o, r) => {
    const a = Qn(o, t, !0), l = lt(o, a), c = lt(et(l, "float32"), Wn(at(Fn(l), t, !0)));
    return r([c]), { value: c, gradFunc: (d, h) => {
      const [p] = h, f = !0, m = Fn(p);
      return lt(d, G(at(d, t, f), m));
    } };
  })(e);
}
const p1 = /* @__PURE__ */ D({ logSoftmax_: NN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RN(n, t = null, e = !1) {
  const s = T(n, "x", "logSumExp"), o = Ct(t, s.shape), r = Qn(
    s,
    o,
    !0
    /* keepDims */
  ), i = lt(s, r), a = Fn(i), l = at(a, o), c = Wn(l), u = U(M(r, c.shape), c);
  if (e) {
    const d = le(u.shape, o);
    return M(u, d);
  }
  return u;
}
const f1 = /* @__PURE__ */ D({ logSumExp_: RN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $N(n, t) {
  const e = T(n, "a", "logicalAnd", "bool"), s = T(t, "b", "logicalAnd", "bool");
  bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(bu, o);
}
const xs = /* @__PURE__ */ D({ logicalAnd_: $N });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EN(n) {
  const e = { x: T(n, "x", "logicalNot", "bool") };
  return E.runKernel(xu, e);
}
const Uf = /* @__PURE__ */ D({ logicalNot_: EN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GN(n, t) {
  const e = T(n, "a", "logicalOr", "bool"), s = T(t, "b", "logicalOr", "bool");
  bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(yu, o);
}
const m1 = /* @__PURE__ */ D({ logicalOr_: GN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LN(n, t) {
  const e = T(n, "a", "logicalXor", "bool"), s = T(t, "b", "logicalXor", "bool");
  return bt(e.shape, s.shape), xs(m1(n, t), Uf(xs(n, t)));
}
const DN = /* @__PURE__ */ D({ logicalXor_: LN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MN(n, t, e, s, o) {
  const r = T(n, "x", "maxPool"), i = 1;
  let a = r, l = !1;
  r.rank === 3 && (l = !0, a = M(r, [1, r.shape[0], r.shape[1], r.shape[2]])), k(a.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${a.rank}.`), k(Fe(e, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`), je("maxPool", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o }, d = E.runKernel(Cu, c, u);
  return l ? M(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const Yf = /* @__PURE__ */ D({ maxPool_: MN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zN(n, t = [1, 1, 1], e, s, o, r = "NDHWC") {
  const i = T(n, "x", "maxPool3d");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = M(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), k(a.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`), k(r === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`), je("maxPool3d", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o, dataFormat: r }, d = E.runKernel(vu, c, u);
  return l ? M(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const FN = /* @__PURE__ */ D({ maxPool3d_: zN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WN(n, t) {
  let e = T(n, "a", "maximum"), s = T(t, "b", "maximum");
  [e, s] = re(e, s), e.dtype === "bool" && (e = et(e, "int32"), s = et(s, "int32")), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(za, o);
}
const bo = /* @__PURE__ */ D({ maximum_: WN });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VN(n, t = null, e = !1) {
  const o = { x: T(n, "x", "mean") }, r = { axis: t, keepDims: e };
  return E.runKernel(ku, o, r);
}
const ie = /* @__PURE__ */ D({ mean_: VN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ye(n, t = "float32") {
  if (Is(n), t === "complex64") {
    const s = ye(n, "float32"), o = ye(n, "float32");
    return Po(s, o);
  }
  const e = Re(X(n), t);
  return E.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xo(n, t = "float32") {
  if (Is(n), t === "complex64") {
    const s = xo(n, "float32"), o = ye(n, "float32");
    return Po(s, o);
  }
  const e = Hc(X(n), t);
  return E.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _N(n, t) {
  let e = T(n, "a", "minimum"), s = T(t, "b", "minimum");
  [e, s] = re(e, s), e.dtype === "bool" && (e = et(e, "int32"), s = et(s, "int32")), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(Fa, o);
}
const td = /* @__PURE__ */ D({ minimum_: _N });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AN(n, t, e) {
  k(e === "reflect" || e === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);
  const s = T(n, "x", "mirrorPad");
  if (s.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  k(t.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);
  const o = e === "reflect" ? 1 : 0;
  for (let a = 0; a < s.rank; a++)
    k(t[a].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), k(t[a][0] >= 0 && t[a][0] <= s.shape[a] - o && t[a][1] >= 0 && t[a][1] <= s.shape[a] - o, () => `Padding in dimension ${a} cannot be greater than or equal to ${s.shape[a] - o} or less than 0 for input of shape ${s.shape}`);
  const r = { paddings: t, mode: e }, i = { x: s };
  return E.runKernel(Tu, i, r);
}
const ON = /* @__PURE__ */ D({ mirrorPad_: AN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XN(n, t) {
  let e = T(n, "a", "mod"), s = T(t, "b", "mod");
  [e, s] = re(e, s);
  const o = { a: e, b: s };
  return E.runKernel(Wa, o);
}
const PN = /* @__PURE__ */ D({ mod_: XN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZN(n, t = null, e = !1) {
  n = T(n, "x", "moments");
  const s = Ct(t, n.shape), o = ie(n, s, e);
  let r = o.shape;
  e || (r = le(o.shape, s));
  const i = Pt(lt(et(n, "float32"), M(o, r))), a = ie(i, s, e);
  return { mean: o, variance: a };
}
const Qf = /* @__PURE__ */ D({ moments_: ZN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KN(n, t) {
  let e = T(n, "a", "notEqual", "string_or_numeric"), s = T(t, "b", "notEqual", "string_or_numeric");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const o = { a: e, b: s };
  return E.runKernel(Ru, o);
}
const Pi = /* @__PURE__ */ D({ notEqual_: KN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BN(n, t, e = 1, s = 0, o = "int32") {
  if (t < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
  const i = { indices: T(n, "indices", "oneHot", "int32") }, a = { dtype: o, depth: t, onValue: e, offValue: s };
  return E.runKernel(Eu, i, a);
}
const g1 = /* @__PURE__ */ D({ oneHot_: BN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HN(n) {
  const e = { x: T(n, "x", "onesLike") };
  return E.runKernel($u, e);
}
const Vn = /* @__PURE__ */ D({ onesLike_: HN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UN(n, t, e = 0) {
  const s = T(n, "x", "pad");
  if (s.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const o = { paddings: t, constantValue: e }, r = { x: s };
  return E.runKernel(Lu, r, o);
}
const jf = /* @__PURE__ */ D({ pad_: UN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YN(n, t, e) {
  const s = T(n, "x", "spaceToBatchND");
  k(s.rank >= 1 + t.length, () => `input rank ${s.rank} should be > than [blockShape] ${t.length}`), k(e.length === t.length, () => `paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`), k(s.shape.reduce((i, a, l) => l > 0 && l <= t.length ? i && (a + e[l - 1][0] + e[l - 1][1]) % t[l - 1] === 0 : i, !0), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);
  const o = { x: s }, r = { blockShape: t, paddings: e };
  return E.runKernel(Xu, o, r);
}
const Jf = /* @__PURE__ */ D({ spaceToBatchND_: YN });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QN(n, t, e, s, o, r, i) {
  o == null && (o = [1, 1]), r == null && (r = 1), s === 0 && (s = "valid");
  const a = T(n, "x", "maxPool");
  let l = a, c = !1;
  a.rank === 3 && (c = !0, l = M(a, [1, a.shape[0], a.shape[1], a.shape[2]])), k(Fe(r, o), () => `Error in pool: Either strides or dilations must be 1. Got strides ${r} and dilations '${o}'`);
  const u = An(l.shape, t, r, o, s), d = [u.dilationHeight, u.dilationWidth];
  let h;
  s === "same" ? h = JN([u.filterHeight, u.filterWidth], d) : h = [[0, 0], [0, 0]];
  const p = d[0] === 1 && d[1] === 1, [f, m] = jN([u.inHeight, u.inWidth], d, h), g = p ? s : "valid", b = p ? l : Jf(l, d, f), w = (e === "avg" ? () => Wf(b, t, r, g, i) : () => Yf(b, t, r, g, i))(), y = p ? w : _f(w, d, m);
  return c ? M(y, [y.shape[1], y.shape[2], y.shape[3]]) : y;
}
function jN(n, t, e) {
  const s = e.map((u) => u[0]), o = e.map((u) => u[1]), r = n.concat(s, o), i = t.map((u, d) => (u - r[d] % u) % u), a = o.map((u, d) => u + i[d]), l = t.map((u, d) => [s[d], a[d]]), c = t.map((u, d) => [0, i[d]]);
  return [l, c];
}
function JN(n, t) {
  const s = n.map((i, a) => i + (i - 1) * (t[a] - 1)).map((i) => i - 1), o = s.map((i) => Math.floor(i / 2)), r = s.map((i, a) => i - o[a]);
  return s.map((i, a) => [o[a], r[a]]);
}
const qN = /* @__PURE__ */ D({ pool_: QN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tR(n, t) {
  const e = T(n, "x", "prelu"), s = T(t, "alpha", "prelu"), o = { x: e, alpha: s };
  return E.runKernel(Du, o);
}
const qf = /* @__PURE__ */ D({ prelu_: tR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eR(n, t = null, e = !1) {
  let s = T(n, "x", "prod");
  s.dtype === "bool" && (s = et(s, "int32"));
  const o = { x: s }, r = { axis: t, keepDims: e };
  return E.runKernel(Mu, o, r);
}
const nR = /* @__PURE__ */ D({ prod_: eR });
var Yh = {}, sR = {
  get exports() {
    return Yh;
  },
  set exports(n) {
    Yh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(l) {
      var c = this, u = a();
      c.next = function() {
        var d = 2091639 * c.s0 + c.c * 23283064365386963e-26;
        return c.s0 = c.s1, c.s1 = c.s2, c.s2 = d - (c.c = d | 0);
      }, c.c = 1, c.s0 = u(" "), c.s1 = u(" "), c.s2 = u(" "), c.s0 -= u(l), c.s0 < 0 && (c.s0 += 1), c.s1 -= u(l), c.s1 < 0 && (c.s1 += 1), c.s2 -= u(l), c.s2 < 0 && (c.s2 += 1), u = null;
    }
    function r(l, c) {
      return c.c = l.c, c.s0 = l.s0, c.s1 = l.s1, c.s2 = l.s2, c;
    }
    function i(l, c) {
      var u = new o(l), d = c && c.state, h = u.next;
      return h.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, h.double = function() {
        return h() + (h() * 2097152 | 0) * 11102230246251565e-32;
      }, h.quick = h, d && (typeof d == "object" && r(d, u), h.state = function() {
        return r(u, {});
      }), h;
    }
    function a() {
      var l = 4022871197, c = function(u) {
        u = String(u);
        for (var d = 0; d < u.length; d++) {
          l += u.charCodeAt(d);
          var h = 0.02519603282416938 * l;
          l = h >>> 0, h -= l, h *= l, l = h >>> 0, h -= l, l += h * 4294967296;
        }
        return (l >>> 0) * 23283064365386963e-26;
      };
      return c;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.alea = i;
  })(
    ir,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(sR);
var Qh = {}, oR = {
  get exports() {
    return Qh;
  },
  set exports(n) {
    Qh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this, c = "";
      l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
        var d = l.x ^ l.x << 11;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ d ^ d >>> 8;
      }, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, l.next();
    }
    function r(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l;
    }
    function i(a, l) {
      var c = new o(a), u = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
        while (f === 0);
        return f;
      }, d.int32 = c.next, d.quick = d, u && (typeof u == "object" && r(u, c), d.state = function() {
        return r(c, {});
      }), d;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor128 = i;
  })(
    ir,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(oR);
var jh = {}, rR = {
  get exports() {
    return jh;
  },
  set exports(n) {
    jh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this, c = "";
      l.next = function() {
        var d = l.x ^ l.x >>> 2;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (d ^ d << 1)) | 0;
      }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, u == c.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
    }
    function r(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l.v = a.v, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new o(a), u = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
        while (f === 0);
        return f;
      }, d.int32 = c.next, d.quick = d, u && (typeof u == "object" && r(u, c), d.state = function() {
        return r(c, {});
      }), d;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorwow = i;
  })(
    ir,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(rR);
var Jh = {}, iR = {
  get exports() {
    return Jh;
  },
  set exports(n) {
    Jh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this;
      l.next = function() {
        var u = l.x, d = l.i, h, p;
        return h = u[d], h ^= h >>> 7, p = h ^ h << 24, h = u[d + 1 & 7], p ^= h ^ h >>> 10, h = u[d + 3 & 7], p ^= h ^ h >>> 3, h = u[d + 4 & 7], p ^= h ^ h << 7, h = u[d + 7 & 7], h = h ^ h << 13, p ^= h ^ h << 9, u[d] = p, l.i = d + 1 & 7, p;
      };
      function c(u, d) {
        var h, p = [];
        if (d === (d | 0))
          p[0] = d;
        else
          for (d = "" + d, h = 0; h < d.length; ++h)
            p[h & 7] = p[h & 7] << 15 ^ d.charCodeAt(h) + p[h + 1 & 7] << 13;
        for (; p.length < 8; )
          p.push(0);
        for (h = 0; h < 8 && p[h] === 0; ++h)
          ;
        for (h == 8 ? p[7] = -1 : p[h], u.x = p, u.i = 0, h = 256; h > 0; --h)
          u.next();
      }
      c(l, a);
    }
    function r(a, l) {
      return l.x = a.x.slice(), l.i = a.i, l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new o(a), u = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
        while (f === 0);
        return f;
      }, d.int32 = c.next, d.quick = d, u && (u.x && r(u, c), d.state = function() {
        return r(c, {});
      }), d;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorshift7 = i;
  })(
    ir,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(iR);
var qh = {}, aR = {
  get exports() {
    return qh;
  },
  set exports(n) {
    qh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this;
      l.next = function() {
        var u = l.w, d = l.X, h = l.i, p, f;
        return l.w = u = u + 1640531527 | 0, f = d[h + 34 & 127], p = d[h = h + 1 & 127], f ^= f << 13, p ^= p << 17, f ^= f >>> 15, p ^= p >>> 12, f = d[h] = f ^ p, l.i = h, f + (u ^ u >>> 16) | 0;
      };
      function c(u, d) {
        var h, p, f, m, g, b = [], x = 128;
        for (d === (d | 0) ? (p = d, d = null) : (d = d + "\0", p = 0, x = Math.max(x, d.length)), f = 0, m = -32; m < x; ++m)
          d && (p ^= d.charCodeAt((m + 32) % d.length)), m === 0 && (g = p), p ^= p << 10, p ^= p >>> 15, p ^= p << 4, p ^= p >>> 13, m >= 0 && (g = g + 1640531527 | 0, h = b[m & 127] ^= p + g, f = h == 0 ? f + 1 : 0);
        for (f >= 128 && (b[(d && d.length || 0) & 127] = -1), f = 127, m = 4 * 128; m > 0; --m)
          p = b[f + 34 & 127], h = b[f = f + 1 & 127], p ^= p << 13, h ^= h << 17, p ^= p >>> 15, h ^= h >>> 12, b[f] = p ^ h;
        u.w = g, u.X = b, u.i = f;
      }
      c(l, a);
    }
    function r(a, l) {
      return l.i = a.i, l.w = a.w, l.X = a.X.slice(), l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new o(a), u = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
        while (f === 0);
        return f;
      }, d.int32 = c.next, d.quick = d, u && (u.X && r(u, c), d.state = function() {
        return r(c, {});
      }), d;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor4096 = i;
  })(
    ir,
    // window object or global
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(aR);
var tp = {}, lR = {
  get exports() {
    return tp;
  },
  set exports(n) {
    tp = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this, c = "";
      l.next = function() {
        var d = l.b, h = l.c, p = l.d, f = l.a;
        return d = d << 25 ^ d >>> 7 ^ h, h = h - p | 0, p = p << 24 ^ p >>> 8 ^ f, f = f - d | 0, l.b = d = d << 20 ^ d >>> 12 ^ h, l.c = h = h - p | 0, l.d = p << 16 ^ h >>> 16 ^ f, l.a = f - d | 0;
      }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, a === Math.floor(a) ? (l.a = a / 4294967296 | 0, l.b = a | 0) : c += a;
      for (var u = 0; u < c.length + 20; u++)
        l.b ^= c.charCodeAt(u) | 0, l.next();
    }
    function r(a, l) {
      return l.a = a.a, l.b = a.b, l.c = a.c, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new o(a), u = l && l.state, d = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return d.double = function() {
        do
          var h = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (h + p) / (1 << 21);
        while (f === 0);
        return f;
      }, d.int32 = c.next, d.quick = d, u && (typeof u == "object" && r(u, c), d.state = function() {
        return r(c, {});
      }), d;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.tychei = i;
  })(
    ir,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(lR);
var ep = {}, cR = {
  get exports() {
    return ep;
  },
  set exports(n) {
    ep = n;
  }
};
const uR = {}, dR = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: uR
}, Symbol.toStringTag, { value: "Module" })), hR = /* @__PURE__ */ Wv(dR);
(function(n) {
  (function(t, e, s) {
    var o = 256, r = 6, i = 52, a = "random", l = s.pow(o, r), c = s.pow(2, i), u = c * 2, d = o - 1, h;
    function p(y, I, C) {
      var v = [];
      I = I == !0 ? { entropy: !0 } : I || {};
      var S = b(g(
        I.entropy ? [y, w(e)] : y ?? x(),
        3
      ), v), N = new f(v), R = function() {
        for (var $ = N.g(r), F = l, W = 0; $ < c; )
          $ = ($ + W) * o, F *= o, W = N.g(1);
        for (; $ >= u; )
          $ /= 2, F /= 2, W >>>= 1;
        return ($ + W) / F;
      };
      return R.int32 = function() {
        return N.g(4) | 0;
      }, R.quick = function() {
        return N.g(4) / 4294967296;
      }, R.double = R, b(w(N.S), e), (I.pass || C || function($, F, W, _) {
        return _ && (_.S && m(_, N), $.state = function() {
          return m(N, {});
        }), W ? (s[a] = $, F) : $;
      })(
        R,
        S,
        "global" in I ? I.global : this == s,
        I.state
      );
    }
    function f(y) {
      var I, C = y.length, v = this, S = 0, N = v.i = v.j = 0, R = v.S = [];
      for (C || (y = [C++]); S < o; )
        R[S] = S++;
      for (S = 0; S < o; S++)
        R[S] = R[N = d & N + y[S % C] + (I = R[S])], R[N] = I;
      (v.g = function($) {
        for (var F, W = 0, _ = v.i, A = v.j, O = v.S; $--; )
          F = O[_ = d & _ + 1], W = W * o + O[d & (O[_] = O[A = d & A + F]) + (O[A] = F)];
        return v.i = _, v.j = A, W;
      })(o);
    }
    function m(y, I) {
      return I.i = y.i, I.j = y.j, I.S = y.S.slice(), I;
    }
    function g(y, I) {
      var C = [], v = typeof y, S;
      if (I && v == "object")
        for (S in y)
          try {
            C.push(g(y[S], I - 1));
          } catch {
          }
      return C.length ? C : v == "string" ? y : y + "\0";
    }
    function b(y, I) {
      for (var C = y + "", v, S = 0; S < C.length; )
        I[d & S] = d & (v ^= I[d & S] * 19) + C.charCodeAt(S++);
      return w(I);
    }
    function x() {
      try {
        var y;
        return h && (y = h.randomBytes) ? y = y(o) : (y = new Uint8Array(o), (t.crypto || t.msCrypto).getRandomValues(y)), w(y);
      } catch {
        var I = t.navigator, C = I && I.plugins;
        return [+new Date(), t, C, t.screen, w(e)];
      }
    }
    function w(y) {
      return String.fromCharCode.apply(0, y);
    }
    if (b(s.random(), e), n.exports) {
      n.exports = p;
      try {
        h = hR;
      } catch {
      }
    } else
      s["seed" + a] = p;
  })(
    // global: `self` in browsers (including strict mode and web workers),
    // otherwise `this` in Node and other environments
    typeof self < "u" ? self : ir,
    [],
    // pool: entropy pool starts empty
    Math
    // math: package containing random, pow, and seedrandom
  );
})(cR);
var pR = Yh, fR = Qh, mR = jh, gR = Jh, bR = qh, xR = tp, ur = ep;
ur.alea = pR;
ur.xor128 = fR;
ur.xorwow = mR;
ur.xorshift7 = gR;
ur.xor4096 = bR;
ur.tychei = xR;
var ei = ur;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tm {
  constructor(t, e, s, o, r) {
    this.mean = t, this.stdDev = e, this.dtype = s, this.nextVal = NaN, this.truncated = o, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    const i = r || Math.random();
    this.random = ei.alea(i.toString());
  }
  /** Returns next sample from a Gaussian distribution. */
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const o = this.nextVal;
      return this.nextVal = NaN, o;
    }
    let t, e, s = !1;
    for (; !s; ) {
      let o, r, i;
      do
        o = 2 * this.random() - 1, r = 2 * this.random() - 1, i = o * o + r * r;
      while (i >= 1 || i === 0);
      const a = Math.sqrt(-2 * Math.log(i) / i);
      t = this.mean + this.stdDev * o * a, e = this.mean + this.stdDev * r * a, (!this.truncated || this.isValidTruncated(t)) && (s = !0);
    }
    return (!this.truncated || this.isValidTruncated(e)) && (this.nextVal = this.convertValue(e)), this.convertValue(t);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(t) {
    return this.dtype == null || this.dtype === "float32" ? t : Math.round(t);
  }
  /** Returns true if less than 2-standard-deviations from the mean. */
  isValidTruncated(t) {
    return t <= this.upper && t >= this.lower;
  }
}
class U8 {
  constructor(t, e, s, o) {
    this.alpha = t, this.beta = 1 / e, this.dtype = s;
    const r = o || Math.random();
    this.randu = ei.alea(r.toString()), this.randn = new tm(0, 1, s, !1, this.randu()), t < 1 ? this.d = t + 2 / 3 : this.d = t - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  /** Returns next sample from a gamma distribution. */
  nextValue() {
    let t, e, s, o, r, i;
    for (; ; ) {
      do
        o = this.randn.nextValue(), i = 1 + this.c * o;
      while (i <= 0);
      if (i *= i * i, t = o * o, e = 1 - 0.331 * t * t, s = 0.5 * t + this.d * (1 - i + Math.log(i)), r = this.randu(), r < e || Math.log(r) < s)
        break;
    }
    return i = 1 / this.beta * this.d * i, this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(i);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(t) {
    return this.dtype === "float32" ? t : Math.round(t);
  }
}
class yR {
  constructor(t = 0, e = 1, s, o) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = t, this.range = e - t, this.dtype = s, o == null && (o = Math.random()), typeof o == "number" && (o = o.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);
    this.random = ei.alea(o);
  }
  convertValue(t) {
    return this.canReturnFloat() ? t : Math.round(t);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wR(n, t = 0, e = 1, s, o) {
  if (Is(n), s != null && s === "bool")
    throw new Error(`Unsupported data type ${s}`);
  const r = new tm(t, e, s, !1, o), i = vt(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = r.nextValue();
  return i.toTensor();
}
const IR = /* @__PURE__ */ D({ randomNormal_: wR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CR(n, t = 0, e = 1, s = "float32", o) {
  Is(n);
  const r = vt(n, s), i = new yR(t, e, null, o);
  for (let a = 0; a < r.values.length; a++)
    r.values[a] = i.nextValue();
  return r.toTensor();
}
const ed = /* @__PURE__ */ D({ randomUniform_: CR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zi(n, t, e = 1, s = "float32") {
  if (e === 0)
    throw new Error("Cannot have a step of zero");
  const o = { start: n, stop: t, step: e, dtype: s };
  return E.runKernel(df, {}, o);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vR(n) {
  const e = { input: T(n, "input", "real") };
  return E.runKernel(hf, e);
}
const yc = /* @__PURE__ */ D({ real_: vR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kR(n) {
  const e = { x: T(n, "x", "reciprocal") };
  return E.runKernel(Aa, e);
}
const SR = /* @__PURE__ */ D({ reciprocal_: kR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TR(n) {
  const e = { x: T(n, "x", "relu") };
  return E.runKernel(Oa, e);
}
const Vs = /* @__PURE__ */ D({ relu_: TR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NR(n) {
  const e = { x: T(n, "x", "relu6") };
  return E.runKernel(Xa, e);
}
const b1 = /* @__PURE__ */ D({ relu6_: NR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RR(n, t) {
  const s = { x: T(n, "x", "reverse") }, o = { dims: t };
  return E.runKernel(Vu, s, o);
}
const jo = /* @__PURE__ */ D({ reverse_: RR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $R(n) {
  const e = { x: T(n, "x", "round") };
  return E.runKernel(Pa, e);
}
const x1 = /* @__PURE__ */ D({ round_: $R });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ER(n) {
  const e = { x: T(n, "x", "rsqrt", "float32") };
  return E.runKernel(Za, e);
}
const y1 = /* @__PURE__ */ D({ rsqrt_: ER });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GR(n) {
  const e = { x: T(n, "x", "selu") };
  return E.runKernel(Ka, e);
}
const w1 = /* @__PURE__ */ D({ selu_: GR });
function LR(n, t, e, s, o, r = [1, 1], i = "NHWC") {
  const a = T(n, "x", "separableConv2d"), l = T(t, "depthwiseFilter", "separableConv2d"), c = T(e, "pointwiseFilter", "separableConv2d");
  let u = a, d = !1;
  if (a.rank === 3 && (d = !0, u = M(a, [1, a.shape[0], a.shape[1], a.shape[2]])), i === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  k(u.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`), k(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), k(c.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), k(c.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`), k(c.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);
  const h = l.shape[2], p = l.shape[3];
  k(c.shape[2] === h * p, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${h * p}, but got ${c.shape[2]}.`);
  const f = Xf(u, l, s, o, i, r), g = Uo(f, c, 1, "valid", i);
  return d ? M(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
const I1 = /* @__PURE__ */ D({ separableConv2d_: LR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DR(n) {
  const e = { x: T(n, "x", "sign") };
  return E.runKernel(Ua, e);
}
const MR = /* @__PURE__ */ D({ sign_: DR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zR(n) {
  const e = { x: T(n, "x", "sin", "float32") };
  return E.runKernel(Ba, e);
}
const C1 = /* @__PURE__ */ D({ sin_: zR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FR(n) {
  const e = { x: T(n, "x", "sinh") };
  return E.runKernel(Ha, e);
}
const v1 = /* @__PURE__ */ D({ sinh_: FR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WR(n, t, e) {
  const s = T(n, "x", "slice1d");
  return k(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), Wt(s, [t], [e]);
}
const em = /* @__PURE__ */ D({ slice1d_: WR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VR(n, t, e) {
  const s = T(n, "x", "slice2d");
  return k(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), Wt(s, t, e);
}
const k1 = /* @__PURE__ */ D({ slice2d_: VR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _R(n, t, e) {
  const s = T(n, "x", "slice3d");
  return k(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), Wt(s, t, e);
}
const nm = /* @__PURE__ */ D({ slice3d_: _R });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AR(n, t, e) {
  const s = T(n, "x", "slice4d");
  return k(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), Wt(s, t, e);
}
const wc = /* @__PURE__ */ D({ slice4d_: AR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OR(n, t = -1) {
  const e = T(n, "logits", "softmax", "float32");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);
  const s = { logits: e }, o = { dim: t };
  return E.runKernel(Zu, s, o);
}
const sm = /* @__PURE__ */ D({ softmax_: OR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XR(n) {
  k(n.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return E.runKernel(qp, t);
}
const om = /* @__PURE__ */ D({ fft_: XR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PR(n) {
  k(n.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return E.runKernel(nf, t);
}
const Ic = /* @__PURE__ */ D({ ifft_: PR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZR(n) {
  const t = n.shape[n.shape.length - 1], e = n.size / t;
  let s;
  if (t <= 2) {
    const o = M(n, [e, t]);
    s = Ic(o);
  } else {
    const o = [e, 2 * (t - 1)], r = M(yc(n), [e, t]), i = M(Kf(n), [e, t]), a = jo(Wt(r, [0, 1], [e, t - 2]), 1), l = G(jo(Wt(i, [0, 1], [e, t - 2]), 1), gt(-1)), c = ze([r, a], 1), u = ze([i, l], 1), d = M(Po(c, u), [o[0], o[1]]);
    s = Ic(d);
  }
  if (s = yc(s), n.rank === 3 && n.shape[0] !== 0) {
    const o = s, r = n.shape[0];
    s = M(s, [r, s.shape[0] / r, s.shape[1]]), o.dispose();
  }
  return s;
}
const S1 = /* @__PURE__ */ D({ irfft_: ZR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KR(n, t, e = 0) {
  const o = { x: T(n, "x", "split") }, r = { numOrSizeSplits: t, axis: e };
  return E.runKernel(Pu, o, r);
}
const yn = /* @__PURE__ */ D({ split_: KR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BR(n, t) {
  k(n.dtype === "float32", () => `The dtype for rfft() must be real value but got ${n.dtype}`);
  let e = n.shape[n.shape.length - 1];
  const s = n.size / e;
  let o;
  if (t != null && t < e) {
    const f = n.shape.map((g) => 0), m = n.shape.map((g) => g);
    m[n.shape.length - 1] = t, o = Wt(n, f, m), e = t;
  } else if (t != null && t > e) {
    const f = n.shape.map((m) => m);
    f[n.shape.length - 1] = t - e, o = ze([n, ye(f)], n.shape.length - 1), e = t;
  } else
    o = n;
  const r = Nt(o), i = M(Po(o, r), [s, e]), a = om(i), l = Math.floor(e / 2) + 1, c = yc(a), u = Kf(a), d = yn(c, [l, e - l], c.shape.length - 1), h = yn(u, [l, e - l], u.shape.length - 1), p = o.shape.slice();
  return p[o.shape.length - 1] = l, M(Po(d[0], h[0]), p);
}
const rm = /* @__PURE__ */ D({ rfft_: BR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HR(n, t) {
  let e = T(n, "a", "squaredDifference"), s = T(t, "b", "squaredDifference");
  [e, s] = re(e, s), bt(e.shape, s.shape);
  const o = { a: e, b: s }, r = {};
  return E.runKernel(Ja, o, r);
}
const T1 = /* @__PURE__ */ D({ squaredDifference_: HR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UR(n, t) {
  const e = T(n, "x", "squeeze", "string_or_numeric");
  return M(e, Ms(e.shape, t).newShape);
}
const ul = /* @__PURE__ */ D({ squeeze_: UR });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YR(n, t = 0) {
  const e = Df(n, "tensors", "stack", "string_or_numeric");
  k(e.length >= 1, () => "Pass at least one tensor to tf.stack"), e.length > 0 && k(t <= e[0].rank, () => "Axis must be <= rank of the tensor");
  const s = e, o = { axis: t };
  return E.runKernel(Gu, s, o);
}
const ys = /* @__PURE__ */ D({ stack_: YR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QR(n, t = 0) {
  const s = { x: T(n, "x", "step") }, o = { alpha: t };
  return E.runKernel(sl, s, o);
}
const dl = /* @__PURE__ */ D({ step_: QR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jR(n, t, e, s, o = 0, r = 0, i = 0, a = 0, l = 0) {
  const u = { x: T(n, "x", "stridedSlice", "string_or_numeric") }, d = {
    begin: t,
    end: e,
    strides: s,
    beginMask: o,
    endMask: r,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  return E.runKernel(wf, u, d);
}
const JR = /* @__PURE__ */ D({ stridedSlice_: jR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qR(n) {
  const e = { x: T(n, "x", "tan", "float32") };
  return E.runKernel(tl, e);
}
const t$ = /* @__PURE__ */ D({ tan_: qR });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sn(n, t) {
  Bc(n);
  const e = rl(n, t);
  if (e.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return il(n, null, e, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ic(n, t, e) {
  if (Bc(n), t != null && t.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  const s = rl(n, e);
  if (s.length !== 2 && s.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return il(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e$(n, t, e) {
  if (Bc(n), t != null && t.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  const s = rl(n, e);
  if (s.length !== 3 && s.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return il(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n$(n, t = 1, e = !0) {
  const s = T(n, "x", "topk");
  if (s.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  const o = s.shape[s.shape.length - 1];
  if (t < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
  if (t > o)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`);
  const r = { x: s }, i = { k: t, sorted: e }, [a, l] = E.runKernel(kf, r, i);
  return { values: a, indices: l };
}
const s$ = /* @__PURE__ */ D({ topk_: n$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o$(n, t = 0, e = 1, s, o) {
  if (Is(n), s != null && s === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  const r = new tm(t, e, s, !0, o), i = vt(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = r.nextValue();
  return i.toTensor();
}
const N1 = /* @__PURE__ */ D({ truncatedNormal_: o$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function r$(n, t = 0) {
  const e = T(n, "x", "unique", "string_or_numeric");
  k(e.rank > 0, () => "The input tensor must be at least 1D");
  const s = { x: e }, o = { axis: t }, [r, i] = E.runKernel(Tf, s, o);
  return { values: r, indices: i };
}
const i$ = /* @__PURE__ */ D({ unique_: r$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a$(n, t, e) {
  const s = T(n, "x", "unsortedSegmentSum"), o = T(t, "segmentIds", "unsortedSegmentSum", "int32");
  k(Xo(e), () => "numSegments must be of dtype int");
  const r = { x: s, segmentIds: o }, i = { numSegments: e };
  return E.runKernel(Bu, r, i);
}
const R1 = /* @__PURE__ */ D({ unsortedSegmentSum_: a$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l$(n, t = 0) {
  const e = T(n, "x", "unstack", "string_or_numeric");
  k(t >= -e.shape.length && t < e.shape.length, () => `Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);
  const s = { value: e }, o = { axis: t };
  return E.runKernel(Ku, s, o);
}
const Jo = /* @__PURE__ */ D({ unstack_: l$ });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function c$(n, t = !0, e, s) {
  return E.makeVariable(n, t, e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $1(n, t) {
  const e = [];
  for (let r = 0; r < t.length; r++)
    t[r] && e.push(r);
  const s = vt(n, "int32"), o = vt([e.length, n.length], "int32");
  for (let r = 0; r < e.length; r++) {
    const i = s.indexToLoc(e[r]), a = r * n.length;
    o.values.set(i, a);
  }
  return o.toTensor();
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u$(n, t, e) {
  const s = T(n, "x", "transpose");
  if (t == null && (t = s.shape.map((i, a) => a).reverse()), k(s.rank === t.length, () => `Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`), t.forEach((i) => {
    k(i >= 0 && i < s.rank, () => `All entries in 'perm' must be between 0 and ${s.rank - 1} but got ${t}`);
  }), s.rank <= 1)
    return s.clone();
  const o = { x: s }, r = { perm: t };
  return s.dtype === "complex64" ? z(() => {
    let i = yc(s), a = Kf(s);
    return i = E.runKernel(Rr, { x: i }, r), a = E.runKernel(Rr, { x: a }, r), e && (a = ee(a)), Po(i, a);
  }) : E.runKernel(Rr, o, r);
}
const St = /* @__PURE__ */ D({ transpose_: u$ });
function im(n, t, e) {
  const s = t.rank > 1 ? t.shape[t.rank - 1] : 1, o = t.rank > 1 ? t.rank - 1 : 1, r = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${o}.`;
  if (e.rank < o)
    throw new Error(r + ` update.rank < ${o}. `);
  if (n.length < s + (e.rank - o))
    throw new Error(r + ` Output shape length < ${s + (e.rank - o)}`);
  if (e.rank !== o + n.length - s)
    throw new Error(r + ` update.rank != ${o + n.length - s}`);
  for (let i = 0; i < o; ++i)
    if (e.shape[i] !== t.shape[i])
      throw new Error(r + ` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);
  for (let i = 0; i < e.rank - o; ++i)
    if (e.shape[i + o] !== n[i + s])
      throw new Error(r + ` updates.shape[${i + o}] (${e.shape[i + o]}) != shape[${i + o}] (${n[i + o]})`);
}
function E1(n, t, e) {
  if (t.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);
  if (n.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);
  if (t.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);
  if (e.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);
  if (e.length === 0) {
    if (t.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);
    if (n.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`);
  }
  im(e, t, n);
}
function ni(n, t, e) {
  const s = t.shape.length, o = s > 1 ? t.shape[s - 1] : 1, r = e.length;
  let i = 1;
  for (let d = o; d < r; ++d)
    i *= e[d];
  const a = o < 1 ? 1 : o, l = X(t.shape) / a, c = [...dt(e.slice(0, o)), 1], u = X(e);
  return { sliceRank: o, numUpdates: l, sliceSize: i, strides: c, outputSize: u };
}
const Y8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  calculateShapes: ni,
  validateInput: E1,
  validateUpdateShape: im
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function d$(n, t) {
  if (t == null)
    return n.shape.slice();
  if ($t(n.shape, t))
    return t;
  if (n.shape.length === t.length) {
    const e = [];
    for (let s = 0; s < n.shape.length; s++)
      t[s] == null && n.shape[s] != null ? e.push(n.shape[s]) : e.push(t[s]);
    return e;
  }
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h$(n, t, e, s) {
  const o = T(n, "x", "dropout");
  if (k(o.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${o.dtype} tensor instead.`), k(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`), t === 0)
    return n instanceof Mt ? o.clone() : o;
  const r = d$(o, e), i = 1 - t, a = ut(Ju(U(ed(r, 0, 1, "float32", s), i)), i);
  return G(o, a);
}
const p$ = /* @__PURE__ */ D({ dropout_: h$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f$(n) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function G1(n, t, e) {
  const s = 1 - n % 2, o = new Float32Array(n);
  for (let r = 0; r < n; ++r) {
    const i = 2 * Math.PI * r / (n + s - 1);
    o[r] = t - e * Math.cos(i);
  }
  return sn(o, "float32");
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m$(n, t, e, s, o, r = "NHWC", i) {
  let a = n;
  n.rank === 3 && (a = M(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = M(t, [1, t.shape[0], t.shape[1], t.shape[2]])), k(a.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`), k(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), k(e.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);
  const c = r === "NHWC" ? a.shape[3] : a.shape[1], u = r === "NHWC" ? l.shape[3] : l.shape[1];
  k(c === e[2], () => `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${e[2]}.`), k(u === e[3], () => `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${e[3]}).`), je("conv2dDerFilter", o, i);
  const d = { x: a, dy: l }, h = { strides: s, pad: o, dataFormat: r, dimRoundingMode: i, filterShape: e };
  return E.runKernel(Pp, d, h);
}
const am = /* @__PURE__ */ D({ conv2DBackpropFilter_: m$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lm(n, t, e) {
  if (e == null || e === "linear")
    return n;
  if (e === "relu")
    return G(n, dl(t));
  throw new Error(`Cannot compute gradient for fused activation ${e}.`);
}
function cm(n, t) {
  let e = t;
  const s = de(n.shape, t.shape);
  return s.length > 0 && (e = at(e, s)), M(e, n.shape);
}
function um(n, t, e, s) {
  if (t === "linear")
    return n;
  if (t === "relu")
    return Vs(n);
  if (t === "elu")
    return Qu(n);
  if (t === "relu6")
    return b1(n);
  if (t === "prelu")
    return qf(n, e);
  if (t === "leakyrelu")
    return Bf(n, s);
  if (t === "sigmoid")
    return qr(n);
  throw new Error(`Unknown fused activation ${t}.`);
}
const dm = (n, t) => !(n > 0) || t === "linear";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g$({ x: n, filter: t, strides: e, pad: s, dataFormat: o = "NHWC", dilations: r = [1, 1], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (l = l || "linear", dm(E.state.gradientDepth, l) === !1) {
    k(o === "NHWC", () => `Error in fused conv2d: got dataFormat of ${o} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let C = Uo(n, t, e, s, o, r, i);
    return a != null && (C = U(C, a)), um(C, l, c, u);
  }
  const d = T(n, "x", "conv2d", "float32"), h = T(t, "filter", "conv2d", "float32");
  let p = d, f = !1;
  d.rank === 3 && (f = !0, p = M(d, [1, d.shape[0], d.shape[1], d.shape[2]])), k(p.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`), k(h.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`), je("fused conv2d", s, i);
  const m = o === "NHWC" ? p.shape[3] : p.shape[1];
  k(h.shape[2] === m, () => `Error in conv2d: depth of input (${m}) must match input depth for filter ${h.shape[2]}.`), k(Fe(e, r), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`);
  const g = $e(p.shape, h.shape, e, r, s, i);
  let b;
  a != null && (b = T(a, "bias", "fused conv2d"), [b] = re(b, d), o === "NHWC" ? bt(g.outShape, b.shape) : (k(b.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`), k(b.shape.length === 0 || b.shape[0] === g.outChannels || b.shape[0] === 1, () => `Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let x;
  if (c != null) {
    const C = c.shape;
    if (k(C.length <= 1 || C.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${C.length}.`), C.length === 1)
      k(C[0] === 1 || C[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if (C.length === 3)
      try {
        bt(C, g.outShape);
      } catch {
        const S = `Error in fused conv2d: PReLU activation weights (${C}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
        throw Error(S);
      }
    x = T(c, "prelu weights", "fused conv2d");
  }
  const w = (C, v) => {
    k(o === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${o} but only NHWC is currently supported.`);
    const [S, N, R, $] = v, F = lm(C, R, l);
    k(Bo(r), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);
    const W = Af(N.shape, F, S, e, s), _ = am(N, F, S.shape, e, s), A = [W, _];
    if ($ != null) {
      const O = cm($, F);
      A.push(O);
    }
    return A;
  }, y = {
    x: p,
    filter: h,
    bias: b,
    preluActivationWeights: x
  }, I = {
    strides: e,
    pad: s,
    dataFormat: o,
    dilations: r,
    dimRoundingMode: i,
    activation: l,
    leakyreluAlpha: u
  };
  return a == null ? Qo((v, S, N) => {
    let R = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      E.runKernel(pc, y, I)
    );
    return N([S, v, R]), f && (R = M(R, [R.shape[1], R.shape[2], R.shape[3]])), { value: R, gradFunc: w };
  })(p, h) : Qo((v, S, N, R) => {
    let $ = E.runKernel(pc, y, I);
    return R([S, v, $, N]), f && ($ = M($, [$.shape[1], $.shape[2], $.shape[3]])), { value: $, gradFunc: w };
  })(p, h, b);
}
const b$ = /* @__PURE__ */ D({ fusedConv2d_: g$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x$(n, t, e, s, o, r = [1, 1], i) {
  let a = n;
  n.rank === 3 && (a = M(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = M(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { x: a, dy: l }, u = { strides: s, pad: o, dimRoundingMode: i, dilations: r, filterShape: e };
  return E.runKernel(Qp, c, u);
}
const y$ = D({ depthwiseConv2dNativeBackpropFilter_: x$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w$(n, t, e, s, o, r = [1, 1], i) {
  let a = t, l = !1;
  t.rank === 3 && (l = !0, a = M(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { dy: a, filter: e }, u = { strides: s, pad: o, dimRoundingMode: i, dilations: r, inputShape: n }, d = (
    // tslint:disable-next-line: no-unnecessary-type-assertion
    E.runKernel(jp, c, u)
  );
  return l ? M(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const I$ = D({ depthwiseConv2dNativeBackpropInput_: w$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C$({ a: n, b: t, transposeA: e = !1, transposeB: s = !1, bias: o, activation: r = "linear", preluActivationWeights: i, leakyreluAlpha: a = 0.2 }) {
  if (dm(E.state.gradientDepth, r) === !1) {
    let $ = Gt(n, t, e, s);
    return o != null && ($ = U($, o)), um($, r, i, a);
  }
  let l = T(n, "a", "fused matMul"), c = T(t, "b", "fused matMul");
  [l, c] = re(l, c);
  const u = e ? l.shape[l.rank - 2] : l.shape[l.rank - 1], d = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2], h = e ? l.shape[l.rank - 1] : l.shape[l.rank - 2], p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1], f = l.shape.slice(0, -2), m = c.shape.slice(0, -2), g = X(f), b = X(m);
  k(u === d, () => `Error in fused matMul: inner shapes (${u}) and (${d}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const w = bt(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([h, p]), y = e ? M(l, [g, u, h]) : M(l, [g, h, u]), I = s ? M(c, [b, p, d]) : M(c, [b, d, p]);
  let C;
  o != null && (C = T(o, "bias", "fused matMul"), [C] = re(C, l), bt(w, C.shape));
  let v;
  i != null && (v = T(i, "prelu weights", "fused matMul"));
  const S = ($, F) => {
    const [W, _, A, O] = F, K = lm(M($, A.shape), A, r);
    let Z, B;
    if (!e && !s ? (Z = Gt(K, _, !1, !0), B = Gt(W, K, !0, !1)) : !e && s ? (Z = Gt(K, _, !1, !1), B = Gt(K, W, !0, !1)) : e && !s ? (Z = Gt(_, K, !1, !0), B = Gt(W, K, !1, !1)) : (Z = Gt(_, K, !0, !0), B = Gt(K, W, !0, !0)), o != null) {
      const Y = cm(O, K);
      return [Z, B, Y];
    } else
      return [Z, B];
  }, N = {
    a: y,
    b: I,
    bias: C,
    preluActivationWeights: v
  }, R = { transposeA: e, transposeB: s, activation: r, leakyreluAlpha: a };
  return o == null ? Qo((F, W, _) => {
    const A = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      E.runKernel(hc, N, R)
    );
    return _([F, W, A]), { value: M(A, w), gradFunc: S };
  })(y, I) : Qo((F, W, _, A) => {
    const O = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      E.runKernel(hc, N, R)
    );
    return A([F, W, O, _]), { value: M(O, w), gradFunc: S };
  })(y, I, C);
}
const Jg = /* @__PURE__ */ D({ fusedMatMul_: C$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v$(n) {
  return G1(n, 0.54, 0.46);
}
const k$ = /* @__PURE__ */ D({ hammingWindow_: v$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S$(n) {
  return G1(n, 0.5, 0.5);
}
const L1 = /* @__PURE__ */ D({ hannWindow_: S$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function T$(n, t, e, s = !1, o = 0) {
  let r = 0;
  const i = [];
  for (; r + t <= n.size; )
    i.push(Wt(n, r, t)), r += e;
  if (s)
    for (; r < n.size; ) {
      const a = r + t - n.size, l = ze([
        Wt(n, r, t - a),
        ll([a], o)
      ]);
      i.push(l), r += e;
    }
  return i.length === 0 ? ic([], [0, t]) : M(ze(i), [i.length, t]);
}
const D1 = /* @__PURE__ */ D({ frame_: T$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N$(n, t, e, s, o = L1) {
  s == null && (s = f$(t));
  const r = D1(n, t, e), i = G(r, o(t));
  return rm(i, s);
}
const R$ = /* @__PURE__ */ D({ stft_: N$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $$(n, t, e, s, o = "bilinear", r = 0) {
  const i = T(n, "image", "cropAndResize"), a = T(t, "boxes", "cropAndResize", "float32"), l = T(e, "boxInd", "cropAndResize", "int32"), c = a.shape[0];
  k(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), k(a.rank === 2 && a.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`), k(l.rank === 1 && l.shape[0] === c, () => `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`), k(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), k(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), k(o === "bilinear" || o === "nearest", () => `method must be bilinear or nearest, but was ${o}`);
  const u = { image: i, boxes: a, boxInd: l }, d = { method: o, extrapolationValue: r, cropSize: s };
  return E.runKernel(Hp, u, d);
}
const E$ = /* @__PURE__ */ D({ cropAndResize_: $$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G$(n) {
  const t = T(n, "image", "flipLeftRight", "float32");
  k(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);
  const e = { image: t };
  return E.runKernel(ef, e, {});
}
const L$ = /* @__PURE__ */ D({ flipLeftRight_: G$ });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D$(n) {
  const t = T(n, "image", "grayscaleToRGB"), e = t.rank - 1, s = t.shape[e];
  k(t.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`), k(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
  const o = new Array(t.rank);
  return o.fill(1, 0, e), o[e] = 3, Un(t, o);
}
const M$ = /* @__PURE__ */ D({ grayscaleToRGB_: D$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function z$(n, t, e = 0, s = 0.5) {
  const o = T(n, "image", "rotateWithOffset", "float32");
  k(o.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${o.rank}.`);
  const r = { image: o }, i = { radians: t, fillValue: e, center: s };
  return E.runKernel(Nf, r, i);
}
const F$ = /* @__PURE__ */ D({ rotateWithOffset_: z$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function si(n, t, e, s, o, r) {
  s == null && (s = 0.5), o == null && (o = Number.NEGATIVE_INFINITY), r == null && (r = 0);
  const i = n.shape[0];
  return e = Math.min(e, i), k(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), k(n.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`), k(n.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`), k(t.rank === 1, () => "scores must be a 1D tensor"), k(t.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`), k(0 <= r && r <= 1, () => `softNmsSigma must be in [0, 1], but was '${r}'`), { maxOutputSize: e, iouThreshold: s, scoreThreshold: o, softNmsSigma: r };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W$(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY) {
  const r = T(n, "boxes", "nonMaxSuppression", "float32"), i = T(t, "scores", "nonMaxSuppression", "float32"), a = si(r, i, e, s, o);
  e = a.maxOutputSize, s = a.iouThreshold, o = a.scoreThreshold;
  const l = { maxOutputSize: e, iouThreshold: s, scoreThreshold: o };
  return E.runKernel(lf, { boxes: r, scores: i }, l);
}
const V$ = /* @__PURE__ */ D({ nonMaxSuppression_: W$ });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _$(n, t, e) {
  const s = A$(n, t, e), o = s < 0 ? -(s + 1) : s;
  n.splice(o, 0, t);
}
function A$(n, t, e) {
  return X$(n, t, e || O$);
}
function O$(n, t) {
  return n > t ? 1 : n < t ? -1 : 0;
}
function X$(n, t, e) {
  let s = 0, o = n.length, r = 0, i = !1;
  for (; s < o; ) {
    r = s + (o - s >>> 1);
    const a = e(t, n[r]);
    a > 0 ? s = r + 1 : (o = r, i = !a);
  }
  return i ? s : -s - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hm(n, t, e, s, o) {
  return mm(
    n,
    t,
    e,
    s,
    o,
    0
    /* softNmsSigma */
  );
}
function pm(n, t, e, s, o, r) {
  return mm(
    n,
    t,
    e,
    s,
    o,
    0,
    !1,
    r,
    !0
    /* returnValidOutputs */
  );
}
function fm(n, t, e, s, o, r) {
  return mm(
    n,
    t,
    e,
    s,
    o,
    r,
    !0
    /* returnScoresTensor */
  );
}
function mm(n, t, e, s, o, r, i = !1, a = !1, l = !1) {
  const c = [];
  for (let g = 0; g < t.length; g++)
    t[g] > o && c.push({ score: t[g], boxIndex: g, suppressBeginIndex: 0 });
  c.sort(qg);
  const u = r > 0 ? -0.5 / r : 0, d = [], h = [];
  for (; d.length < e && c.length > 0; ) {
    const g = c.pop(), { score: b, boxIndex: x, suppressBeginIndex: w } = g;
    if (b < o)
      break;
    let y = !1;
    for (let I = d.length - 1; I >= w; --I) {
      const C = P$(n, x, d[I]);
      if (C >= s) {
        y = !0;
        break;
      }
      if (g.score = g.score * Z$(s, u, C), g.score <= o)
        break;
    }
    g.suppressBeginIndex = d.length, y || (g.score === b ? (d.push(x), h.push(g.score)) : g.score > o && _$(c, g, qg));
  }
  const p = d.length, f = e - p;
  a && f > 0 && (d.push(...new Array(f).fill(0)), h.push(...new Array(f).fill(0)));
  const m = { selectedIndices: d };
  return i && (m.selectedScores = h), l && (m.validOutputs = p), m;
}
function P$(n, t, e) {
  const s = n.subarray(t * 4, t * 4 + 4), o = n.subarray(e * 4, e * 4 + 4), r = Math.min(s[0], s[2]), i = Math.min(s[1], s[3]), a = Math.max(s[0], s[2]), l = Math.max(s[1], s[3]), c = Math.min(o[0], o[2]), u = Math.min(o[1], o[3]), d = Math.max(o[0], o[2]), h = Math.max(o[1], o[3]), p = (a - r) * (l - i), f = (d - c) * (h - u);
  if (p <= 0 || f <= 0)
    return 0;
  const m = Math.max(r, c), g = Math.max(i, u), b = Math.min(a, d), x = Math.min(l, h), w = Math.max(b - m, 0) * Math.max(x - g, 0);
  return w / (p + f - w);
}
function Z$(n, t, e) {
  const s = Math.exp(t * e * e);
  return e <= n ? s : 0;
}
function qg(n, t) {
  return n.score - t.score || n.score === t.score && t.boxIndex - n.boxIndex;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function K$(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY) {
  const r = T(n, "boxes", "nonMaxSuppressionAsync"), i = T(t, "scores", "nonMaxSuppressionAsync"), a = si(r, i, e, s, o);
  e = a.maxOutputSize, s = a.iouThreshold, o = a.scoreThreshold;
  const l = await Promise.all([r.data(), i.data()]), c = l[0], u = l[1], { selectedIndices: d } = hm(c, u, e, s, o);
  return r !== n && r.dispose(), i !== t && i.dispose(), sn(d, "int32");
}
const B$ = K$;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H$(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = 0) {
  const i = T(n, "boxes", "nonMaxSuppression"), a = T(t, "scores", "nonMaxSuppression"), l = si(i, a, e, s, o, r);
  e = l.maxOutputSize, s = l.iouThreshold, o = l.scoreThreshold, r = l.softNmsSigma;
  const c = { boxes: i, scores: a }, u = { maxOutputSize: e, iouThreshold: s, scoreThreshold: o, softNmsSigma: r }, d = E.runKernel(uf, c, u);
  return { selectedIndices: d[0], selectedScores: d[1] };
}
const U$ = /* @__PURE__ */ D({ nonMaxSuppressionWithScore_: H$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function Y$(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = 0) {
  const i = T(n, "boxes", "nonMaxSuppressionAsync"), a = T(t, "scores", "nonMaxSuppressionAsync"), l = si(i, a, e, s, o, r);
  e = l.maxOutputSize, s = l.iouThreshold, o = l.scoreThreshold, r = l.softNmsSigma;
  const c = await Promise.all([i.data(), a.data()]), u = c[0], d = c[1], { selectedIndices: h, selectedScores: p } = fm(u, d, e, s, o, r);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: sn(h, "int32"),
    selectedScores: sn(p)
  };
}
const Q$ = Y$;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j$(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = !1) {
  const i = T(n, "boxes", "nonMaxSuppression"), a = T(t, "scores", "nonMaxSuppression"), l = si(
    i,
    a,
    e,
    s,
    o,
    null
    /* softNmsSigma */
  ), c = l.maxOutputSize, u = l.iouThreshold, d = l.scoreThreshold, h = { boxes: i, scores: a }, p = {
    maxOutputSize: c,
    iouThreshold: u,
    scoreThreshold: d,
    padToMaxOutputSize: r
  }, f = E.runKernel(cf, h, p);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
const J$ = /* @__PURE__ */ D({ nonMaxSuppressionPadded_: j$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function q$(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = !1) {
  const i = T(n, "boxes", "nonMaxSuppressionAsync"), a = T(t, "scores", "nonMaxSuppressionAsync"), l = si(
    i,
    a,
    e,
    s,
    o,
    null
    /* softNmsSigma */
  ), c = l.maxOutputSize, u = l.iouThreshold, d = l.scoreThreshold, [h, p] = await Promise.all([i.data(), a.data()]), { selectedIndices: f, validOutputs: m } = pm(h, p, c, u, d, r);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: sn(f, "int32"),
    validOutputs: gt(m, "int32")
  };
}
const tE = q$;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eE(n, t, e = !1, s = !1) {
  const o = T(n, "images", "resizeBilinear");
  k(o.rank === 3 || o.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${o.rank}.`), k(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`), k(s === !1 || e === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let r = o, i = !1;
  o.rank === 3 && (i = !0, r = M(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  const a = { images: r }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = E.runKernel(Wu, a, l);
  return i ? M(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const M1 = /* @__PURE__ */ D({ resizeBilinear_: eE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nE(n, t, e = !1, s = !1) {
  const o = T(n, "images", "resizeNearestNeighbor");
  k(o.rank === 3 || o.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${o.rank}.`), k(t.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`), k(o.dtype === "float32" || o.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), k(s === !1 || e === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let r = o, i = !1;
  o.rank === 3 && (i = !0, r = M(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  const a = { images: r }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = E.runKernel(Fu, a, l);
  return i ? M(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const z1 = /* @__PURE__ */ D({ resizeNearestNeighbor_: nE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sE(n, t = "binary", e = !1, s = 0.5) {
  const o = T(n, "image", "threshold"), r = 0.2989, i = 0.587, a = 0.114, l = o.shape[0] * o.shape[1];
  let c = G(sn([s]), 255), u, d, h, p;
  if (k(o.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${o.rank}.`), k(o.shape[2] === 3 || o.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${o.shape[2]}.`), k(o.dtype === "int32" || o.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${o.dtype}.`), k(t === "otsu" || t === "binary", () => `Method must be binary or otsu, but was ${t}`), o.shape[2] === 3) {
    [u, d, h] = yn(o, [1, 1, 1], -1);
    const g = G(u, r), b = G(d, i), x = G(h, a);
    p = U(U(g, b), x);
  } else
    p = n;
  if (t === "otsu") {
    const g = tT(et(x1(p), "int32"), De([]), 256);
    c = oE(g, l);
  }
  const f = e ? ti(p, c) : dn(p, c);
  return et(G(f, 255), "int32");
}
function oE(n, t) {
  let e = sn([-1]), s = sn([0]), o = sn([0]), r, i, a, l, c, u;
  for (let d = 0; d < n.size - 1; d++) {
    r = Wt(n, 0, d + 1), i = Wt(n, d + 1), c = ut(at(r), t), u = ut(at(i), t);
    const h = at(G(r, Zi(0, r.size)));
    a = ut(h, at(r));
    const p = ll(i.shape, r.size), f = U(Zi(0, i.size), p), m = G(i, f);
    l = ut(at(m), at(i));
    const g = lt(a, l), b = lt(a, l), x = G(c, u);
    o = G(G(x, g), b);
    const w = dn(o, s);
    s = Ue(w, o, s), e = Ue(w, sn([d]), e);
  }
  return e;
}
const rE = /* @__PURE__ */ D({ threshold_: sE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iE(n, t, e = "nearest", s = "constant", o = 0, r) {
  const i = T(n, "image", "transform", "float32"), a = T(t, "transforms", "transform", "float32");
  k(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), k(a.rank === 2 && (a.shape[0] === i.shape[0] || a.shape[0] === 1) && a.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), k(r == null || r.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${r}.`);
  const l = { image: i, transforms: a }, c = { interpolation: e, fillMode: s, fillValue: o, outputShape: r };
  return E.runKernel(Sf, l, c);
}
const aE = /* @__PURE__ */ D({ transform_: iE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lE(n, t, e) {
  k(t % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t}.`), k(e % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${e}.`);
  const s = T(n, "a", "bandPart");
  k(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
  const o = s.shape, [r, i] = s.shape.slice(-2);
  if (!(t <= r))
    throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`);
  if (!(e <= i))
    throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);
  t < 0 && (t = r), e < 0 && (e = i);
  const a = M(Zi(0, r, 1, "int32"), [-1, 1]), l = Zi(0, i, 1, "int32"), c = lt(a, l), u = xs(ti(c, gt(+t, "int32")), cr(c, gt(-e, "int32"))), d = ye([r, i], s.dtype);
  return M(ys(Jo(M(s, [-1, r, i])).map((h) => Ue(u, h, d))), o);
}
const cE = /* @__PURE__ */ D({ bandPart_: lE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uE(n) {
  let t;
  if (Array.isArray(n)) {
    t = !1, k(n != null && n.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const o = n[0].shape[0];
    for (let r = 1; r < n.length; ++r)
      k(n[r].shape[0] === o, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[r].shape[0]} vs. ${o})`);
  } else
    t = !0, n = yn(n, n.shape[0], 0).map((o) => ul(o, [0]));
  k(n.length <= n[0].shape[0], () => `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);
  const e = [], s = n;
  for (let o = 0; o < n.length; ++o)
    e.push(E.tidy(() => {
      let r = s[o];
      if (o > 0)
        for (let i = 0; i < o; ++i) {
          const a = G(at(G(e[i], r)), e[i]);
          r = lt(r, a);
        }
      return ut(r, ju(r, "euclidean"));
    }));
  return t ? ys(e, 0) : e;
}
const dE = /* @__PURE__ */ D({ gramSchmidt_: uE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hE(n, t = !1) {
  if (k(n.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`), n.rank === 2)
    return t0(n, t);
  {
    const e = n.shape.slice(0, n.shape.length - 2).reduce((l, c) => l * c), s = Jo(M(n, [
      e,
      n.shape[n.shape.length - 2],
      n.shape[n.shape.length - 1]
    ]), 0), o = [], r = [];
    s.forEach((l) => {
      const [c, u] = t0(l, t);
      o.push(c), r.push(u);
    });
    const i = M(ys(o, 0), n.shape), a = M(ys(r, 0), n.shape);
    return [i, a];
  }
}
function t0(n, t = !1) {
  return E.tidy(() => {
    k(n.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);
    const e = n.shape[0], s = n.shape[1];
    let o = d1(e), r = _o(n);
    const i = ic([[1]], [1, 1]);
    let a = _o(i);
    const l = e >= s ? s : e;
    for (let c = 0; c < l; ++c) {
      const u = r, d = a, h = o;
      [a, r, o] = E.tidy(() => {
        const p = Wt(r, [c, c], [e - c, 1]), f = ju(p), m = Wt(r, [c, c], [1, 1]), g = Ue(dn(m, 0), ic([[-1]]), ic([[1]])), b = lt(m, G(g, f)), x = ut(p, b);
        x.shape[0] === 1 ? a = _o(i) : a = ze([
          i,
          Wt(x, [1, 0], [x.shape[0] - 1, x.shape[1]])
        ], 0);
        const w = ee(ut(Gt(g, b), f)), y = Wt(r, [c, 0], [e - c, s]), I = G(w, a), C = St(a);
        if (c === 0)
          r = lt(y, Gt(I, Gt(C, y)));
        else {
          const N = lt(y, Gt(I, Gt(C, y)));
          r = ze([Wt(r, [0, 0], [c, s]), N], 0);
        }
        const v = St(I), S = Wt(o, [0, c], [e, o.shape[1] - c]);
        if (c === 0)
          o = lt(S, Gt(Gt(S, a), v));
        else {
          const N = lt(S, Gt(Gt(S, a), v));
          o = ze([Wt(o, [0, 0], [e, c]), N], 1);
        }
        return [a, r, o];
      }), yt([u, d, h]);
    }
    return !t && e > s && (o = Wt(o, [0, 0], [e, s]), r = Wt(r, [0, 0], [s, s])), [o, r];
  });
}
const pE = /* @__PURE__ */ D({ qr_: hE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Be;
(function(n) {
  n[n.NONE = 0] = "NONE", n[n.MEAN = 1] = "MEAN", n[n.SUM = 2] = "SUM", n[n.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Be || (Be = {}));
function fE(n, t, e = Be.SUM_BY_NONZERO_WEIGHTS) {
  const s = T(n, "losses", "computeWeightedLoss");
  let o = null;
  t != null && (o = T(t, "weights", "computeWeightedLoss"));
  const r = o == null ? s : G(s, o);
  if (e === Be.NONE)
    return r;
  if (e === Be.SUM)
    return at(r);
  if (e === Be.MEAN) {
    if (o == null)
      return ie(r);
    {
      const i = s.size / o.size, a = ut(at(r), at(o));
      return i > 1 ? ut(a, gt(i)) : a;
    }
  }
  if (e === Be.SUM_BY_NONZERO_WEIGHTS) {
    if (o == null)
      return ut(at(r), gt(s.size));
    {
      const i = G(o, xo(s.shape)), a = et(at(Pi(i, gt(0))), "float32");
      return ut(at(r), a);
    }
  }
  throw Error(`Unknown reduction: ${e}`);
}
const _s = /* @__PURE__ */ D({ computeWeightedLoss_: fE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mE(n, t, e, s = Be.SUM_BY_NONZERO_WEIGHTS) {
  const o = T(n, "labels", "absoluteDifference"), r = T(t, "predictions", "absoluteDifference");
  let i = null;
  e != null && (i = T(e, "weights", "absoluteDifference")), Xe(o.shape, r.shape, "Error in absoluteDifference: ");
  const a = be(lt(o, r));
  return _s(a, i, s);
}
const gE = /* @__PURE__ */ D({ absoluteDifference_: mE });
function bE(n, t, e, s, o = Be.SUM_BY_NONZERO_WEIGHTS) {
  const r = T(n, "labels", "cosineDistance"), i = T(t, "predictions", "cosineDistance");
  let a = null;
  s != null && (a = T(s, "weights", "cosineDistance")), Xe(r.shape, i.shape, "Error in cosineDistance: ");
  const l = gt(1), c = lt(l, at(G(r, i), e, !0));
  return _s(c, a, o);
}
const xE = /* @__PURE__ */ D({ cosineDistance_: bE });
function yE(n, t, e, s = Be.SUM_BY_NONZERO_WEIGHTS) {
  let o = T(n, "labels", "hingeLoss");
  const r = T(t, "predictions", "hingeLoss");
  let i = null;
  e != null && (i = T(e, "weights", "hingeLoss")), Xe(o.shape, r.shape, "Error in hingeLoss: ");
  const a = gt(1);
  o = lt(G(gt(2), o), a);
  const l = Vs(lt(a, G(o, r)));
  return _s(l, i, s);
}
const wE = /* @__PURE__ */ D({ hingeLoss_: yE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IE(n, t, e, s = 1, o = Be.SUM_BY_NONZERO_WEIGHTS) {
  const r = T(n, "labels", "huberLoss"), i = T(t, "predictions", "huberLoss");
  let a = null;
  e != null && (a = T(e, "weights", "huberLoss")), Xe(r.shape, i.shape, "Error in huberLoss: ");
  const l = gt(s), c = be(lt(i, r)), u = td(c, l), d = lt(c, u), h = U(G(gt(0.5), Pt(u)), G(l, d));
  return _s(h, a, o);
}
const CE = /* @__PURE__ */ D({ huberLoss_: IE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vE(n, t, e, s = 1e-7, o = Be.SUM_BY_NONZERO_WEIGHTS) {
  const r = T(n, "labels", "logLoss"), i = T(t, "predictions", "logLoss");
  let a = null;
  e != null && (a = T(e, "weights", "logLoss")), Xe(r.shape, i.shape, "Error in logLoss: ");
  const l = gt(1), c = gt(s), u = ee(G(r, Wn(U(i, c)))), d = G(lt(l, r), Wn(U(lt(l, i), c))), h = lt(u, d);
  return _s(h, a, o);
}
const kE = /* @__PURE__ */ D({ logLoss_: vE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SE(n, t, e, s = Be.SUM_BY_NONZERO_WEIGHTS) {
  const o = T(n, "labels", "meanSquaredError"), r = T(t, "predictions", "meanSquaredError");
  let i = null;
  e != null && (i = T(e, "weights", "meanSquaredError")), Xe(o.shape, r.shape, "Error in meanSquaredError: ");
  const a = T1(o, r);
  return _s(a, i, s);
}
const TE = /* @__PURE__ */ D({ meanSquaredError_: SE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NE(n, t) {
  const e = T(n, "labels", "sigmoidCrossEntropyWithLogits"), s = T(t, "logits", "sigmoidCrossEntropyWithLogits");
  Xe(e.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  const o = Vs(s), r = G(s, e), i = Hf(Fn(ee(be(s))));
  return U(lt(o, r), i);
}
function RE(n, t, e, s = 0, o = Be.SUM_BY_NONZERO_WEIGHTS) {
  let r = T(n, "multiClassLabels", "sigmoidCrossEntropy");
  const i = T(t, "logits", "sigmoidCrossEntropy");
  let a = null;
  if (e != null && (a = T(e, "weights", "sigmoidCrossEntropy")), Xe(r.shape, i.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
    const c = gt(s), u = gt(1), d = gt(0.5);
    r = U(G(r, lt(u, c)), G(d, c));
  }
  const l = NE(r, i);
  return _s(l, a, o);
}
const $E = /* @__PURE__ */ D({ sigmoidCrossEntropy_: RE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EE(n, t, e = -1) {
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);
  return Qo((o, r, i) => {
    const l = f1(r, [e], !0), c = lt(et(r, "float32"), l);
    i([o, c]);
    const u = ee(G(c, o));
    return { value: at(u, [e]), gradFunc: (p, f) => {
      const [m, g] = f, b = le(p.shape, [e]);
      return [
        G(M(p, b), lt(et(m, "float32"), Fn(g))),
        G(M(p, b), lt(Fn(g), et(m, "float32")))
      ];
    } };
  })(n, t);
}
function GE(n, t, e, s = 0, o = Be.SUM_BY_NONZERO_WEIGHTS) {
  let r = T(n, "onehotLabels", "softmaxCrossEntropy");
  const i = T(t, "logits", "softmaxCrossEntropy");
  let a = null;
  if (e != null && (a = T(e, "weights", "softmaxCrossEntropy")), Xe(r.shape, i.shape, "Error in softmaxCrossEntropy: "), s > 0) {
    const c = gt(s), u = gt(1), d = gt(r.shape[1]);
    r = U(G(r, lt(u, c)), ut(c, d));
  }
  const l = EE(r, i);
  return _s(l, a, o);
}
const LE = /* @__PURE__ */ D({ softmaxCrossEntropy_: GE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DE(n, t, e, s) {
  const o = T(n, "indices", "sparseFillEmptyRows", "int32"), r = T(t, "values", "sparseFillEmptyRows"), i = T(e, "denseShape", "sparseFillEmptyRows", "int32"), a = T(s, "defaultValue", "sparseFillEmptyRows", r.dtype);
  if (o.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${r.shape}`);
  if (i.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);
  if (a.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${a.shape}`);
  const l = {
    indices: o,
    values: r,
    denseShape: i,
    defaultValue: a
  }, c = E.runKernel(mf, l);
  return {
    outputIndices: c[0],
    outputValues: c[1],
    emptyRowIndicator: c[2],
    reverseIndexMap: c[3]
  };
}
const ME = /* @__PURE__ */ D({ sparseFillEmptyRows_: DE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zE(n, t, e) {
  const s = T(n, "inputIndices", "sparseReshape", "int32"), o = T(t, "inputShape", "sparseReshape", "int32"), r = T(e, "newShape", "sparseReshape", "int32");
  if (s.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
  if (o.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${r.shape}`);
  const i = {
    inputIndices: s,
    inputShape: o,
    newShape: r
  }, a = E.runKernel(gf, i);
  return { outputIndices: a[0], outputShape: a[1] };
}
const FE = /* @__PURE__ */ D({ sparseReshape_: zE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WE(n, t, e) {
  const s = T(n, "data", "sparseSegmentMean"), o = T(t, "indices", "sparseSegmentMean", "int32"), r = T(e, "segmentIds", "sparseSegmentMean", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${r.shape}`);
  const i = {
    data: s,
    indices: o,
    segmentIds: r
  };
  return E.runKernel(bf, i);
}
const VE = /* @__PURE__ */ D({ sparseSegmentMean_: WE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _E(n, t, e) {
  const s = T(n, "data", "sparseSegmentSum"), o = T(t, "indices", "sparseSegmentSum", "int32"), r = T(e, "segmentIds", "sparseSegmentSum", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${r.shape}`);
  const i = {
    data: s,
    indices: o,
    segmentIds: r
  };
  return E.runKernel(xf, i);
}
const AE = /* @__PURE__ */ D({ sparseSegmentSum_: _E });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OE(n, t, e, s, o, r, i, a) {
  const l = T(n, "data", "stringNGrams", "string");
  if (l.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${l.shape}`);
  const c = T(t, "dataSplits", "stringNGrams");
  if (c.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  const u = {
    separator: e,
    nGramWidths: s,
    leftPad: o,
    rightPad: r,
    padWidth: i,
    preserveShortSequences: a
  }, d = { data: l, dataSplits: c }, h = E.runKernel(If, d, u);
  return { nGrams: h[0], nGramsSplits: h[1] };
}
const XE = /* @__PURE__ */ D({ stringNGrams_: OE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PE(n, t, e = !0) {
  const s = T(n, "input", "stringSplit", "string"), o = T(t, "delimiter", "stringSplit", "string");
  if (s.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
  if (o.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${o.shape}`);
  const r = { skipEmpty: e }, i = { input: s, delimiter: o }, a = E.runKernel(Cf, i, r);
  return { indices: a[0], values: a[1], shape: a[2] };
}
const ZE = /* @__PURE__ */ D({ stringSplit_: PE });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KE(n, t) {
  const e = T(n, "input", "stringToHashBucketFast", "string"), s = { numBuckets: t };
  if (t <= 0)
    throw new Error("Number of buckets must be at least 1");
  const o = { input: e };
  return E.runKernel(vf, o, s);
}
const BE = /* @__PURE__ */ D({ stringToHashBucketFast_: KE });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q8 = {
  fft: om,
  ifft: Ic,
  rfft: rm,
  irfft: S1
}, j8 = {
  hammingWindow: k$,
  hannWindow: L1,
  frame: D1,
  stft: R$
}, Mo = {
  flipLeftRight: L$,
  grayscaleToRGB: M$,
  resizeNearestNeighbor: z1,
  resizeBilinear: M1,
  rotateWithOffset: F$,
  cropAndResize: E$,
  nonMaxSuppression: V$,
  nonMaxSuppressionAsync: B$,
  nonMaxSuppressionWithScore: U$,
  nonMaxSuppressionWithScoreAsync: Q$,
  nonMaxSuppressionPadded: J$,
  nonMaxSuppressionPaddedAsync: tE,
  threshold: rE,
  transform: aE
}, HE = {
  bandPart: cE,
  gramSchmidt: dE,
  qr: pE
}, J8 = {
  absoluteDifference: gE,
  computeWeightedLoss: _s,
  cosineDistance: xE,
  hingeLoss: wE,
  huberLoss: CE,
  logLoss: kE,
  meanSquaredError: TE,
  sigmoidCrossEntropy: $E,
  softmaxCrossEntropy: LE
}, q8 = {
  sparseFillEmptyRows: ME,
  sparseReshape: FE,
  sparseSegmentMean: VE,
  sparseSegmentSum: AE
}, t6 = {
  stringNGrams: XE,
  stringSplit: ZE,
  stringToHashBucketFast: BE
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class dr {
  /**
   * Return the class name for this class to use in serialization contexts.
   *
   * Generally speaking this will be the same thing that constructor.name
   * would have returned.  However, the class name needs to be robust
   * against minification for serialization/deserialization to work properly.
   *
   * There's also places such as initializers.VarianceScaling, where
   * implementation details between different languages led to different
   * class hierarchies and a non-leaf node is used for serialization purposes.
   */
  getClassName() {
    return this.constructor.className;
  }
  /**
   * Creates an instance of T from a ConfigDict.
   *
   * This works for most descendants of serializable.  A few need to
   * provide special handling.
   * @param cls A Constructor for the class to instantiate.
   * @param config The Configuration for the object.
   */
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e);
  }
}
class mn {
  constructor() {
    this.classNameMap = {};
  }
  /**
   * Returns the singleton instance of the map.
   */
  static getMap() {
    return mn.instance == null && (mn.instance = new mn()), mn.instance;
  }
  /**
   * Registers the class as serializable.
   */
  static register(t) {
    mn.getMap().classNameMap[t.className] = [t, t.fromConfig];
  }
}
function H(n) {
  k(n.className != null, () => "Class being registered does not have the static className property defined."), k(typeof n.className == "string", () => "className is required to be a string, but got type " + typeof n.className), k(n.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), mn.register(n);
}
const e6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Serializable: dr,
  SerializationMap: mn,
  registerClass: H
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class yo extends dr {
  /**
   * Executes `f()` and minimizes the scalar output of `f()` by computing
   * gradients of y with respect to the list of trainable variables provided by
   * `varList`. If no list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to minimize.
   * @param returnCost Whether to return the scalar cost value produced by
   * executing `f()`.
   * @param varList An optional list of variables to update. If specified, only
   * the trainable variables in varList will be updated by minimize. Defaults to
   * all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  minimize(t, e = !1, s) {
    const { value: o, grads: r } = this.computeGradients(t, s);
    if (s != null) {
      const i = s.map((a) => ({ name: a.name, tensor: r[a.name] }));
      this.applyGradients(i);
    } else
      this.applyGradients(r);
    return yt(r), e ? o : (o.dispose(), null);
  }
  /**
   * The number of iterations that this optimizer instance has been invoked for.
   */
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  /**
   * Executes f() and computes the gradient of the scalar output of f() with
   * respect to the list of trainable variables provided by `varList`. If no
   * list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to use for computing
   * gradients with respect to variables.
   * @param varList An optional list of variables to compute gradients with
   * respect to. If specified, only the trainable variables in varList will have
   * gradients computed with respect to. Defaults to all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  computeGradients(t, e) {
    return IN(t, e);
  }
  /**
   * Dispose the variables (if any) owned by this optimizer instance.
   */
  dispose() {
    this.iterations_ != null && yt(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), {
      name: "iter",
      // TODO(cais): Use 'int64' type when available.
      tensor: gt(this.iterations_, "int32")
    };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(t) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  /**
   * Extract the first element of the weight values and set it
   * as the iterations counter variable of this instance of optimizer.
   *
   * @param weightValues
   * @returns Weight values with the first element consumed and excluded.
   */
  async extractIterations(t) {
    return this.iterations_ = (await t[0].tensor.data())[0], t.slice(1);
  }
}
Object.defineProperty(yo, Symbol.hasInstance, {
  value: (n) => n.minimize != null && n.computeGradients != null && n.applyGradients != null
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class F1 extends yo {
  constructor(t, e, s = null) {
    super(), this.learningRate = t, this.rho = e, this.epsilon = s, this.accumulatedGrads = [], this.accumulatedUpdates = [], s == null && (this.epsilon = E.backend.epsilon());
  }
  /** @nocollapse */
  static get className() {
    return "Adadelta";
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = E.registeredVariables[s], i = !1;
      this.accumulatedGrads[o] == null && (this.accumulatedGrads[o] = {
        originalName: `${s}/accum_grad`,
        variable: z(() => Nt(r).variable(i))
      }), this.accumulatedUpdates[o] == null && (this.accumulatedUpdates[o] = {
        originalName: `${s}/accum_var`,
        variable: z(() => Nt(r).variable(i))
      });
      const a = Array.isArray(t) ? t[o].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedGrads[o].variable, c = this.accumulatedUpdates[o].variable;
      z(() => {
        const u = U(G(l, this.rho), G(Pt(a), 1 - this.rho)), d = G(ut(Ae(U(c, this.epsilon)), Ae(U(l, this.epsilon))), a), h = U(G(c, this.rho), G(Pt(d), 1 - this.rho));
        l.assign(u), c.assign(h);
        const p = U(G(d, -this.learningRate), r);
        r.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (yt(this.accumulatedGrads.map((t) => t.variable)), yt(this.accumulatedUpdates.map((t) => t.variable)));
  }
  async getWeights() {
    const t = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = t.length / 2, s = !1;
    this.accumulatedGrads = t.slice(0, e).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.accumulatedUpdates = t.slice(e, e * 2).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      rho: this.rho,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.rho, e.epsilon);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class W1 extends yo {
  constructor(t, e = 0.1) {
    super(), this.learningRate = t, this.initialAccumulatorValue = e, this.accumulatedGrads = [];
  }
  /** @nocollapse */
  static get className() {
    return "Adagrad";
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = E.registeredVariables[s];
      this.accumulatedGrads[o] == null && (this.accumulatedGrads[o] = {
        originalName: `${s}/accumulator`,
        variable: z(() => ll(r.shape, this.initialAccumulatorValue).variable(!1))
      });
      const i = Array.isArray(t) ? t[o].tensor : t[s];
      if (i == null)
        return;
      const a = this.accumulatedGrads[o].variable;
      z(() => {
        const l = U(a, Pt(i));
        a.assign(l);
        const c = U(G(ut(i, Ae(U(l, E.backend.epsilon()))), -this.learningRate), r);
        r.assign(c);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && yt(this.accumulatedGrads.map((t) => t.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulatedGrads = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      initialAccumulatorValue: this.initialAccumulatorValue
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.initialAccumulatorValue);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class V1 extends yo {
  constructor(t, e, s, o = null) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = o, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], z(() => {
      this.accBeta1 = gt(e).variable(), this.accBeta2 = gt(s).variable();
    }), o == null && (this.epsilon = E.backend.epsilon());
  }
  /** @nocollapse */
  static get className() {
    return "Adam";
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    z(() => {
      const s = lt(1, this.accBeta1), o = lt(1, this.accBeta2);
      e.forEach((r, i) => {
        const a = E.registeredVariables[r], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${r}/m`,
          variable: z(() => Nt(a).variable(l))
        }), this.accumulatedSecondMoment[i] == null && (this.accumulatedSecondMoment[i] = {
          originalName: `${r}/v`,
          variable: z(() => Nt(a).variable(l))
        });
        const c = Array.isArray(t) ? t[i].tensor : t[r];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, d = this.accumulatedSecondMoment[i].variable, h = U(G(u, this.beta1), G(c, 1 - this.beta1)), p = U(G(d, this.beta2), G(Pt(c), 1 - this.beta2)), f = ut(h, s), m = ut(p, o);
        u.assign(h), d.assign(p);
        const g = U(G(ut(f, U(Ae(m), this.epsilon)), -this.learningRate), a);
        a.assign(g);
      }), this.accBeta1.assign(G(this.accBeta1, this.beta1)), this.accBeta2.assign(G(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && yt(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedSecondMoment != null && yt(this.accumulatedSecondMoment.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t), z(() => {
      this.accBeta1.assign(Vr(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(Vr(this.beta2, this.iterations_ + 1));
    });
    const e = t.length / 2, s = !1;
    this.accumulatedFirstMoment = t.slice(0, e).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.accumulatedSecondMoment = t.slice(e, e * 2).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _1 extends yo {
  constructor(t, e, s, o = null, r = 0) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = o, this.decay = r, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], z(() => {
      this.iteration = gt(0).variable(), this.accBeta1 = gt(e).variable();
    }), o == null && (this.epsilon = E.backend.epsilon());
  }
  /** @nocollapse */
  static get className() {
    return "Adamax";
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    z(() => {
      const s = lt(1, this.accBeta1), o = ut(-this.learningRate, U(G(this.iteration, this.decay), 1));
      e.forEach((r, i) => {
        const a = E.registeredVariables[r], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${r}/m`,
          variable: Nt(a).variable(l)
        }), this.accumulatedWeightedInfNorm[i] == null && (this.accumulatedWeightedInfNorm[i] = {
          originalName: `${r}/v`,
          variable: Nt(a).variable(l)
        });
        const c = Array.isArray(t) ? t[i].tensor : t[r];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, d = this.accumulatedWeightedInfNorm[i].variable, h = U(G(u, this.beta1), G(c, 1 - this.beta1)), p = G(d, this.beta2), f = be(c), m = bo(p, f);
        u.assign(h), d.assign(m);
        const g = U(G(ut(o, s), ut(h, U(m, this.epsilon))), a);
        a.assign(g);
      }), this.iteration.assign(U(this.iteration, 1)), this.accBeta1.assign(G(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && yt(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedWeightedInfNorm != null && yt(this.accumulatedWeightedInfNorm.map((t) => t.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(t) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon,
      decay: this.decay
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class gm extends yo {
  constructor(t) {
    super(), this.learningRate = t, this.setLearningRate(t);
  }
  /** @nocollapse */
  static get className() {
    return "SGD";
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = Array.isArray(t) ? t[o].tensor : t[s];
      if (r == null)
        return;
      const i = E.registeredVariables[s];
      z(() => {
        const a = U(G(this.c, r), i);
        i.assign(a);
      });
    }), this.incrementIterations();
  }
  /**
   * Sets the learning rate of the optimizer.
   */
  setLearningRate(t) {
    this.learningRate = t, this.c != null && this.c.dispose(), this.c = xn(gt(-t));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(t) {
    if (t = await this.extractIterations(t), t.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class A1 extends gm {
  constructor(t, e, s = !1) {
    super(t), this.learningRate = t, this.momentum = e, this.useNesterov = s, this.accumulations = [], this.m = gt(this.momentum);
  }
  /** @nocollapse */
  // Name matters for Python compatibility.
  static get className() {
    return "Momentum";
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = E.registeredVariables[s];
      this.accumulations[o] == null && (this.accumulations[o] = {
        originalName: `${s}/momentum`,
        variable: z(() => Nt(r).variable(!1))
      });
      const i = this.accumulations[o].variable, a = Array.isArray(t) ? t[o].tensor : t[s];
      a != null && z(() => {
        let l;
        const c = U(G(this.m, i), a);
        this.useNesterov ? l = U(G(this.c, U(a, G(c, this.m))), r) : l = U(G(this.c, c), r), i.assign(c), r.assign(l);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && yt(this.accumulations.map((t) => t.variable));
  }
  /**
   * Sets the momentum of the optimizer.
   *
   * @param momentum
   */
  setMomentum(t) {
    this.momentum = t;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulations = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      momentum: this.momentum,
      useNesterov: this.useNesterov
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.momentum, e.useNesterov);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class O1 extends yo {
  constructor(t, e = 0.9, s = 0, o = null, r = !1) {
    if (super(), this.learningRate = t, this.decay = e, this.momentum = s, this.epsilon = o, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = r, o == null && (this.epsilon = E.backend.epsilon()), t == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  /** @nocollapse */
  static get className() {
    return "RMSProp";
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = E.registeredVariables[s], i = !1;
      this.accumulatedMeanSquares[o] == null && (this.accumulatedMeanSquares[o] = {
        originalName: `${s}/rms`,
        variable: z(() => Nt(r).variable(i))
      }), this.accumulatedMoments[o] == null && (this.accumulatedMoments[o] = {
        originalName: `${s}/momentum`,
        variable: z(() => Nt(r).variable(i))
      }), this.accumulatedMeanGrads[o] == null && this.centered && (this.accumulatedMeanGrads[o] = {
        originalName: `${s}/mg`,
        variable: z(() => Nt(r).variable(i))
      });
      const a = Array.isArray(t) ? t[o].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedMeanSquares[o].variable, c = this.accumulatedMoments[o].variable;
      z(() => {
        const u = U(G(l, this.decay), G(Pt(a), 1 - this.decay));
        if (this.centered) {
          const d = this.accumulatedMeanGrads[o].variable, h = U(G(d, this.decay), G(a, 1 - this.decay)), p = ut(G(a, this.learningRate), Ae(lt(u, U(Pt(h), this.epsilon)))), f = U(G(c, this.momentum), p);
          l.assign(u), d.assign(h), c.assign(f);
          const m = lt(r, f);
          r.assign(m);
        } else {
          const d = U(G(l, this.decay), G(Pt(a), 1 - this.decay)), h = U(G(c, this.momentum), ut(G(a, this.learningRate), Ae(U(d, this.epsilon))));
          l.assign(d), c.assign(h);
          const p = lt(r, h);
          r.assign(p);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && yt(this.accumulatedMeanSquares.map((t) => t.variable)), this.accumulatedMeanGrads != null && this.centered && yt(this.accumulatedMeanGrads.map((t) => t.variable)), this.accumulatedMoments != null && yt(this.accumulatedMoments.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && t.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = this.centered ? t.length / 3 : t.length / 2, s = !1;
    this.accumulatedMeanSquares = t.slice(0, e).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.accumulatedMoments = t.slice(e, e * 2).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.centered && (this.accumulatedMeanGrads = t.slice(e * 2, e * 3).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      decay: this.decay,
      momentum: this.momentum,
      epsilon: this.epsilon,
      centered: this.centered
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UE = [
  F1,
  W1,
  V1,
  _1,
  A1,
  O1,
  gm
];
function YE() {
  for (const n of UE)
    H(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e0(n, t, e, s) {
  i(n), e = e ?? 0, s = s ?? 1, a(e, s);
  let o = 0;
  const r = (l) => (l.then((c) => {
    const u = e + ++o / n.length * (s - e);
    return t(u), c;
  }), l);
  function i(l) {
    k(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function a(l, c) {
    k(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), k(c >= 0 && c <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${c}`), k(c >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`);
  }
  return Promise.all(n.map(r));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function X1(n, t) {
  t == null && (t = {});
  const e = t.fetchFunc == null ? V().platform.fetch : t.fetchFunc, s = n.map((d) => e(d, t.requestInit, { isBinary: !0 })), o = 0, r = 0.5, a = (t.onProgress == null ? await Promise.all(s) : await e0(s, t.onProgress, o, r)).map((d) => d.arrayBuffer()), l = 0.5, c = 1;
  return t.onProgress == null ? await Promise.all(a) : await e0(a, t.onProgress, l, c);
}
async function QE(n, t = "", e, s) {
  return jE((i) => X1(i, { requestInit: s }))(n, t, e);
}
function jE(n) {
  return async (t, e = "", s) => {
    const o = t.map(() => !1), r = {}, i = s != null ? s.map(() => !1) : [], a = [];
    if (t.forEach((p, f) => {
      let m = 0;
      p.weights.forEach((g) => {
        const b = "quantization" in g ? g.quantization.dtype : g.dtype, x = Xh[b] * X(g.shape), w = () => {
          o[f] = !0, r[f] == null && (r[f] = []), r[f].push({
            manifestEntry: g,
            groupOffset: m,
            sizeBytes: x
          });
        };
        s != null ? s.forEach((y, I) => {
          y === g.name && (w(), i[I] = !0);
        }) : w(), a.push(g.name), m += x;
      });
    }), !i.every((p) => p)) {
      const p = s.filter((f, m) => !i[m]);
      throw new Error(`Could not find weights in manifest with names: ${p.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`);
    }
    const l = o.reduce((p, f, m) => (f && p.push(m), p), []), c = [];
    l.forEach((p) => {
      t[p].paths.forEach((f) => {
        const m = e + (e.endsWith("/") ? "" : "/") + f;
        c.push(m);
      });
    });
    const u = await n(c), d = {};
    let h = 0;
    return l.forEach((p) => {
      const f = t[p].paths.length;
      let m = 0;
      for (let y = 0; y < f; y++)
        m += u[h + y].byteLength;
      const g = new ArrayBuffer(m), b = new Uint8Array(g);
      let x = 0;
      for (let y = 0; y < f; y++) {
        const I = new Uint8Array(u[h + y]);
        b.set(I, x), x += I.byteLength;
      }
      r[p].forEach((y) => {
        const I = g.slice(y.groupOffset, y.groupOffset + y.sizeBytes), C = Bx(I, [y.manifestEntry]);
        for (const v in C)
          d[v] = C[v];
      }), h += f;
    }), d;
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JE = "application/octet-stream", qE = "application/json";
class bm {
  constructor(t, e) {
    if (this.DEFAULT_METHOD = "POST", e == null && (e = {}), this.weightPathPrefix = e.weightPathPrefix, this.onProgress = e.onProgress, this.weightUrlConverter = e.weightUrlConverter, e.fetchFunc != null ? (k(typeof e.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = e.fetchFunc) : this.fetch = V().platform.fetch, k(t != null && t.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(t) && k(t.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${t.length}).`), this.path = t, e.requestInit != null && e.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = e.requestInit || {};
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    const e = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    e.body = new FormData();
    const s = [{
      paths: ["./model.weights.bin"],
      weights: t.weightSpecs
    }], o = Dk(t, s);
    e.body.append("model.json", new Blob([JSON.stringify(o)], { type: qE }), "model.json"), t.weightData != null && e.body.append("model.weights.bin", new Blob([t.weightData], { type: JE }), "model.weights.bin");
    const r = await this.fetch(this.path, e);
    if (r.ok)
      return {
        modelArtifactsInfo: zf(t),
        responses: [r]
      };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`);
  }
  /**
   * Load model artifacts via HTTP request(s).
   *
   * See the documentation to `tf.io.http` for details on the saved
   * artifacts.
   *
   * @returns The loaded model artifacts (if loading succeeds).
   */
  async load() {
    const t = await this.fetch(this.path, this.requestInit);
    if (!t.ok)
      throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);
    let e;
    try {
      e = await t.json();
    } catch {
      let i = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? i += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : i += " Please make sure the server is serving valid JSON for this request.", new Error(i);
    }
    const s = e.modelTopology, o = e.weightsManifest;
    if (s == null && o == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return zk(e, (r) => this.loadWeights(r));
  }
  async loadWeights(t) {
    const e = Array.isArray(this.path) ? this.path[1] : this.path, [s, o] = tG(e), r = this.weightPathPrefix || s, i = Fk(t), a = [], l = [];
    for (const u of t)
      for (const d of u.paths)
        this.weightUrlConverter != null ? l.push(this.weightUrlConverter(d)) : a.push(r + d + o);
    this.weightUrlConverter && a.push(...await Promise.all(l));
    const c = await X1(a, {
      requestInit: this.requestInit,
      fetchFunc: this.fetch,
      onProgress: this.onProgress
    });
    return [i, Hx(c)];
  }
}
bm.URL_SCHEME_REGEX = /^https?:\/\//;
function tG(n) {
  const t = n.lastIndexOf("/"), e = n.lastIndexOf("?"), s = n.substring(0, t), o = e > t ? n.substring(e) : "";
  return [s + "/", o];
}
function n0(n) {
  return n.match(bm.URL_SCHEME_REGEX) != null;
}
const P1 = (n, t) => {
  if (typeof fetch > "u" && (t == null || t.fetchFunc == null))
    return null;
  {
    let e = !0;
    if (Array.isArray(n) ? e = n.every((s) => n0(s)) : e = n0(n), e)
      return Z1(n, t);
  }
  return null;
};
oe.registerSaveRouter(P1);
oe.registerLoadRouter(P1);
function Z1(n, t) {
  return new bm(n, t);
}
function eG(n, t) {
  return Z1(n, t);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let ko;
function K1(n, t = 3) {
  if (t > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (n == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let e = !1, s = !1, o = !1, r = !1, i = !1, a = !1;
  if (n.data instanceof Uint8Array)
    e = !0;
  else if (typeof ImageData < "u" && n instanceof ImageData)
    s = !0;
  else if (typeof HTMLVideoElement < "u" && n instanceof HTMLVideoElement)
    o = !0;
  else if (typeof HTMLImageElement < "u" && n instanceof HTMLImageElement)
    r = !0;
  else if (n.getContext != null)
    i = !0;
  else if (typeof ImageBitmap < "u" && n instanceof ImageBitmap)
    a = !0;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);
  if (Lh(Gh, E.backendName) != null) {
    const f = { pixels: n }, m = { numChannels: t };
    return E.runKernel(Gh, f, m);
  }
  const [c, u] = o ? [
    n.videoWidth,
    n.videoHeight
  ] : [n.width, n.height];
  let d;
  if (i)
    d = // tslint:disable-next-line:no-any
    n.getContext("2d").getImageData(0, 0, c, u).data;
  else if (s || e)
    d = n.data;
  else if (r || o || a) {
    if (ko == null)
      if (typeof document > "u")
        if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u")
          ko = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        ko = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 });
    ko.canvas.width = c, ko.canvas.height = u, ko.drawImage(n, 0, 0, c, u), d = ko.getImageData(0, 0, c, u).data;
  }
  let h;
  if (t === 4)
    h = new Int32Array(d);
  else {
    const f = c * u;
    h = new Int32Array(f * t);
    for (let m = 0; m < f; m++)
      for (let g = 0; g < t; ++g)
        h[m * t + g] = d[m * 4 + g];
  }
  return e$(h, [u, c, t], "int32");
}
function nG(n) {
  return n != null && n.data instanceof Uint8Array;
}
function sG() {
  return typeof window < "u" && typeof ImageBitmap < "u" && window.hasOwnProperty("createImageBitmap");
}
function oG(n) {
  return n != null && n.width !== 0 && n.height !== 0;
}
function rG(n) {
  return sG() && !(n instanceof ImageBitmap) && oG(n) && !nG(n);
}
async function iG(n, t = 3) {
  let e = null;
  if (V().getBool("WRAP_TO_IMAGEBITMAP") && rG(n)) {
    let s;
    try {
      s = await createImageBitmap(n, { premultiplyAlpha: "none" });
    } catch {
      s = null;
    }
    s != null && s.width === n.width && s.height === n.height ? e = s : e = n;
  } else
    e = n;
  return K1(e, t);
}
async function aG(n, t) {
  let e = T(n, "img", "toPixels");
  if (!(n instanceof Mt)) {
    const c = e;
    e = et(c, "int32"), c.dispose();
  }
  if (e.rank !== 2 && e.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);
  const [s, o] = e.shape.slice(0, 2), r = e.rank === 2 ? 1 : e.shape[2];
  if (r > 4 || r === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${r}`);
  if (e.dtype !== "float32" && e.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);
  const i = await e.data(), a = e.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(o * s * 4);
  for (let c = 0; c < s * o; ++c) {
    const u = [0, 0, 0, 255];
    for (let h = 0; h < r; h++) {
      const p = i[c * r + h];
      if (e.dtype === "float32") {
        if (p < 0 || p > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`);
      } else if (e.dtype === "int32" && (p < 0 || p > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);
      r === 1 ? (u[0] = p * a, u[1] = p * a, u[2] = p * a) : u[h] = p * a;
    }
    const d = c * 4;
    l[d + 0] = Math.round(u[0]), l[d + 1] = Math.round(u[1]), l[d + 2] = Math.round(u[2]), l[d + 3] = Math.round(u[3]);
  }
  if (t != null) {
    t.width = o, t.height = s;
    const c = t.getContext("2d"), u = new ImageData(l, o, s);
    c.putImageData(u, 0, 0);
  }
  return e !== n && e.dispose(), l;
}
const B1 = /* @__PURE__ */ D({ fromPixels_: K1 }), n6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  fromPixels: B1,
  fromPixelsAsync: iG,
  toPixels: aG
}, Symbol.toStringTag, { value: "Module" }));
function nd(n, t) {
  const e = n.shape.length, s = t.shape.length;
  if (e < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);
  if (s < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
  if (t.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);
  if (t.shape[s - 1] > e)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s - 1]} vs. ${e}`);
  if (X(n.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);
  const o = t.shape, r = o[o.length - 1];
  let i = 1;
  for (let d = 0; d < o.length - 1; ++d)
    i *= o[d];
  const a = n.shape, l = o.slice();
  l.pop();
  let c = 1;
  for (let d = r; d < e; ++d)
    c *= a[d], l.push(a[d]);
  const u = [
    ...dt(n.shape).map((d) => d / c),
    1
  ].slice(0, r);
  return [l, i, c, u];
}
const s6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  prepareAndValidate: nd
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const np = -2, lG = -1;
function xm(n, t, e) {
  const s = n.shape.length;
  k(s === t.length, () => `Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`), k(s === e.length, () => `Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);
  for (let o = 0; o < s; ++o)
    k(t[o] + e[o] <= n.shape[o], () => `Error in slice${s}D: begin[${o}] + size[${o}] (${t[o] + e[o]}) would overflow input.shape[${o}] (${n.shape[o]})`);
}
function cG(n) {
  const t = [];
  let e = 0;
  for (; n > 0; )
    n & 1 && t.push(e), n /= 2, e++;
  return t;
}
function ym(n, t, e) {
  const s = [];
  for (let o = 0; o < n.length; o++)
    s[o] = Math.ceil((t[o] - n[o]) / e[o]);
  return s;
}
function H1(n, t, e, s) {
  const o = [...n];
  for (let r = o.length; r < s.length; r++)
    o.push(1);
  for (let r = 0; r < e; r++)
    r === 0 ? o[t] = 1 : (o.splice(
      t,
      0,
      1
      /* element to add */
    ), o.pop());
  return o;
}
function U1(n, t, e) {
  return e <= n ? e : e - (t - 1);
}
function Y1(n, t) {
  const e = [];
  for (let s = 0; s < n; s++)
    e.push(t + s);
  return e;
}
function uG(n, t, e, s, o, r, i, a, l) {
  const c = n.length;
  let u = new Array(c), d = new Array(c), h = new Array(c);
  if (t.length && e > 0) {
    const p = t[0], f = e + 1;
    u = Q1(i, p, f, s, n), d = j1(a, p, f, o, n), h = H1(r, p, f, n);
  } else
    for (let p = 0; p < c; p++)
      u[p] = q1(i, s, r, n, p, l), d[p] = ty(a, o, r, n, p, l), h[p] = J1(r, p, l);
  return {
    begin: u,
    end: d,
    strides: h
  };
}
function Q1(n, t, e, s, o) {
  const r = [...o], i = Y1(e, t);
  for (let a = 0; a < r.length; a++)
    if (i.indexOf(a) > -1)
      r[a] = 0;
    else {
      const l = U1(t, e, a);
      let c = s[l];
      n & 1 << l && (c = 0), r[a] = c;
    }
  return r;
}
function j1(n, t, e, s, o) {
  const r = [...o], i = Y1(e, t);
  for (let a = 0; a < r.length; a++)
    if (i.indexOf(a) > -1)
      r[a] = Number.MAX_SAFE_INTEGER;
    else {
      const l = U1(t, e, a);
      let c = s[l];
      n & 1 << l && (c = Number.MAX_SAFE_INTEGER), r[a] = c;
    }
  for (let a = 0; a < r.length; a++) {
    const l = o[a];
    r[a] < 0 && (r[a] += l), r[a] = ro(0, r[a], o[a]);
  }
  return r;
}
function J1(n, t, e) {
  let s = n[t];
  return (e & 1 << t || s == null) && (s = 1), s;
}
function q1(n, t, e, s, o, r) {
  let i = t[o];
  const a = e[o] || 1;
  (n & 1 << o || r & 1 << o || i == null) && (a > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER);
  const l = s[o];
  return i < 0 && (i += l), i = ro(0, i, l - 1), i;
}
function ty(n, t, e, s, o, r) {
  let i = t[o];
  const a = e[o] || 1;
  (n & 1 << o || r & 1 << o || i == null) && (a > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER);
  const l = s[o];
  return i < 0 && (i += l), a > 0 ? i = ro(0, i, l) : i = ro(-1, i, l - 1), i;
}
function wm(n, t, e) {
  let s = e.length;
  for (let o = 0; o < e.length; o++)
    if (e[o] > 1) {
      s = o;
      break;
    }
  for (let o = s + 1; o < e.length; o++)
    if (t[o] > 0 || e[o] !== n[o])
      return !1;
  return !0;
}
function Im(n, t) {
  let e = n.length > 0 ? n[n.length - 1] : 1;
  for (let s = 0; s < n.length - 1; s++)
    e += n[s] * t[s];
  return e;
}
function sd(n, t, e) {
  let s;
  const o = n.shape.length;
  typeof t == "number" ? s = [t, ...new Array(o - 1).fill(0)] : t.length < o ? s = t.concat(new Array(o - t.length).fill(0)) : s = t.slice(), s.forEach((i) => {
    k(i !== -1, () => "slice() does not support negative begin indexing.");
  });
  let r;
  return e == null ? r = new Array(o).fill(-1) : typeof e == "number" ? r = [e, ...new Array(o - 1).fill(-1)] : e.length < o ? r = e.concat(new Array(o - e.length).fill(-1)) : r = e, r = r.map((i, a) => i >= 0 ? i : (k(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`), n.shape[a] - s[a])), [s, r];
}
function Cm(n, t, e, s, o, r, i, a, l) {
  let c;
  if (s == null ? (c = new Array(t.length), c.fill(1)) : c = s, i != null && i & i - 1)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let u = !1;
  const d = {
    dims: c.length,
    numAddAxisAfterEllipsis: 0,
    begin: t.slice(),
    end: e.slice(),
    strides: c.slice(),
    beginMask: o,
    endMask: r,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  for (let w = 0; w < d.dims; w++)
    u && 1 << w & a && d.numAddAxisAfterEllipsis++, 1 << w & i && (u = !0);
  u || (d.ellipsisMask |= 1 << d.dims, d.dims++);
  const h = {
    dims: n.length,
    beginMask: 0,
    endMask: 0,
    beginValid: !1,
    endValid: !1
  };
  dG(d, h);
  let p = !0, f = !0, m = !0;
  const g = [], b = [];
  for (let w = 0; w < n.length; ++w) {
    if (h.strides[w] === 0)
      throw Error(`strides[${w}] must be non-zero`);
    const y = !!(h.shrinkAxisMask & 1 << w), I = n[w];
    if (I === -1) {
      g.push(y ? 1 : -1);
      continue;
    }
    const C = [h.beginMask & 1 << w, h.endMask & 1 << w], v = [
      h.strides[w] > 0 ? 0 : -1,
      h.strides[w] > 0 ? I : I - 1
    ];
    if (y && h.strides[w] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    m = m && h.strides[w] === 1;
    const S = !!(h.beginMask & 1 << w && h.endMask & 1 << w);
    if (h.beginValid && h.endValid) {
      if (y) {
        const F = h.begin[w] < 0 ? I + h.begin[w] : h.begin[w];
        if (h.begin[w] = F, h.end[w] = h.begin[w] + 1, F < 0 || F >= I)
          throw Error(`slice index ${h.begin[w]} of dimension ${w} out of bounds.`);
      } else
        h.begin[w] = s0(h.begin[w], 0, h.strides[w], I, C, v), h.end[w] = s0(h.end[w], 1, h.strides[w], I, C, v);
      const $ = h.strides[w] === 1 && h.begin[w] === 0 && h.end[w] === I;
      p = p && $, f = f && (w === 0 && h.strides[w] === 1 || $);
    } else
      p = p && h.strides[w] === 1 && S, f = f && (w === 0 && h.strides[w] === 1 || S);
    let N, R = !1;
    if (h.beginValid && h.endValid ? (N = h.end[w] - h.begin[w], R = !0) : y ? (N = 1, R = !0) : S && I >= 0 && (h.strides[w] < 0 ? N = -I : N = I, R = !0), R) {
      let $;
      N === 0 || N < 0 != h.strides[w] < 0 ? $ = 0 : $ = Math.trunc(N / h.strides[w]) + (N % h.strides[w] !== 0 ? 1 : 0), g.push($);
    } else
      g.push(-1);
  }
  for (let w = 0; w < h.finalShapeGatherIndices.length; ++w) {
    const y = h.finalShapeGatherIndices[w];
    y >= 0 ? b.push(g[y]) : y === np && b.push(1);
  }
  return {
    finalShapeSparse: b.filter((w, y) => h.finalShapeGatherIndices[y] !== np),
    finalShape: b,
    isIdentity: p,
    sliceDim0: f,
    isSimpleSlice: m,
    begin: h.begin,
    end: h.end,
    strides: h.strides
  };
}
function dG(n, t) {
  t.beginMask = 0, t.endMask = 0, t.shrinkAxisMask = 0;
  let e = 0;
  t.beginValid = n.begin != null, t.endValid = n.end != null, t.begin = new Array(t.dims), t.end = new Array(t.dims), t.strides = new Array(t.dims), t.finalShapeGatherIndices = [], t.finalShapeGatherIndicesSparse = [], t.inputShapeGatherIndicesSparse = new Array(t.dims);
  for (let s = 0; s < n.dims; s++)
    if (1 << s & n.ellipsisMask) {
      const o = Math.min(t.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis, t.dims);
      for (; e < o; e++)
        t.begin[e] = 0, t.end[e] = 0, t.strides[e] = 1, t.beginMask |= 1 << e, t.endMask |= 1 << e, t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(-1), t.inputShapeGatherIndicesSparse[e] = s;
    } else if (1 << s & n.newAxisMask)
      t.finalShapeGatherIndices.push(np), t.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (e === t.begin.length)
        throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);
      n.begin != null && (t.begin[e] = n.begin[s]), n.end != null && (t.end[e] = n.end[s]), t.strides[e] = n.strides[s], n.beginMask & 1 << s && (t.beginMask |= 1 << e), n.endMask & 1 << s && (t.endMask |= 1 << e), n.shrinkAxisMask & 1 << s ? (t.finalShapeGatherIndices.push(lG), t.finalShapeGatherIndicesSparse.push(-1), t.shrinkAxisMask |= 1 << e) : (t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(s)), t.inputShapeGatherIndicesSparse[e] = s, e++;
    }
}
function s0(n, t, e, s, o, r) {
  if (o[t])
    return e > 0 ? r[t] : r[t + 1 & 1];
  {
    const i = n < 0 ? s + n : n;
    return i < r[0] ? r[0] : i > r[1] ? r[1] : i;
  }
}
const hG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertParamsValid: xm,
  computeFlatOffset: Im,
  computeOutShape: ym,
  getNormalizedAxes: uG,
  isSliceContinous: wm,
  maskToAxes: cG,
  parseSliceParams: sd,
  sliceInfo: Cm,
  startForAxis: q1,
  startIndicesWithElidedDims: Q1,
  stopForAxis: ty,
  stopIndicesWithElidedDims: j1,
  stridesForAxis: J1,
  stridesWithElidedDims: H1
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class pG {
  /**
   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
   *
   * ```js
   * // Fit a quadratic function by learning the coefficients a, b, c.
   * const xs = tf.tensor1d([0, 1, 2, 3]);
   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
   *
   * const a = tf.scalar(Math.random()).variable();
   * const b = tf.scalar(Math.random()).variable();
   * const c = tf.scalar(Math.random()).variable();
   *
   * // y = a * x^2 + b * x + c.
   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
   * const loss = (pred, label) => pred.sub(label).square().mean();
   *
   * const learningRate = 0.01;
   * const optimizer = tf.train.sgd(learningRate);
   *
   * // Train the model.
   * for (let i = 0; i < 10; i++) {
   *   optimizer.minimize(() => loss(f(xs), ys));
   * }
   *
   * // Make predictions.
   * console.log(
   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
   * const preds = f(xs).dataSync();
   * preds.forEach((pred, i) => {
   *   console.log(`x: ${i}, pred: ${pred}`);
   * });
   * ```
   *
   * @param learningRate The learning rate to use for the SGD algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static sgd(t) {
    return new gm(t);
  }
  /**
   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
   * descent.
   *
   * See
   * [http://proceedings.mlr.press/v28/sutskever13.pdf](
   * http://proceedings.mlr.press/v28/sutskever13.pdf)
   *
   * @param learningRate The learning rate to use for the Momentum gradient
   * descent algorithm.
   * @param momentum The momentum to use for the momentum gradient descent
   * algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static momentum(t, e, s = !1) {
    return new A1(t, e, s);
  }
  /**
   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
   * descent. This implementation uses plain momentum and is not centered
   * version of RMSProp.
   *
   * See
   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
   *
   * @param learningRate The learning rate to use for the RMSProp gradient
   * descent algorithm.
   * @param decay The discounting factor for the history/coming gradient.
   * @param momentum The momentum to use for the RMSProp gradient descent
   * algorithm.
   * @param epsilon Small value to avoid zero denominator.
   * @param centered If true, gradients are normalized by the estimated
   * variance of the gradient.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static rmsprop(t, e = 0.9, s = 0, o = null, r = !1) {
    return new O1(t, e, s, o, r);
  }
  /**
   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adam gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adam(t = 1e-3, e = 0.9, s = 0.999, o = null) {
    return new V1(t, e, s, o);
  }
  /**
   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
   *
   * @param learningRate The learning rate to use for the Adadelta gradient
   * descent algorithm.
   * @param rho The learning rate decay over each update.
   * @param epsilon A constant epsilon used to better condition the grad
   * update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adadelta(t = 1e-3, e = 0.95, s = null) {
    return new F1(t, e, s);
  }
  /**
   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adamax gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   * @param decay The learning rate decay over each update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adamax(t = 2e-3, e = 0.9, s = 0.999, o = null, r = 0) {
    return new _1(t, e, s, o, r);
  }
  /**
   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
   * See
   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
   * or
   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
   *
   * @param learningRate The learning rate to use for the Adagrad gradient
   * descent algorithm.
   * @param initialAccumulatorValue Starting value for the accumulators, must be
   * positive.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adagrad(t, e = 0.1) {
    return new W1(t, e);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xr = pG;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fG = (() => typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (n) => n())();
function od() {
  return new Promise((n) => fG(() => n()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vm(n, t) {
  const e = n[0].length;
  n.forEach((o, r) => {
    k(o.length === e, () => `Error in concat${e}D: rank of tensors[${r}] must be the same as the rank of the rest (${e})`);
  }), k(t >= 0 && t < e, () => `Error in concat${e}D: axis must be between 0 and ${e - 1}.`);
  const s = n[0];
  n.forEach((o, r) => {
    for (let i = 0; i < e; i++)
      k(i === t || o[i] === s[i], () => `Error in concat${e}D: Shape of tensors[${r}] (${o}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`);
  });
}
function ps(n, t) {
  const e = n[0].slice();
  for (let s = 1; s < n.length; s++)
    e[t] += n[s][t];
  return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Hn;
(function(n) {
  n[n.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", n[n.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", n[n.ROW_LENGTHS = 2] = "ROW_LENGTHS", n[n.ROW_SPLITS = 3] = "ROW_SPLITS", n[n.ROW_LIMITS = 4] = "ROW_LIMITS", n[n.ROW_STARTS = 5] = "ROW_STARTS";
})(Hn || (Hn = {}));
function ey(n, t, e) {
  let s = new Array();
  if (e == null && t == null)
    return s;
  if (t == null)
    for (; s.length < n + e.length; )
      s.push(-1);
  else
    s = t.slice();
  if (e == null)
    return s;
  if (n + e.length !== s.length)
    throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n + e.length}, but shape.rank = ${s.length}`);
  for (let o = 1; o < e.length; ++o) {
    const r = e[o], i = s[s.length - e.length + o], a = s[i];
    if (r >= 0)
      if (a >= 0) {
        if (a !== r)
          throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${o + n}] = ${r} but shape[${o + n}] = ${a}`);
      } else
        s[i] = r;
  }
  return s;
}
function ny(n) {
  const t = {
    FIRST_DIM_SIZE: Hn.FIRST_DIM_SIZE,
    VALUE_ROWIDS: Hn.VALUE_ROWIDS,
    ROW_LENGTHS: Hn.ROW_LENGTHS,
    ROW_SPLITS: Hn.ROW_SPLITS,
    ROW_LIMITS: Hn.ROW_LIMITS,
    ROW_STARTS: Hn.ROW_STARTS
  }, e = [];
  for (const s of n)
    if (s in t)
      e.push(t[s]);
    else
      break;
  return e;
}
function sy(n) {
  return n.length === 0 ? 0 : n[0] === Hn.FIRST_DIM_SIZE ? n.length - 1 : n.length;
}
function oy(n, t) {
  if (n == null || t == null)
    return;
  const e = n.length, s = t.length;
  if (e >= s)
    throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);
  for (let o = 0; o < Math.min(e, s - 1); ++o) {
    const r = n[o], i = t[o + 1];
    if (r >= 0 && i >= 0 && r !== 1 && r !== i)
      throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${o - n.length}] = ${r} but ragged tensor input.flatValues.shape[${o - n.length}] = ${i}`);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const km = 30;
function rd(n) {
  return n <= km ? n : dc(n, Math.floor(Math.sqrt(n)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sm(n, t, e) {
  const s = e * (typeof n == "number" ? n : n[0]), o = t * (typeof n == "number" ? n : n[1]);
  return [s, o];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hl(n, t, e, s = !0) {
  let o = [];
  if (s)
    o = o.concat(t.slice(0)), o.push(n[0] / e), o = o.concat(n.slice(1));
  else {
    o = o.concat(n[0]);
    const r = t.length;
    for (let i = 0; i < r; ++i)
      o = o.concat([n[i + 1] / t[i], t[i]]);
    o = o.concat(n.slice(r + 1));
  }
  return o;
}
function pl(n, t, e = !0) {
  const s = [];
  if (e) {
    s.push(t);
    for (let o = t + 1; o < n; ++o)
      o <= 2 * t ? (s.push(o), s.push(o - (t + 1))) : s.push(o);
  } else {
    const o = [], r = [];
    for (let i = 1; i < n; ++i)
      i >= t * 2 + 1 || i % 2 === 1 ? r.push(i) : o.push(i);
    s.push(...o), s.push(0), s.push(...r);
  }
  return s;
}
function fl(n, t, e, s = !0) {
  const o = [];
  s ? o.push(n[0] / e) : o.push(n[0] * e);
  for (let r = 1; r < n.length; ++r)
    r <= t.length ? s ? o.push(t[r - 1] * n[r]) : o.push(n[r] / t[r - 1]) : o.push(n[r]);
  return o;
}
function Tm(n, t) {
  const e = [0];
  for (let s = 0; s < t; ++s)
    e.push(n[s][0]);
  return e;
}
function Nm(n, t, e) {
  const s = n.slice(0, 1);
  for (let o = 0; o < e; ++o)
    s.push(n[o + 1] - t[o][0] - t[o][1]);
  return s;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const id = 1.7580993408473768, ad = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rm = 0.3275911, $m = 0.254829592, Em = -0.284496736, Gm = 1.421413741, Lm = -1.453152027, Dm = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ds(n, t) {
  if (n.length !== t.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);
  const e = new Float32Array(n.length * 2);
  for (let s = 0; s < e.length; s += 2)
    e[s] = n[s / 2], e[s + 1] = t[s / 2];
  return e;
}
function ry(n) {
  const t = new Float32Array(n.length / 2), e = new Float32Array(n.length / 2);
  for (let s = 0; s < n.length; s += 2)
    t[s / 2] = n[s], e[s / 2] = n[s + 1];
  return { real: t, imag: e };
}
function iy(n) {
  const t = Math.ceil(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let o = 0; o < n.length; o += 4)
    e[Math.floor(o / 4)] = n[o], s[Math.floor(o / 4)] = n[o + 1];
  return { real: e, imag: s };
}
function ay(n) {
  const t = Math.floor(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let o = 2; o < n.length; o += 4)
    e[Math.floor(o / 4)] = n[o], s[Math.floor(o / 4)] = n[o + 1];
  return { real: e, imag: s };
}
function Mm(n, t) {
  const e = n[t * 2], s = n[t * 2 + 1];
  return { real: e, imag: s };
}
function ly(n, t, e, s) {
  n[s * 2] = t, n[s * 2 + 1] = e;
}
function cy(n, t) {
  const e = new Float32Array(n / 2), s = new Float32Array(n / 2);
  for (let o = 0; o < Math.ceil(n / 2); o++) {
    const r = (t ? 2 : -2) * Math.PI * (o / n);
    e[o] = Math.cos(r), s[o] = Math.sin(r);
  }
  return { real: e, imag: s };
}
function uy(n, t, e) {
  const s = (e ? 2 : -2) * Math.PI * (n / t), o = Math.cos(s), r = Math.sin(s);
  return { real: o, imag: r };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wd = "->", mG = /->/g, o0 = ",", r0 = "...";
function zm(n, t) {
  n = n.replace(/\s/g, "");
  const e = (n.length - n.replace(mG, "").length) / Wd.length;
  if (e < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (e > 1)
    throw new Error(`Equation must contain exactly one arrow ("${Wd}").`);
  const [s, o] = n.split(Wd);
  k(s.indexOf(r0) === -1, () => `The ellipsis notation ("${r0}") is not supported yet.`);
  const r = s.split(o0), i = r.length;
  if (t !== i)
    throw new Error(`Expected ${i} input tensors, received ${t}`);
  if (i > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const a = [];
  for (let h = 0; h < o.length; ++h) {
    const p = o[h];
    if (!r.some((f) => f.indexOf(p) !== -1))
      throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);
    a.indexOf(p) === -1 && a.push(p);
  }
  for (let h = 0; h < s.length; ++h) {
    const p = s[h];
    a.indexOf(p) === -1 && p !== o0 && a.push(p);
  }
  const l = new Array(r.length);
  for (let h = 0; h < i; ++h) {
    if (new Set(r[h].split("")).size !== r[h].length)
      throw new Error(`Found duplicate axes in input component ${r[h]}. Support for duplicate axes in input is not implemented yet.`);
    l[h] = [];
    for (let p = 0; p < r[h].length; ++p)
      l[h].push(a.indexOf(r[h][p]));
  }
  const c = a.length, u = o.length, d = [];
  for (let h = u; h < c; ++h)
    d.push(h);
  return { allDims: a, summedDims: d, idDims: l };
}
function Fm(n, t) {
  let e = new Array(n);
  e.fill(-1);
  for (let o = 0; o < t.length; ++o)
    e[t[o]] = o;
  const s = [];
  for (let o = 0; o < n; ++o)
    e[o] === -1 && s.push(o);
  return e = e.filter((o) => o !== -1), { permutationIndices: e, expandDims: s };
}
function Wm(n, t, e) {
  const s = new Array(n);
  for (let o = 0; o < e.length; ++o) {
    const r = e[o].shape;
    for (let i = 0; i < t[o].length; ++i)
      s[t[o][i]] === void 0 ? s[t[o][i]] = r[i] : k(s[t[o][i]] === r[i], () => `Expected dimension ${s[t[o][i]]} at axis ${i} of input shaped ${JSON.stringify(r)}, but got dimension ${r[i]}`);
  }
}
function Vm(n, t) {
  const e = n, s = [];
  let o = 0;
  n.length === 0 && e.push(-1), o = n.length + 1;
  for (let i = 0; i < o; ++i)
    s.push([]);
  const r = [];
  for (let i = 0; i < e.length; ++i) {
    const a = e[i], l = gG(t, a);
    for (const c of l)
      r.indexOf(c) === -1 && (s[i].push(c), r.push(c));
  }
  return { path: e, steps: s };
}
function _m(n) {
  return n.every((t, e) => t === e);
}
function gG(n, t) {
  const e = [];
  for (let s = 0; s < n.length; ++s)
    (n[s].length === 0 || n[s].indexOf(t) !== -1 || t === -1) && e.push(s);
  return e;
}
function Am(n, t, e = 0) {
  let s = [];
  if (typeof t == "number")
    k(n.shape[e] % t === 0, () => "Number of splits must evenly divide the axis."), s = new Array(t).fill(n.shape[e] / t);
  else {
    const o = t.reduce((i, a) => (a === -1 && (i += 1), i), 0);
    k(o <= 1, () => "There should be only one negative value in split array.");
    const r = t.indexOf(-1);
    if (r !== -1) {
      const i = t.reduce((a, l) => l > 0 ? a + l : a);
      t[r] = n.shape[e] - i;
    }
    k(n.shape[e] === t.reduce((i, a) => i + a), () => "The sum of sizes must match the size of the axis dimension."), s = t;
  }
  return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dy(n) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function hy(n, t) {
  return `indices(${n}, 0) is invalid: ${t} < 0`;
}
function py(n, t, e) {
  return `indices(${n}, 0) is invalid: ${t} >= ${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fy(n, t) {
  return `only one output dimension may be -1, not both ${n} and ${t}`;
}
function my(n, t) {
  return `size ${n} must be non-negative, not ${t}`;
}
function gy() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function by(n, t) {
  const e = X(n), s = X(t);
  return `Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${t}`;
}
function xy(n, t) {
  const e = X(n), s = X(t);
  return `Input to reshape is a tensor with ${e} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sp() {
  return "segment ids must be >= 0";
}
function yy() {
  return "segment ids are not increasing";
}
function wy(n, t) {
  return `Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function Iy(n, t, e) {
  return `Bad: indices[${n}] == ${t} out of range [0, ${e})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Cy(n, t) {
  let e = !1, s;
  for (n <= km ? (s = n, e = !0) : s = dc(n, Math.floor(Math.sqrt(n))); !e; )
    s > t || s === n ? e = !0 : s = dc(n, s + 1);
  return s;
}
function vy(n, t, e) {
  const s = [], o = n.length;
  for (let r = 0; r < o; r++)
    r !== t ? s.push(n[r]) : s.push(e);
  return s;
}
function Om(n, t, e, s) {
  const o = t.shape.length, r = n.shape.length;
  if (s !== 0 && (s < -o || s > o))
    throw new Error(`Expect batchDims in the range of [-${o}, ${o}], but got ${s}`);
  if (s < 0 && (s += o), s > r)
    throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${r}).`);
  if (e < s)
    throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);
  for (let d = 0; d < s; ++d)
    if (n.shape[d] !== t.shape[d])
      throw new Error(`x.shape[${d}]: ${n.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`);
  const i = n.shape[e], a = [];
  let l = 1, c = 1, u = 1;
  for (let d = 0; d < s; ++d)
    a.push(n.shape[d]), l *= n.shape[d];
  for (let d = s; d < e; d++)
    a.push(n.shape[d]), c *= n.shape[d];
  for (let d = s; d < o; d++)
    a.push(t.shape[d]);
  for (let d = e + 1; d < r; d++)
    a.push(n.shape[d]), u *= n.shape[d];
  return { batchSize: l, sliceSize: u, outerSize: c, dimSize: i, outputShape: a };
}
const bG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  collectGatherOpShapeInfo: Om,
  computeOutShape: vy,
  segOpComputeOptimalWindowSize: Cy
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qo(n) {
  try {
    return n.map((t) => Gs(t));
  } catch (t) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`);
  }
}
function ky(n) {
  return n.map((t) => Es(t));
}
const xG = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ERF_A1: $m,
  ERF_A2: Em,
  ERF_A3: Gm,
  ERF_A4: Lm,
  ERF_A5: Dm,
  ERF_P: Rm,
  PARALLELIZE_THRESHOLD: km,
  get RowPartitionType() {
    return Hn;
  },
  SELU_SCALE: ad,
  SELU_SCALEALPHA: id,
  applyActivation: um,
  assertAndGetBroadcastShape: bt,
  assertAxesAreInnerMostDims: Ee,
  assertParamsConsistent: vm,
  assignToTypedArray: ly,
  axesAreInnerMostDims: Pf,
  calculateShapes: ni,
  checkEinsumDimSizes: Wm,
  checkPadOnDimRoundingMode: je,
  combineLocations: c1,
  combineRaggedTensorToTensorShapes: ey,
  complexWithEvenIndex: iy,
  complexWithOddIndex: ay,
  computeConv2DInfo: $e,
  computeConv3DInfo: mo,
  computeDefaultPad: Ff,
  computeDilation2DInfo: al,
  computeOptimalWindowSize: rd,
  computeOutAndReduceShapes: Ce,
  computeOutShape: ps,
  computePool2DInfo: An,
  computePool3DInfo: Fs,
  convertConv2DDataFormat: Ws,
  decodeEinsumEquation: zm,
  eitherStridesOrDilationsAreOne: Fe,
  expandShapeToKeepDim: le,
  exponent: uy,
  exponents: cy,
  fromStringArrayToUint8: ky,
  fromUint8ToStringArray: qo,
  getAxesPermutation: ne,
  getBroadcastDims: Yo,
  getComplexWithIndex: Mm,
  getEinsumComputePath: Vm,
  getEinsumPermutation: Fm,
  getFusedBiasGradient: cm,
  getFusedDyActivation: lm,
  getImageCenter: Sm,
  getInnerMostAxes: ce,
  getPermuted: pl,
  getRaggedRank: sy,
  getReductionAxes: de,
  getReshaped: hl,
  getReshapedPermuted: fl,
  getRowPartitionTypesHelper: ny,
  getSliceBeginCoords: Tm,
  getSliceSize: Nm,
  getSparseFillEmptyRowsIndicesDenseShapeMismatch: dy,
  getSparseFillEmptyRowsNegativeIndexErrorMessage: hy,
  getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: py,
  getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: gy,
  getSparseReshapeInputOutputMismatchErrorMessage: xy,
  getSparseReshapeInputOutputMultipleErrorMessage: by,
  getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: fy,
  getSparseReshapeNegativeOutputDimErrorMessage: my,
  getSparseSegmentReductionIndicesOutOfRangeErrorMessage: Iy,
  getSparseSegmentReductionNegativeSegmentIdsErrorMessage: sp,
  getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: yy,
  getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: wy,
  getUndoAxesPermutation: go,
  isIdentityPermutation: _m,
  log: nk,
  mergeRealAndImagArrays: Ds,
  prepareAndValidate: nd,
  prepareSplitSize: Am,
  segment_util: bG,
  shouldFuse: dm,
  slice_util: hG,
  splitRealAndImagArrays: ry,
  stridesOrDilationsArePositive: Ho,
  tupleValuesAreOne: Bo,
  upcastType: rn,
  validateDefaultValueShape: oy,
  validateInput: E1,
  validateUpdateShape: im,
  warn: fn
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
YE();
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sy = {
  kernelName: Uc,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, dl(et(e, "float32"), -1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yG = {
  kernelName: ca,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Pt(et(e, "float32")), o = Ae(lt(gt(1), s));
        return ee(ut(n, o));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wG = {
  kernelName: ua,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Ae(lt(Pt(et(e, "float32")), 1));
        return ut(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IG = {
  kernelName: Jr,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = bt(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = de(e.shape, o);
      return l.length > 0 && (a = at(a, l)), M(a, e.shape);
    }, b: () => {
      let a = n;
      const l = de(s.shape, o);
      return l.length > 0 && (a = at(a, l)), M(a, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CG = {
  kernelName: Fp,
  saveAllInputs: !0,
  gradFunc: (n, t) => {
    const e = {};
    return t.forEach((s, o) => {
      e[o] = () => n.clone();
    }), e;
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vG = {
  kernelName: Yc,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Nt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kG = {
  kernelName: Qc,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Nt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SG = {
  kernelName: da,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, Ae(lt(gt(1), Pt(et(e, "float32"))))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TG = {
  kernelName: ha,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Ae(U(gt(1), Pt(et(e, "float32"))));
        return ut(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NG = {
  kernelName: ma,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = bt(e.shape, s.shape);
    return { a: () => {
      const a = U(Pt(e), Pt(s));
      let l = G(n, ut(s, a));
      const c = de(e.shape, o);
      return c.length > 0 && (l = at(l, c)), M(l, e.shape);
    }, b: () => {
      const a = U(Pt(e), Pt(s));
      let l = ee(G(n, ut(e, a)));
      const c = de(s.shape, o);
      return c.length > 0 && (l = at(l, c)), M(l, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RG = {
  kernelName: pa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, U(Pt(et(e, "float32")), 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $G = {
  kernelName: fa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, lt(gt(1), Pt(et(e, "float32")))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EG(n, t, e, s, o, r) {
  const i = T(n, "dy", "avgPool3dGrad"), a = T(t, "input", "avgPool3dGrad");
  let l = i, c = a, u = !1;
  a.rank === 4 && (u = !0, l = M(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), c = M(a, [
    1,
    a.shape[0],
    a.shape[1],
    a.shape[2],
    a.shape[3]
  ])), k(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), k(c.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`), je("avgPool3dGrad", o, r);
  const d = { dy: l, input: c }, h = { filterSize: e, strides: s, pad: o, dimRoundingMode: r }, p = E.runKernel(Ap, d, h);
  return u ? M(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const GG = /* @__PURE__ */ D({ avgPool3dGrad_: EG });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LG = {
  kernelName: Jc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: o, strides: r, pad: i, dimRoundingMode: a } = e;
    return {
      x: () => GG(n, s, o, r, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DG(n, t, e, s, o) {
  const r = T(n, "dy", "avgPoolGrad"), i = T(t, "input", "avgPoolGrad");
  k(i.rank === r.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${r.rank})`);
  let a = i, l = r, c = !1;
  i.rank === 3 && (c = !0, a = M(i, [1, i.shape[0], i.shape[1], i.shape[2]]), l = M(r, [1, r.shape[0], r.shape[1], r.shape[2]])), k(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), k(a.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);
  const u = { dy: l, input: a }, d = { filterSize: e, strides: s, pad: o }, h = E.runKernel(_p, u, d);
  return c ? M(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const MG = /* @__PURE__ */ D({ avgPoolGrad_: DG });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zG = {
  kernelName: jc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: o, strides: r, pad: i } = e;
    return { x: () => MG(n, s, o, r, i) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FG = {
  kernelName: qc,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { transposeA: r, transposeB: i } = e;
    return !r && !i ? {
      a: () => Gt(n, o, !1, !0),
      b: () => Gt(s, n, !0, !1)
    } : !r && i ? {
      a: () => Gt(n, o, !1, !1),
      b: () => Gt(n, s, !0, !1)
    } : r && !i ? {
      a: () => Gt(o, n, !1, !0),
      b: () => Gt(s, n, !1, !1)
    } : {
      a: () => Gt(o, n, !0, !0),
      b: () => Gt(n, s, !0, !0)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WG = {
  kernelName: tu,
  gradFunc: (n, t, e) => {
    const { blockShape: s, crops: o } = e;
    return { x: () => Jf(n, s, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VG = {
  kernelName: tk,
  gradFunc: (n, t, e) => {
    const s = e, o = s.inputShape, r = s.shape, i = Array.from(r);
    for (let l = o.length - 1; l >= 0; l--)
      if (o[l] === r[l])
        i[l] = 1;
      else if (o[l] !== 1)
        throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${r}].`);
    const a = [];
    for (let l = 0; l < i.length; l++)
      i[l] > 1 && a.push(l);
    return { x: () => at(
      n,
      a,
      !0
      /* keepDims */
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _G = {
  kernelName: ga,
  gradFunc: (n) => ({ x: () => n.clone() })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AG = {
  kernelName: ba,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OG = {
  kernelName: xa,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { clipValueMin: o, clipValueMax: r } = e;
    return {
      x: () => Ue(xs(cr(s, o), ti(s, r)), n, Nt(n))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XG = {
  kernelName: eu,
  inputsToSave: ["x"],
  gradFunc: Sy.gradFunc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PG = {
  kernelName: nu,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const s = t.map((l) => l.shape), { axis: o } = e, r = Ct(o, t[0].shape)[0], i = s.map((l) => l[r]);
    return yn(n, i, r).map((l) => () => l);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZG = {
  kernelName: su,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { dilations: r, strides: i, pad: a, dataFormat: l } = e;
    return k(Bo(r), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`), {
      x: () => Af(s.shape, n, o, i, a, l),
      filter: () => am(s, n, o.shape, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KG = {
  kernelName: ou,
  inputsToSave: ["dy", "filter"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { strides: r, pad: i, dataFormat: a, dimRoundingMode: l } = e;
    return {
      dy: () => Uo(n, o, r, i, a, 1, l),
      filter: () => am(n, s, o.shape, r, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BG(n, t, e, s, o) {
  let r = n;
  n.rank === 4 && (r = M(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
  let i = t;
  i.rank === 4 && (i = M(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), k(r.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`), k(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), k(e.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`), k(r.shape[4] === e[3], () => `Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${e[3]}.`), k(i.shape[4] === e[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);
  const a = { x: r, dy: i }, l = { strides: s, pad: o, filterShape: e };
  return E.runKernel(Zp, a, l);
}
const HG = /* @__PURE__ */ D({ conv3DBackpropFilter_: BG });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UG = {
  kernelName: ru,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: o, pad: r } = e;
    k(Bo(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    const [i, a] = t;
    return {
      x: () => i1(i.shape, n, a, o, r),
      filter: () => HG(i, n, a.shape, o, r)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YG = {
  kernelName: ya,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(ee(C1(et(e, "float32"))), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QG = {
  kernelName: wa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(v1(et(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jG = {
  kernelName: iu,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o, exclusive: r, reverse: i } = e;
    return {
      x: () => {
        const a = ne([o], s.rank);
        let l = l1(n, o, r, !i);
        return a != null && (l = St(l, a)), l;
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JG = {
  kernelName: au,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: o, pad: r, dimRoundingMode: i } = e, a = s ?? [1, 1];
    k(Bo(a), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
    const [l, c] = t;
    return k(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), k(c.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`), k(l.shape[3] === c.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), k(Fe(o, a), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${o} and dilations '${a}'.`), je("depthwiseConv2d", r, i), {
      x: () => I$(l.shape, n, c, o, r, a, i),
      filter: () => y$(l, n, c.shape, o, r, a, i)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qG = {
  kernelName: lu,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, r = { x: s, filter: o, dy: n }, i = { x: s, filter: o, dy: n };
    return {
      x: () => E.runKernel($h, r, e),
      filter: () => E.runKernel(Eh, i, e)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t3 = {
  kernelName: Ca,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t, s = { dy: n, y: e };
    return { x: () => E.runKernel(Jp, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const e3 = {
  kernelName: va,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = G(Fn(ee(Pt(e))), 2 / Math.sqrt(Math.PI));
    return { x: () => G(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n3 = {
  kernelName: ka,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s3 = {
  kernelName: uu,
  inputsToSave: ["input"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { input: () => M(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o3 = {
  kernelName: Sa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, Fn(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const r3 = {
  kernelName: Ta,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const i3 = {
  kernelName: Na,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = bt(e.shape, s.shape);
    return { a: () => {
      const a = ut(n, et(s, "float32")), l = de(e.shape, o);
      return l.length > 0 ? M(at(a, l), e.shape) : a;
    }, b: () => {
      let a = G(n, et(e, "float32"));
      const l = de(s.shape, o);
      l.length > 0 && (a = M(at(a, l), s.shape));
      const c = Pt(s);
      return ee(ut(a, et(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a3 = {
  kernelName: du,
  inputsToSave: ["x", "mean", "variance", "scale"],
  gradFunc: (n, t, e) => {
    const { varianceEpsilon: s } = e, [o, r, i, a] = t, l = a ?? gt(1), c = de(r.shape, o.shape), u = [];
    if (r.rank === 1) {
      for (let y = 0; y < o.shape.length - 1; ++y)
        u.push(o.shape[y]);
      u.push(1);
    }
    const d = lt(o, r), h = G(n, l), p = y1(U(i, gt(s))), f = G(G(G(p, p), p), gt(-0.5));
    return {
      x: () => r.rank === 1 ? M(G(G(n, Un(M(p, [1, 1, 1, r.shape[0]]), u)), l), o.shape) : M(G(G(n, p), l), o.shape),
      mean: () => {
        let y = G(G(p, gt(-1)), h);
        return r.rank === 1 && (y = at(y, c)), M(y, r.shape);
      },
      variance: () => {
        let y = G(G(f, d), h);
        return r.rank === 1 && (y = at(y, c)), M(y, r.shape);
      },
      scale: () => {
        const y = G(d, p);
        let I = G(n, y);
        return r.rank === 1 && (I = at(I, c)), M(I, r.shape);
      },
      offset: () => {
        let y = n;
        return r.rank === 1 && (y = at(y, c)), M(y, r.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l3 = {
  kernelName: hu,
  inputsToSave: ["x", "indices"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { axis: r } = e, i = Ct(r, s.shape)[0];
    return { x: () => {
      const l = s.shape, c = o.size, u = l.slice(0, i), d = u.length, h = l.slice(r, l.length).slice(1), p = h.length, f = i0(0, d), m = i0(d + 1, d + 1 + p), g = a0([u, [c], h]), b = M(n, g), x = M(o, [c]), w = a0([[d], f, m]), y = St(b, w);
      let I = R1(y, x, s.shape[i]);
      const C = go(w);
      return I = St(I, C), I;
    }, indices: () => o };
  }
};
function i0(n, t) {
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
function a0(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e)
    for (let s = 0; s < n[e].length; ++s)
      t.push(n[e][s]);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c3 = {
  kernelName: Ra,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => Nt(e), b: () => Nt(s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u3 = {
  kernelName: $a,
  gradFunc: (n) => ({ x: () => et(n, "float32") })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d3 = {
  kernelName: Ea,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const h3 = {
  kernelName: Ga,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p3 = {
  kernelName: La,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f3 = {
  kernelName: fu,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { alpha: o } = e, r = dn(s, 0);
    return { x: () => Ue(r, n, G(n, o)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const m3 = {
  kernelName: Ma,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, U(e, 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const g3 = {
  kernelName: Da,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, et(e, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const b3 = {
  kernelName: ek,
  inputsToSave: [],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o } = e;
    return {
      logits: () => {
        const i = Fn(s);
        return lt(n, G(at(n, o, !0), i));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x3(n, t, e, s = 5, o = 1, r = 1, i = 0.5) {
  const a = { x: n, y: t, dy: e }, l = { depthRadius: s, bias: o, alpha: r, beta: i };
  return E.runKernel(of, a, l);
}
const y3 = D({ localResponseNormalizationBackprop_: x3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w3 = {
  kernelName: wu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { depthRadius: r, bias: i, alpha: a, beta: l } = e;
    return {
      x: () => y3(s, o, n, r, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ty(n, t, e, s) {
  return t.rank < e.rank && (t = M(t, le(t.shape, s))), n.rank < e.rank && (n = M(n, le(n.shape, s))), {
    x: () => G(n, et(zn(e, t), n.dtype))
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l0 = {
  kernelName: Iu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { reductionIndices: o } = s, r = t[0], i = t[1], a = Ct(o, r.shape), l = Ty(n, i, r, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const I3 = {
  kernelName: za,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => G(n, et(cr(e, s), "float32")), b: () => G(n, et(h1(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C3(n, t, e, s, o, r, i) {
  const a = T(n, "dy", "maxPool3dGrad"), l = T(t, "input", "maxPool3dGrad"), c = T(e, "output", "maxPool3dGrad");
  let u = a, d = l, h = c, p = !1;
  l.rank === 4 && (p = !0, u = M(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]), d = M(l, [
    1,
    l.shape[0],
    l.shape[1],
    l.shape[2],
    l.shape[3]
  ]), h = M(c, [
    1,
    c.shape[0],
    c.shape[1],
    c.shape[2],
    c.shape[3]
  ])), k(u.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), k(d.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${d.rank}.`), k(h.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${h.rank}.`), je("maxPool3dGrad", r, i);
  const f = { dy: u, input: d, output: h }, m = { filterSize: s, strides: o, pad: r, dimRoundingMode: i }, g = E.runKernel(af, f, m);
  return p ? M(g, [g.shape[1], g.shape[2], g.shape[3], g.shape[4]]) : g;
}
const v3 = /* @__PURE__ */ D({ maxPool3dGrad_: C3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k3 = {
  kernelName: vu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = e;
    return {
      x: () => v3(n, s, o, r, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S3(n, t, e, s, o, r, i) {
  const a = T(n, "dy", "maxPoolGrad"), l = T(t, "input", "maxPoolGrad"), c = T(e, "output", "maxPoolGrad");
  k(l.rank === a.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${a.rank})`), k(a.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`), k(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), je("maxPoolGrad", r, i);
  const u = { dy: a, input: l, output: c }, d = { filterSize: s, strides: o, pad: r, dimRoundingMode: i };
  return E.runKernel(rf, u, d);
}
const T3 = /* @__PURE__ */ D({ maxPoolGrad_: S3 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N3 = {
  kernelName: Cu,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { filterSize: r, strides: i, pad: a } = e;
    return {
      x: () => T3(n, s, o, r, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const R3 = {
  kernelName: ku,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o } = e, r = Ct(o, s.shape), a = Ce(s.shape, r)[1], l = X(a);
    return { x: () => {
      const u = s.shape.slice();
      r.forEach((p) => {
        u[p] = 1;
      });
      const d = M(n, u);
      return ut(G(d, xo(s.shape, "float32")), l);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $3 = {
  kernelName: Su,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { axis: o } = s, [r, i] = t, a = Ct(o, r.shape), l = Ty(n, i, r, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E3 = {
  kernelName: Fa,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => G(n, et(ti(e, s), "float32")), b: () => G(n, et(dn(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G3 = {
  kernelName: Tu,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: o } = e, r = o.map((i) => i[0]);
    return { x: () => Wt(n, r, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const L3 = {
  kernelName: Wa,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = bt(e.shape, s.shape);
    return { a: () => {
      const a = de(e.shape, o);
      return a.length > 0 ? M(at(n, a), e.shape) : n;
    }, b: () => {
      const a = G(n, ee(Ju(ut(e, s)))), l = de(s.shape, o);
      return l.length > 0 ? M(at(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D3 = {
  kernelName: Va,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = bt(e.shape, s.shape);
    return { a: () => {
      const a = G(n, et(s, "float32")), l = de(e.shape, o);
      return l.length > 0 ? M(at(a, l), e.shape) : a;
    }, b: () => {
      const a = G(n, et(e, "float32")), l = de(s.shape, o);
      return l.length > 0 ? M(at(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M3 = {
  kernelName: Nu,
  gradFunc: (n) => ({ x: () => ee(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const z3 = {
  kernelName: Eu,
  inputsToSave: ["indices"],
  gradFunc: (n, t) => {
    const e = t[0];
    return { indices: () => ye(e.shape, "float32") };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F3 = {
  kernelName: $u,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W3 = {
  kernelName: Gu,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return Jo(n, s).map((r) => () => r);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c0 = {
  kernelName: Lu,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: o } = e, r = o.map((i) => i[0]);
    return { x: () => Wt(n, r, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const V3 = {
  kernelName: _a,
  inputsToSave: ["a", "b"],
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e, s, o] = t, r = e, i = s, a = bt(r.shape, i.shape);
    return { a: () => {
      const u = et(i, "float32");
      let d = G(n, G(u, Vr(r, lt(u, gt(1)))));
      const h = de(r.shape, a);
      return h.length > 0 && (d = at(d, h)), M(d, r.shape);
    }, b: () => {
      const u = dn(r, 0), d = Ue(u, Wn(r), Nt(r));
      let h = G(n, G(o, d));
      const p = de(i.shape, a);
      return p.length > 0 && (h = at(h, p)), M(h, i.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _3 = {
  kernelName: Du,
  inputsToSave: ["x", "alpha"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = dn(e, 0);
    return {
      x: () => Ue(o, n, G(n, s)),
      alpha: () => {
        let r = Ue(o, Nt(n), G(n, e));
        const i = de(s.shape, n.shape);
        return i.length > 0 && (r = at(r, i)), M(r, s.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A3(n, t, e) {
  const s = n.shape.slice();
  s[e] = 1;
  const o = M(t, s), r = Uh(n, e, !0, !1), i = Uh(n, e, !0, !0), a = G(r, i);
  return G(o, a);
}
function O3(n, t, e) {
  const s = n.shape.length, o = s - e.length, r = ne(e, s);
  let i = n;
  r != null && (i = St(n, r));
  const a = i.shape.slice(), c = a.splice(s - e.length, e.length).reduce((h, p) => h * p, 1);
  a.push(c);
  const u = i.reshape(a);
  let d = A3(u, t, o);
  if (d = d.reshape(i.shape), r != null) {
    const h = go(r);
    d = St(d, h);
  }
  return d;
}
const X3 = {
  kernelName: Mu,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o } = e;
    let r = [];
    return o == null ? r = s.shape.map((i, a) => a) : typeof o == "number" ? r = [o] : r = o, { x: () => O3(s, n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P3 = {
  kernelName: Ia,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = bt(e.shape, s.shape);
    return { a: () => {
      const a = ut(n, et(s, "float32")), l = de(e.shape, o);
      return l.length > 0 ? M(at(a, l), e.shape) : a;
    }, b: () => {
      let a = G(n, et(e, "float32"));
      const l = de(s.shape, o);
      l.length > 0 && (a = M(at(a, l), s.shape));
      const c = Pt(s);
      return ee(ut(a, et(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Z3 = {
  kernelName: Aa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, ee(Pt(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const K3 = {
  kernelName: Xa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = G(ti(e, 6), dl(e));
    return { x: () => G(n, et(s, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const B3 = {
  kernelName: Oa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, et(dl(e), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const H3 = {
  kernelName: zu,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => M(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const U3 = {
  kernelName: Wu,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, o = { dy: n, images: s };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      E.runKernel(ff, o, e)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y3 = {
  kernelName: Fu,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, o = { dy: n, images: s };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      E.runKernel(pf, o, e)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q3 = {
  kernelName: Vu,
  gradFunc: (n, t, e) => {
    const { dims: s } = e, o = Ct(s, n.shape);
    return { x: () => jo(n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j3 = {
  kernelName: Pa,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J3 = {
  kernelName: Za,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ee(ut(n, G(Vr(e, 1.5), 2))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q3 = {
  kernelName: _u,
  inputsToSave: ["condition"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      // TODO(julianoks): Return null for condition gradient
      // when backprop supports it.
      condition: () => et(Nt(e), "float32"),
      t: () => G(n, et(e, n.dtype)),
      e: () => G(n, et(Uf(e), n.dtype))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tL = {
  kernelName: Ka,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = dn(e, gt(0)), o = gt(id), r = gt(ad), i = G(n, r), a = G(G(n, o), Fn(et(e, "float32")));
        return Ue(s, i, a);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eL = {
  kernelName: Ya,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, G(e, lt(gt(1), e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nL = {
  kernelName: Ua,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sL = {
  kernelName: Ba,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(Of(et(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oL = {
  kernelName: Ha,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(a1(et(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rL = {
  kernelName: Au,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { begin: o, size: r } = e, i = s.shape, [a, l] = sd(s, o, r), c = [];
    for (let u = 0; u < n.rank; u++)
      c.push([a[u], i[u] - a[u] - l[u]]);
    return { x: () => jf(n, c) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iL = {
  kernelName: Zu,
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { dim: o } = e, r = !0, i = G(n, s);
    return {
      logits: () => lt(i, G(at(i, [o], r), s))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aL = {
  kernelName: Qa,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, qr(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u0 = {
  kernelName: Xu,
  gradFunc: (n, t, e) => {
    const { blockShape: s, paddings: o } = e;
    return { x: () => _f(n, s, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d0 = {
  kernelName: Pu,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return { x: () => ze(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lL = {
  kernelName: ja,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, G(Ae(et(e, "float32")), 2)) };
  }
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cL = {
  kernelName: yf,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(n, G(et(e, "float32"), 2)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uL = {
  kernelName: Ja,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = gt(2);
    return { a: () => G(n, G(o, lt(e, s))), b: () => G(n, G(o, lt(s, e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dL = {
  kernelName: sl,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hL = {
  kernelName: qa,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = bt(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = de(e.shape, o);
      return l.length > 0 && (a = at(a, l)), M(a, e.shape);
    }, b: () => {
      let a = n;
      const l = de(s.shape, o);
      return l.length > 0 && (a = at(a, l)), M(ee(a), s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pL = {
  kernelName: Ou,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, o = s.shape.slice(), { axis: r } = e;
    Ct(r, s.shape).forEach((c) => {
      o[c] = 1;
    });
    const a = M(n, o), l = G(a, xo(s.shape, "float32"));
    return { x: () => l };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fL = {
  kernelName: tl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => ut(n, Pt(Of(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mL = {
  kernelName: el,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => G(lt(gt(1), Pt(e)), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gL = {
  kernelName: nl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { reps: o } = e;
    return { x: () => {
      let i = Nt(s);
      if (s.rank === 1)
        for (let a = 0; a < o[0]; ++a)
          i = U(i, Wt(n, [a * s.shape[0]], [s.shape[0]]));
      else if (s.rank === 2)
        for (let a = 0; a < o[0]; ++a)
          for (let l = 0; l < o[1]; ++l)
            i = U(i, Wt(n, [a * s.shape[0], l * s.shape[1]], [
              s.shape[0],
              s.shape[1]
            ]));
      else if (s.rank === 3)
        for (let a = 0; a < o[0]; ++a)
          for (let l = 0; l < o[1]; ++l)
            for (let c = 0; c < o[2]; ++c)
              i = U(i, Wt(n, [a * s.shape[0], l * s.shape[1], c * s.shape[2]], [s.shape[0], s.shape[1], s.shape[2]]));
      else if (s.rank === 4)
        for (let a = 0; a < o[0]; ++a)
          for (let l = 0; l < o[1]; ++l)
            for (let c = 0; c < o[2]; ++c)
              for (let u = 0; u < o[3]; ++u)
                i = U(i, Wt(n, [
                  a * s.shape[0],
                  l * s.shape[1],
                  c * s.shape[2],
                  u * s.shape[3]
                ], [s.shape[0], s.shape[1], s.shape[2], s.shape[3]]));
      else
        throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
      return i;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bL = {
  kernelName: Rr,
  gradFunc: (n, t, e) => {
    const s = e, { perm: o } = s, r = go(o);
    return { x: () => St(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xL = {
  kernelName: Ku,
  gradFunc: (n, t, e) => {
    const s = e, { axis: o } = s;
    return { value: () => ys(n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yL = {
  kernelName: Bu,
  inputsToSave: ["segmentIds"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => wL(n, e) };
  }
};
function wL(n, t) {
  const e = bo(t, Nt(t)), s = Zf(n, e);
  let o = cr(t, gt(0, "int32"));
  const r = s.rank - o.rank;
  for (let a = 0; a < r; ++a)
    o = tn(o, a + 1);
  o = xs(o, xo(s.shape, "bool"));
  const i = Nt(s);
  return Ue(o, s, i);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IL = {
  kernelName: Hu,
  gradFunc: (n) => ({ x: () => Nt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CL = [
  Sy,
  yG,
  wG,
  IG,
  CG,
  vG,
  kG,
  SG,
  TG,
  NG,
  RG,
  $G,
  LG,
  zG,
  FG,
  WG,
  VG,
  _G,
  AG,
  OG,
  XG,
  PG,
  KG,
  ZG,
  UG,
  YG,
  QG,
  jG,
  JG,
  qG,
  P3,
  t3,
  e3,
  n3,
  s3,
  o3,
  i3,
  r3,
  a3,
  l3,
  c3,
  u3,
  d3,
  h3,
  p3,
  f3,
  m3,
  g3,
  b3,
  w3,
  l0,
  l0,
  I3,
  k3,
  N3,
  R3,
  $3,
  E3,
  G3,
  L3,
  D3,
  M3,
  z3,
  F3,
  W3,
  c0,
  c0,
  V3,
  _3,
  X3,
  Z3,
  K3,
  B3,
  H3,
  U3,
  Y3,
  Q3,
  j3,
  J3,
  q3,
  tL,
  eL,
  nL,
  sL,
  oL,
  rL,
  iL,
  aL,
  u0,
  u0,
  d0,
  d0,
  lL,
  uL,
  cL,
  dL,
  hL,
  pL,
  fL,
  mL,
  gL,
  bL,
  xL,
  yL,
  IL
];
for (const n of CL)
  sk(n);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.abs = function() {
  return this.throwIfDisposed(), be(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.acos = function() {
  return this.throwIfDisposed(), pS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.acosh = function() {
  return this.throwIfDisposed(), mS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.add = function(n) {
  return this.throwIfDisposed(), U(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.all = function(n, t) {
  return this.throwIfDisposed(), s1(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.any = function(n, t) {
  return this.throwIfDisposed(), Bh(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.argMax = function(n) {
  return this.throwIfDisposed(), Ai(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.argMin = function(n) {
  return this.throwIfDisposed(), wS(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.asScalar = function() {
  return this.throwIfDisposed(), k(this.size === 1, () => "The array must have only 1 element."), M(this, []);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.asType = function(n) {
  return this.throwIfDisposed(), et(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.as1D = function() {
  return this.throwIfDisposed(), M(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.as2D = function(n, t) {
  return this.throwIfDisposed(), M(this, [n, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.as3D = function(n, t, e) {
  return this.throwIfDisposed(), M(this, [n, t, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.as4D = function(n, t, e, s) {
  return this.throwIfDisposed(), M(this, [n, t, e, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.as5D = function(n, t, e, s, o) {
  return this.throwIfDisposed(), M(this, [n, t, e, s, o]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.asin = function() {
  return this.throwIfDisposed(), CS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.asinh = function() {
  return this.throwIfDisposed(), kS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.atan = function() {
  return this.throwIfDisposed(), TS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.atan2 = function(n) {
  return this.throwIfDisposed(), RS(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.atanh = function() {
  return this.throwIfDisposed(), ES(this);
};
P().prototype.avgPool = function(n, t, e, s) {
  return this.throwIfDisposed(), Wf(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.batchToSpaceND = function(n, t) {
  return this.throwIfDisposed(), _f(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.batchNorm = function(n, t, e, s, o) {
  return this.throwIfDisposed(), Yu(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.broadcastTo = function(n) {
  return this.throwIfDisposed(), Li(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.cast = function(n) {
  return this.throwIfDisposed(), et(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.ceil = function() {
  return this.throwIfDisposed(), sT(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.clipByValue = function(n, t) {
  return this.throwIfDisposed(), Cn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.concat = function(n, t) {
  return this.throwIfDisposed(), n instanceof Mt && (n = [n]), ze([this, ...n], t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.conv1d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), o1(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.conv2dTranspose = function(n, t, e, s, o) {
  return this.throwIfDisposed(), r1(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.conv2d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), Uo(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.cos = function() {
  return this.throwIfDisposed(), Of(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.cosh = function() {
  return this.throwIfDisposed(), a1(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.cumprod = function(n, t, e) {
  return this.throwIfDisposed(), Uh(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.cumsum = function(n, t, e) {
  return this.throwIfDisposed(), l1(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.depthToSpace = function(n, t) {
  return this.throwIfDisposed(), RT(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.depthwiseConv2d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), Xf(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.dilation2d = function(n, t, e, s, o) {
  return this.throwIfDisposed(), GT(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.divNoNan = function(n) {
  return this.throwIfDisposed(), FT(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.div = function(n) {
  return this.throwIfDisposed(), ut(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.dot = function(n) {
  return this.throwIfDisposed(), VT(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.elu = function() {
  return this.throwIfDisposed(), Qu(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.equal = function(n) {
  return this.throwIfDisposed(), zn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.erf = function() {
  return this.throwIfDisposed(), OT(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.euclideanNorm = function(n, t) {
  return this.throwIfDisposed(), QT(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.exp = function() {
  return this.throwIfDisposed(), Fn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.expandDims = function(n) {
  return this.throwIfDisposed(), tn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.expm1 = function() {
  return this.throwIfDisposed(), tN(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.fft = function() {
  return this.throwIfDisposed(), om(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.flatten = function() {
  return this.throwIfDisposed(), M(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.floor = function() {
  return this.throwIfDisposed(), Ju(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.floorDiv = function(n) {
  return this.throwIfDisposed(), n1(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.gather = function(n, t) {
  return this.throwIfDisposed(), Zf(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.greaterEqual = function(n) {
  return this.throwIfDisposed(), cr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.greater = function(n) {
  return this.throwIfDisposed(), dn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.ifft = function() {
  return this.throwIfDisposed(), Ic(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.irfft = function() {
  return this.throwIfDisposed(), S1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.isFinite = function() {
  return this.throwIfDisposed(), cN(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.isInf = function() {
  return this.throwIfDisposed(), dN(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.isNaN = function() {
  return this.throwIfDisposed(), pN(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.leakyRelu = function(n) {
  return this.throwIfDisposed(), Bf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.lessEqual = function(n) {
  return this.throwIfDisposed(), ti(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.less = function(n) {
  return this.throwIfDisposed(), h1(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.localResponseNormalization = function(n, t, e, s) {
  return this.throwIfDisposed(), xN(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), SN(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.logSoftmax = function(n) {
  return this.throwIfDisposed(), p1(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.logSumExp = function(n, t) {
  return this.throwIfDisposed(), f1(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.log = function() {
  return this.throwIfDisposed(), Wn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.log1p = function() {
  return this.throwIfDisposed(), Hf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.logicalAnd = function(n) {
  return this.throwIfDisposed(), xs(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.logicalNot = function() {
  return this.throwIfDisposed(), Uf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.logicalOr = function(n) {
  return this.throwIfDisposed(), m1(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.logicalXor = function(n) {
  return this.throwIfDisposed(), DN(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.matMul = function(n, t, e) {
  return this.throwIfDisposed(), Gt(this, n, t, e);
};
P().prototype.maxPool = function(n, t, e, s) {
  return this.throwIfDisposed(), Yf(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.max = function(n, t) {
  return this.throwIfDisposed(), Qn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.maximum = function(n) {
  return this.throwIfDisposed(), bo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.mean = function(n, t) {
  return this.throwIfDisposed(), ie(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.min = function(n, t) {
  return this.throwIfDisposed(), xc(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.minimum = function(n) {
  return this.throwIfDisposed(), td(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.mirrorPad = function(n, t) {
  return this.throwIfDisposed(), ON(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.mod = function(n) {
  return this.throwIfDisposed(), PN(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.mul = function(n) {
  return this.throwIfDisposed(), G(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.neg = function() {
  return this.throwIfDisposed(), ee(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.norm = function(n, t, e) {
  return this.throwIfDisposed(), ju(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.notEqual = function(n) {
  return this.throwIfDisposed(), Pi(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.oneHot = function(n, t = 1, e = 0) {
  return this.throwIfDisposed(), g1(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.onesLike = function() {
  return this.throwIfDisposed(), Vn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.pad = function(n, t) {
  return this.throwIfDisposed(), jf(this, n, t);
};
P().prototype.pool = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), qN(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.pow = function(n) {
  return this.throwIfDisposed(), Vr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.prelu = function(n) {
  return this.throwIfDisposed(), qf(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.prod = function(n, t) {
  return this.throwIfDisposed(), nR(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.reciprocal = function() {
  return this.throwIfDisposed(), SR(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.relu = function() {
  return this.throwIfDisposed(), Vs(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.relu6 = function() {
  return this.throwIfDisposed(), b1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.reshapeAs = function(n) {
  return this.throwIfDisposed(), M(this, n.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.reshape = function(n) {
  return this.throwIfDisposed(), M(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.resizeBilinear = function(n, t, e) {
  return this.throwIfDisposed(), M1(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.resizeNearestNeighbor = function(n, t, e) {
  return this.throwIfDisposed(), z1(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.reverse = function(n) {
  return this.throwIfDisposed(), jo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.rfft = function() {
  return this.throwIfDisposed(), rm(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.round = function() {
  return this.throwIfDisposed(), x1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.rsqrt = function() {
  return this.throwIfDisposed(), y1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.selu = function() {
  return this.throwIfDisposed(), w1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.separableConv2d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), I1(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.sigmoid = function() {
  return this.throwIfDisposed(), qr(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.sign = function() {
  return this.throwIfDisposed(), MR(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.sin = function() {
  return this.throwIfDisposed(), C1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.sinh = function() {
  return this.throwIfDisposed(), v1(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.slice = function(n, t) {
  return this.throwIfDisposed(), Wt(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.softmax = function(n) {
  return this.throwIfDisposed(), sm(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.softplus = function() {
  return this.throwIfDisposed(), cl(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.spaceToBatchND = function(n, t) {
  return this.throwIfDisposed(), Jf(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.split = function(n, t) {
  return this.throwIfDisposed(), yn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.sqrt = function() {
  return this.throwIfDisposed(), Ae(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.square = function() {
  return this.throwIfDisposed(), Pt(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.squaredDifference = function(n) {
  return this.throwIfDisposed(), T1(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.squeeze = function(n) {
  return this.throwIfDisposed(), ul(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.stack = function(n, t) {
  this.throwIfDisposed();
  const e = n instanceof Mt ? [this, n] : [this, ...n];
  return ys(e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.step = function(n) {
  return this.throwIfDisposed(), dl(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.stridedSlice = function(n, t, e, s, o, r, i, a) {
  return this.throwIfDisposed(), JR(this, n, t, e, s, o, r, i, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.sub = function(n) {
  return this.throwIfDisposed(), lt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.sum = function(n, t) {
  return this.throwIfDisposed(), at(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.tan = function() {
  return this.throwIfDisposed(), t$(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.tanh = function() {
  return this.throwIfDisposed(), Vf(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.tile = function(n) {
  return this.throwIfDisposed(), Un(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.toBool = function() {
  return this.throwIfDisposed(), et(this, "bool");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.toFloat = function() {
  return this.throwIfDisposed(), et(this, "float32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.toInt = function() {
  return this.throwIfDisposed(), et(this, "int32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.topk = function(n, t) {
  return this.throwIfDisposed(), s$(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.transpose = function(n) {
  return this.throwIfDisposed(), St(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.unique = function(n) {
  return this.throwIfDisposed(), i$(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.unsortedSegmentSum = function(n, t) {
  return this.throwIfDisposed(), R1(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.unstack = function(n) {
  return this.throwIfDisposed(), Jo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.where = function(n, t) {
  return this.throwIfDisposed(), Ue(n, this, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
P().prototype.zerosLike = function() {
  return this.throwIfDisposed(), Nt(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class as extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, as.prototype);
  }
}
class Ln extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Ln.prototype);
  }
}
class L extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, L.prototype);
  }
}
class xt extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, xt.prototype);
  }
}
class Xm extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Xm.prototype);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Ny {
  constructor(t) {
    this.maxEntries = t || 100, this.cache = /* @__PURE__ */ new Map();
  }
  /**
   * Get the entry for the key and mark it as used recently.
   */
  get(t) {
    let e;
    return this.cache.has(t) && (e = this.cache.get(t), this.cache.delete(t), this.cache.set(t, e)), e;
  }
  /**
   * Put the entry into the cache. If the key already existed, mark the key as
   * used recently.
   */
  put(t, e) {
    if (this.cache.has(t))
      this.cache.delete(t);
    else if (this.cache.size >= this.maxEntries) {
      const s = this.cache.keys().next().value;
      this.cache.delete(s);
    }
    this.cache.set(t, e);
  }
  /**
   * Get the MaxEntries of the cache.
   */
  getMaxEntries() {
    return this.maxEntries;
  }
  /**
   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce
   * entries in the cache.
   */
  setMaxEntries(t) {
    if (t < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);
    if (this.maxEntries > t)
      for (let e = 0; e < this.maxEntries - t; e++) {
        const s = this.cache.keys().next().value;
        this.cache.delete(s);
      }
    this.maxEntries = t;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function tr(n, t) {
  if (Array.isArray(n)) {
    let e = [];
    for (let s = 0; s < t; s++)
      e = e.concat(n);
    return e;
  } else {
    const e = new Array(t);
    return e.fill(n), e;
  }
}
function ls(n, t) {
  if (!n)
    throw new Xm(t);
}
function h0(n, t) {
  let e = 0;
  for (const s of n)
    s === t && e++;
  return e;
}
function Ke(n) {
  return n.length === 1 ? n[0] : n;
}
function Bt(n) {
  return Array.isArray(n) ? n : [n];
}
function Ss(n) {
  const e = n.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return e[0] !== "_" ? e : "private" + e;
}
function $o(n) {
  return n.length <= 1 || n.indexOf("_") === -1 ? n : n.replace(/[_]+(\w|$)/g, (t, e) => e.toUpperCase());
}
let kn = {};
function Pm(n) {
  if (n == null)
    return null;
  const t = {};
  return t.className = n.getClassName(), t.config = n.getConfig(), t;
}
function op(n) {
  if (!(n == null || typeof n != "object"))
    if (Array.isArray(n))
      n.forEach((t) => op(t));
    else {
      const t = Object.keys(n);
      for (const e of t) {
        const s = n[e];
        s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? n[e] = s.value : op(s));
      }
    }
}
function ml(n, t = {}, e = {}, s = "object", o = !1) {
  if (typeof n == "string") {
    const r = n;
    let i;
    if (r in e)
      i = e[r];
    else if (r in kn)
      i = kn[r];
    else if (i = t[r], i == null)
      throw new L(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return i;
  } else {
    const r = n;
    if (r.className == null || r.config == null)
      throw new L(`${s}: Improper config format: ${JSON.stringify(r)}.
'className' and 'config' must set.`);
    const i = r.className;
    let a, l;
    if (i in e ? [a, l] = e[i] : i in kn ? [a, l] = kn.className : i in t && ([a, l] = t[i]), a == null)
      throw new L(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      const c = {};
      for (const p of Object.keys(kn))
        c[p] = kn[p];
      for (const p of Object.keys(e))
        c[p] = e[p];
      const u = r.config;
      u.customObjects = c;
      const d = Object.assign({}, kn);
      for (const p of Object.keys(e))
        kn[p] = e[p];
      op(r.config);
      const h = l(a, r.config, e, o);
      return kn = Object.assign({}, d), h;
    } else {
      const c = Object.assign({}, kn);
      for (const d of Object.keys(e))
        kn[d] = e[d];
      const u = new a(r.config);
      return kn = Object.assign({}, c), u;
    }
  }
}
function vL(n, t) {
  return n < t ? -1 : n > t ? 1 : 0;
}
function Wl(n, t) {
  return -1 * vL(n, t);
}
function to(n) {
  if (n == null)
    return n;
  const t = [];
  for (const e of n)
    t.indexOf(e) === -1 && t.push(e);
  return t;
}
function kL(n) {
  if (n == null)
    throw new L(`Invalid value in obj: ${JSON.stringify(n)}`);
  for (const t in n)
    if (n.hasOwnProperty(t))
      return !1;
  return !0;
}
function hr(n, t, e) {
  if (e != null && n.indexOf(e) < 0)
    throw new L(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`);
}
function Zm(n, t, e = 0, s = 1 / 0) {
  return ls(e >= 0), ls(s >= e), Array.isArray(n) && n.length >= e && n.length <= s && n.every((o) => typeof o === t);
}
function we(n, t) {
  Array.isArray(n) ? (k(n.length > 0, () => `${t} is unexpectedly an empty array.`), n.forEach((e, s) => we(e, `element ${s + 1} of ${t}`))) : k(Number.isInteger(n) && n > 0, () => `Expected ${t} to be a positive integer, but got ${Ry(n)}.`);
}
function Ry(n) {
  return n === null ? "null" : Array.isArray(n) ? "[" + n.map((t) => Ry(t)).join(",") + "]" : typeof n == "string" ? `"${n}"` : `${n}`;
}
function SL(n, t, e) {
  let s = e != null ? e() : Te(), o;
  return (...i) => {
    const a = e != null ? e() : Te();
    return a - s < t || (s = a, o = n(...i)), o;
  };
}
function $y(n) {
  return n === "relu" ? "relu" : n === "linear" ? "linear" : n === "elu" ? "elu" : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let TL = 0;
function Ey() {
  return TL++;
}
const Vl = {};
function ld(n = "") {
  return n in Vl || (Vl[n] = 0), Vl[n] += 1, n + Vl[n].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const NL = ["channelsFirst", "channelsLast"], RL = ["nearest", "bilinear"], $L = ["valid", "same", "causal"], EL = ["max", "avg"], GL = ["sum", "mul", "concat", "ave"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const yr = /* @__PURE__ */ new Map();
function ue(n) {
  hr(NL, "DataFormat", n);
}
function LL(n) {
  hr(RL, "InterpolationFormat", n);
}
function vn(n) {
  hr($L, "PaddingMode", n);
}
function Gy(n) {
  hr(EL, "PoolMode", n);
}
const Di = [], p0 = "/";
function Ao(n, t) {
  Di.push(n);
  try {
    const e = t();
    return Di.pop(), e;
  } catch (e) {
    throw Di.pop(), e;
  }
}
function DL() {
  return Di.length === 0 ? "" : Di.join(p0) + p0;
}
function Ly(n) {
  if (!My(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  return DL() + n;
}
function Dy(n) {
  if (!My(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  yr.has(n) || yr.set(n, 0);
  const t = yr.get(n);
  if (yr.set(n, yr.get(n) + 1), t > 0) {
    const e = `${n}_${t}`;
    return yr.set(e, 1), e;
  } else
    return n;
}
const ML = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function My(n) {
  return !!n.match(ML);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function zL(n) {
  return n === parseInt(n.toString(), 10);
}
function eo(n, t, e) {
  t == null && (t = 0), e == null && (e = n.length);
  let s = 1;
  for (let o = t; o < e; ++o)
    s *= n[o];
  return s;
}
function _r(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.POSITIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s < t && (t = s);
  }
  return t;
}
function lo(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.NEGATIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s > t && (t = s);
  }
  return t;
}
function qn(n, t) {
  if (t < n)
    throw new L(`end (${t}) < begin (${n}) is forbidden.`);
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Vd;
function pe() {
  return Vd == null && (Vd = Us().epsilon()), Vd;
}
function ts() {
  return "channelsLast";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function fs(n, t) {
  return et(n, t);
}
function gl(n, t = -1) {
  const e = n.shape.slice();
  return t < 0 && (t = e.length + t + 1), e.splice(t, 0, 1), M(n, e);
}
function FL(n, t) {
  return z(() => {
    if (n.shape.length !== 2)
      throw new L(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);
    const e = gl(n, 1);
    return rp(e, [1, t, 1]);
  });
}
function WL(n) {
  const t = [eo(n.shape)];
  return M(n, t);
}
function VL(n) {
  if (n.rank <= 1)
    throw new L(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);
  const t = [n.shape[0], eo(n.shape, 1)];
  return M(n, t);
}
function Oo(n, t, e) {
  return z(() => {
    switch (n.rank) {
      case 1:
        return em(n, t, e);
      case 2:
        return k1(n, [t, 0], [e, n.shape[1]]);
      case 3:
        return nm(n, [t, 0, 0], [e, n.shape[1], n.shape[2]]);
      case 4:
        return wc(n, [t, 0, 0, 0], [e, n.shape[1], n.shape[2], n.shape[3]]);
      case 5:
        return Wt(n, [t, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4]
        ]);
      case 6:
        return Wt(n, [t, 0, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4],
          n.shape[5]
        ]);
      default:
        throw new L(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function _d(n, t, e) {
  return z(() => {
    switch (n.rank) {
      case 1:
        return em(n, t, e);
      case 2:
        return k1(n, [0, t], [n.shape[0], e]);
      case 3:
        return nm(n, [0, 0, t], [n.shape[0], n.shape[1], e]);
      case 4:
        return wc(n, [0, 0, 0, t], [n.shape[0], n.shape[1], n.shape[2], e]);
      default:
        throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function _l(n, t, e, s) {
  return z(() => {
    switch (n.rank) {
      case 1:
        return em(n, t, e);
      case 2:
        switch (s) {
          case 1:
            return Oo(n, t, e);
          case 2:
            return _d(n, t, e);
          default:
            throw new L(`The axis is not within the rank of the tensor ${s}`);
        }
      case 3:
        switch (s) {
          case 1:
            return Oo(n, t, e);
          case 2:
            return nm(n, [0, t, 0], [n.shape[0], e, n.shape[2]]);
          case 3:
            return _d(n, t, e);
          default:
            throw new L(`The axis is not within the rank of the tensor ${s}`);
        }
      case 4:
        switch (s) {
          case 1:
            return Oo(n, t, e);
          case 2:
            return wc(n, [0, t, 0, 0], [n.shape[0], e, n.shape[2], n.shape[3]]);
          case 3:
            return wc(n, [0, 0, t, 0], [n.shape[0], n.shape[1], e, n.shape[3]]);
          case 4:
            return _d(n, t, e);
          default:
            throw new L(`The axis is not within the rank of the tensor ${s}`);
        }
      default:
        throw new L(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Km(n, t = -1) {
  let e;
  return t < 0 && (e = n[0].rank, e !== 0 ? t = e : t = 0), t === n[0].rank && (t = -1), ze(n, t);
}
function f0(n, t) {
  switch (n.rank) {
    case 1:
      return iT([n, t]);
    case 2:
      return lT([n, t], 0);
    case 3:
      return uT([n, t], 0);
    case 4:
      return hT([n, t], 0);
    default:
      throw new L(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
  }
}
function rp(n, t) {
  if (Array.isArray(t) || (t = [t]), n.rank !== t.length)
    throw new L(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);
  return Un(n, t);
}
function cd(n, t = 0, e = 1, s, o) {
  return IR(n, t, e, s, o);
}
function ms(n, t, e, s) {
  if (n.rank < 2 || t.rank < 2)
    throw new xt(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);
  if (t.rank >= 3) {
    const o = n.shape.slice(-1)[0], r = t.shape.slice(-2)[0];
    if (o !== r)
      throw new xt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);
  }
  if (n.rank === 2 && t.rank === 2)
    return Jg({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? ip(n.rank, s, ts()) : null,
      activation: e
    });
  {
    const o = n.shape.slice(), r = o.pop();
    n = M(n, [-1, r]);
    const i = t.shape.slice(), a = i.pop(), l = i.pop(), c = [...i, a], u = Array.from({ length: t.rank }, (f, m) => m === 0 ? t.rank - 2 : m <= t.rank - 2 ? m - 1 : m);
    t = M(St(t, u), [l, -1]);
    const d = [...o, ...c];
    return M(Jg({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? ip(n.rank, s, ts()) : null,
      activation: e
    }), d);
  }
}
function zy(n, t, e) {
  return z(() => (Array.isArray(t) ? t = sn(t, "int32") : t = et(t, "int32"), Zf(n, t, e)));
}
function bl(n) {
  return G(n, n);
}
function ip(n, t, e) {
  const s = t.shape;
  if (t.rank !== 1 && t.rank !== n)
    throw new L(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);
  if (n === 5) {
    if (e === "channelsFirst")
      return s.length === 1 ? M(t, [1, s[0], 1, 1, 1]) : M(t, [1, s[3], s[0], s[1], s[2]]);
    if (e === "channelsLast")
      return s.length === 1 ? M(t, [1, 1, 1, 1, s[0]]) : M(t, [1].concat(s));
  } else if (n === 4) {
    if (e === "channelsFirst")
      return s.length === 1 ? M(t, [1, s[0], 1, 1]) : M(t, [1, s[2], s[0], s[1]]);
    if (e === "channelsLast")
      return s.length === 1 ? M(t, [1, 1, 1, s[0]]) : M(t, [1].concat(s));
  } else if (n === 3) {
    if (e === "channelsFirst")
      return s.length === 1 ? M(t, [1, s[0], 1]) : M(t, [1, s[1], s[0]]);
    if (e === "channelsLast")
      return s.length === 1 ? M(t, [1, 1, s[0]]) : M(t, [1].concat(s));
  } else if (n < 3)
    return t;
  throw new L(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function ss(n, t, e) {
  return z(() => (e == null && (e = ts()), ue(e), U(n, ip(n.rank, t, e))));
}
function _L(n, t = 1) {
  if (t !== 1)
    throw new xt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);
  return Qu(n);
}
function AL(n) {
  return z(() => ut(n, U(be(n), 1)));
}
function Fy(n, t, e, s) {
  return z(() => p$(n, t, e, s));
}
function OL(n) {
  return z(() => {
    const t = U(0.5, G(0.2, n));
    return Cn(t, 0, 1);
  });
}
function xl(n, t, e = !1) {
  return e ? n() : t();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const XL = ["fanIn", "fanOut", "fanAvg"], PL = ["normal", "uniform", "truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ZL(n) {
  hr(XL, "FanMode", n);
}
function KL(n) {
  hr(PL, "Distribution", n);
}
class On extends dr {
  fromConfigUsesCustomObjects() {
    return !1;
  }
  getConfig() {
    return {};
  }
}
class Wy extends On {
  apply(t, e) {
    return ye(t, e);
  }
}
Wy.className = "Zeros";
H(Wy);
class Bm extends On {
  apply(t, e) {
    return xo(t, e);
  }
}
Bm.className = "Ones";
H(Bm);
class Vy extends On {
  constructor(t) {
    if (super(), typeof t != "object")
      throw new L(`Expected argument of type ConstantConfig but got ${t}`);
    if (t.value === void 0)
      throw new L(`config must have value set but got ${t}`);
    this.value = t.value;
  }
  apply(t, e) {
    return z(() => G(gt(this.value), xo(t, e)));
  }
  getConfig() {
    return {
      value: this.value
    };
  }
}
Vy.className = "Constant";
H(Vy);
class _y extends On {
  constructor(t) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = t.minval || this.DEFAULT_MINVAL, this.maxval = t.maxval || this.DEFAULT_MAXVAL, this.seed = t.seed;
  }
  apply(t, e) {
    return ed(t, this.minval, this.maxval, e, this.seed);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
_y.className = "RandomUniform";
H(_y);
class Ay extends On {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new xt(`randomNormal does not support dType ${e}.`);
    return cd(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Ay.className = "RandomNormal";
H(Ay);
class Oy extends On {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new xt(`truncatedNormal does not support dType ${e}.`);
    return N1(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Oy.className = "TruncatedNormal";
H(Oy);
class Xy extends On {
  constructor(t) {
    super(), this.gain = t.gain != null ? t.gain : 1;
  }
  apply(t, e) {
    return z(() => {
      if (t.length !== 2 || t[0] !== t[1])
        throw new L("Identity matrix initializer can only be used for 2D square matrices.");
      return G(this.gain, d1(t[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
Xy.className = "Identity";
H(Xy);
function BL(n, t = "channelsLast") {
  let e, s;
  if (ue(t), n.length === 2)
    e = n[0], s = n[1];
  else if ([3, 4, 5].indexOf(n.length) !== -1) {
    if (t === "channelsFirst") {
      const o = eo(n, 2);
      e = n[1] * o, s = n[0] * o;
    } else if (t === "channelsLast") {
      const o = eo(n, 0, n.length - 2);
      e = n[n.length - 2] * o, s = n[n.length - 1] * o;
    }
  } else {
    const o = eo(n);
    e = Math.sqrt(o), s = Math.sqrt(o);
  }
  return [e, s];
}
class an extends On {
  /**
   * Constructor of VarianceScaling.
   * @throws ValueError for invalid value in scale.
   */
  constructor(t) {
    if (super(), t.scale < 0)
      throw new L(`scale must be a positive float. Got: ${t.scale}`);
    this.scale = t.scale == null ? 1 : t.scale, this.mode = t.mode == null ? "fanIn" : t.mode, ZL(this.mode), this.distribution = t.distribution == null ? "normal" : t.distribution, KL(this.distribution), this.seed = t.seed;
  }
  apply(t, e) {
    const s = BL(t), o = s[0], r = s[1];
    let i = this.scale;
    if (this.mode === "fanIn" ? i /= Math.max(1, o) : this.mode === "fanOut" ? i /= Math.max(1, r) : i /= Math.max(1, (o + r) / 2), this.distribution === "normal") {
      const a = Math.sqrt(i);
      if (e = e || "float32", e !== "float32" && e !== "int32")
        throw new xt(`${this.getClassName()} does not support dType ${e}.`);
      return N1(t, 0, a, e, this.seed);
    } else {
      const a = Math.sqrt(3 * i);
      return ed(t, -a, a, e, this.seed);
    }
  }
  getConfig() {
    return {
      scale: this.scale,
      mode: this.mode,
      distribution: this.distribution,
      seed: this.seed
    };
  }
}
an.className = "VarianceScaling";
H(an);
class Hm extends an {
  /**
   * Constructor of GlorotUniform
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return an.className;
  }
}
Hm.className = "GlorotUniform";
H(Hm);
class Um extends an {
  /**
   * Constructor of GlorotNormal.
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return an.className;
  }
}
Um.className = "GlorotNormal";
H(Um);
class Ym extends an {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return an.className;
  }
}
Ym.className = "HeNormal";
H(Ym);
class Qm extends an {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return an.className;
  }
}
Qm.className = "HeUniform";
H(Qm);
class jm extends an {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return an.className;
  }
}
jm.className = "LeCunNormal";
H(jm);
class Jm extends an {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return an.className;
  }
}
Jm.className = "LeCunUniform";
H(Jm);
class Py extends On {
  constructor(t) {
    if (super(), this.DEFAULT_GAIN = 1, this.gain = t.gain == null ? this.DEFAULT_GAIN : t.gain, this.seed = t.seed, this.seed != null)
      throw new xt("Random seed is not implemented for Orthogonal Initializer yet.");
  }
  apply(t, e) {
    return z(() => {
      if (t.length < 2)
        throw new xt("Shape must be at least 2D.");
      t[0] * t[1] > 2e3 && console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0] * t[1]}) elements: Slowness may result.`);
      const s = t[0] > t[1] ? [t[1], t[0]] : t, o = cd(s, 0, 1, "float32");
      let r = HE.gramSchmidt(o);
      return t[0] > t[1] && (r = St(r)), G(this.gain, r);
    });
  }
  getConfig() {
    return {
      gain: this.gain,
      seed: this.seed
    };
  }
}
Py.className = "Orthogonal";
H(Py);
const m0 = {
  constant: "Constant",
  glorotNormal: "GlorotNormal",
  glorotUniform: "GlorotUniform",
  heNormal: "HeNormal",
  heUniform: "HeUniform",
  identity: "Identity",
  leCunNormal: "LeCunNormal",
  leCunUniform: "LeCunUniform",
  ones: "Ones",
  orthogonal: "Orthogonal",
  randomNormal: "RandomNormal",
  randomUniform: "RandomUniform",
  truncatedNormal: "TruncatedNormal",
  varianceScaling: "VarianceScaling",
  zeros: "Zeros"
};
function g0(n, t = {}) {
  return ml(n, mn.getMap().classNameMap, t, "initializer");
}
function te(n) {
  return Pm(n);
}
function Qt(n) {
  if (typeof n == "string") {
    const t = n in m0 ? m0[n] : n;
    if (t === "GlorotNormal")
      return new Um();
    if (t === "GlorotUniform")
      return new Hm();
    if (t === "HeNormal")
      return new Ym();
    if (t === "HeUniform")
      return new Qm();
    if (t === "LeCunNormal")
      return new jm();
    if (t === "LeCunUniform")
      return new Jm();
    {
      const e = {};
      return e.className = t, e.config = {}, g0(e);
    }
  } else
    return n instanceof On ? n : g0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ap(n) {
  return Array.isArray(n) && Array.isArray(n[0]);
}
function Cc(n) {
  return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function mt(n) {
  let t;
  if (Array.isArray(n)) {
    if (n.length !== 1)
      throw new L(`Expected Tensor length to be 1; got ${n.length}`);
    t = n[0];
  } else
    t = n;
  return t;
}
function Et(n) {
  if (Array.isArray(n) && Array.isArray(n[0])) {
    if (n.length === 1)
      return n = n, n[0];
    throw new L(`Expected exactly 1 Shape; got ${n.length}`);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function vc(n) {
  let t = 0;
  for (const e of n)
    e.shape.length === 0 ? t += 1 : t += e.shape.reduce((s, o) => s * o);
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const b0 = "Variable";
class HL {
  /**
   * Construct Variable from a `tf.Tensor`.
   *
   * If not explicitly named, the Variable will be given a name with the
   * prefix 'Variable'. Variable names are unique. In the case of name
   * collision, suffixies '_<num>' will be added to the name.
   *
   * @param val Initial value of the Variable.
   * @param name Name of the variable. If `null` or `undefined` is provided, it
   *   will default a name with the prefix 'Variable'.
   * @param constraint Optional, projection function to be applied to the
   * variable after optimize updates
   * @throws ValueError if `name` is `null` or `undefined`.
   */
  constructor(t, e = "float32", s = b0, o = !0, r = null) {
    this.dtype = e ?? "float32", this.shape = t.shape, this.id = Ey(), s = s ?? b0, this.originalName = Ly(s), this.name = Dy(this.originalName), this.trainable_ = o, this.constraint = r, this.val = c$(t, this.trainable_, this.name, this.dtype);
  }
  /**
   * Get a snapshot of the Variable's value.
   *
   * The returned value is a snapshot of the Variable's value at the time of
   * the invocation. Future mutations in the value of the tensor will only
   * be reflected by future calls to this method.
   */
  read() {
    return this.assertNotDisposed(), this.val;
  }
  /**
   * Update the value of the Variable.
   *
   * @param newVal: The new value to update to. Must be consistent with the
   *   dtype and shape of the Variable.
   * @return This Variable.
   */
  write(t) {
    return this.assertNotDisposed(), UL(this.val, t), this.val.id !== t.id && (this.val.assign(t), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  /**
   * Dispose this LayersVariable instance from memory.
   */
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.trainable_ = t, this.val.trainable = t;
  }
}
function UL(n, t) {
  if (n.shape.toString() !== t.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(n.shape) + " vs. " + JSON.stringify(t.shape));
}
function lp(n) {
  return n.map((t) => t.read());
}
function qm(n) {
  n.forEach((t) => {
    t[0].write(t[1]);
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class fe {
  constructor(t) {
    this.dtype = t.dtype, this.shape = t.shape, t.shape != null ? this.ndim = t.shape.length : this.ndim = t.ndim, this.maxNDim = t.maxNDim, this.minNDim = t.minNDim, this.axes = t.axes || {};
  }
}
class ds {
  /**
   *
   * @param dtype
   * @param shape
   * @param sourceLayer The Layer that produced this symbolic tensor.
   * @param inputs The inputs passed to sourceLayer's __call__() method.
   * @param nodeIndex
   * @param tensorIndex
   * @param callArgs The keyword arguments passed to the __call__() method.
   * @param name
   * @param outputTensorIndex The index of this tensor in the list of outputs
   *   returned by apply().
   */
  constructor(t, e, s, o, r, i, a) {
    this.dtype = t, this.shape = e, this.sourceLayer = s, this.inputs = o, this.callArgs = r, this.outputTensorIndex = a, this.id = Ey(), i != null && (this.originalName = Ly(i), this.name = Dy(this.originalName)), this.rank = e.length;
  }
}
let YL = 0;
class ud {
  constructor(t, e) {
    this.callArgs = e, this.id = YL++, this.outboundLayer = t.outboundLayer, this.inboundLayers = t.inboundLayers, this.nodeIndices = t.nodeIndices, this.tensorIndices = t.tensorIndices, this.inputTensors = t.inputTensors, this.outputTensors = t.outputTensors, this.inputMasks = t.inputMasks, this.outputMasks = t.outputMasks, this.inputShapes = t.inputShapes, this.outputShapes = t.outputShapes;
    for (const s of t.inboundLayers)
      s != null && s.outboundNodes.push(this);
    t.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const t = [];
    for (const e of this.inboundLayers)
      e != null ? t.push(e.name) : t.push(null);
    return {
      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
      inboundLayers: t,
      nodeIndices: this.nodeIndices,
      tensorIndices: this.tensorIndices
    };
  }
}
let QL = 0;
class kt extends dr {
  constructor(t = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = QL++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = [];
    let e = t.name;
    if (!e) {
      const s = this.getClassName();
      e = Ss(s) + "_" + ld(s);
    }
    if (this.name = e, this.trainable_ = t.trainable == null ? !0 : t.trainable, t.inputShape != null || t.batchInputShape != null) {
      let s;
      if (t.batchInputShape != null)
        s = t.batchInputShape;
      else if (t.inputShape != null) {
        let r = null;
        t.batchSize != null && (r = t.batchSize), s = [r].concat(t.inputShape);
      }
      this.batchInputShape = s;
      let o = t.dtype;
      o == null && (o = t.inputDType), o == null && (o = "float32"), this.dtype = o;
    }
    t.weights != null ? this.initialWeights = t.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1;
  }
  /**
   * Converts a layer and its index to a unique (immutable type) name.
   * This function is used internally with `this.containerNodes`.
   * @param layer The layer.
   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
   *   nodes.
   *
   * @returns The unique name.
   */
  static nodeKey(t, e) {
    return t.name + "_ib-" + e.toString();
  }
  /**
   * Returns this.inboundNode at index nodeIndex.
   *
   * Porting note: This is a replacement for _get_node_attribute_at_index()
   * @param nodeIndex
   * @param attrName The name of the attribute related to request for this node.
   */
  getNodeAtIndex(t, e) {
    if (this.inboundNodes.length === 0)
      throw new Ln(`The layer has never been called and thus has no defined ${e}.`);
    if (this.inboundNodes.length <= t)
      throw new L(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[t];
  }
  /**
   * Retrieves the input tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple inputs).
   */
  getInputAt(t) {
    return Ke(this.getNodeAtIndex(t, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple outputs).
   */
  getOutputAt(t) {
    return Ke(this.getNodeAtIndex(t, "output").outputTensors);
  }
  // Properties
  /**
   * Retrieves the input tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Input tensor or list of input tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get input() {
    if (this.inboundNodes.length > 1)
      throw new as(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new as(`Layer ${this.name} is not connected, no input to return.`);
    return Ke(this.getNodeAtIndex(0, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Output tensor or list of output tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get output() {
    if (this.inboundNodes.length === 0)
      throw new as(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new as(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return Ke(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  /**
   * Retrieves the Layer's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return this.losses.map((t) => t());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(t) {
    this._built = t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this._trainableWeights.forEach((e) => e.trainable = t), this.trainable_ = t;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((t) => t.trainable) : [];
  }
  set trainableWeights(t) {
    this._trainableWeights = t;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((t) => !t.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(t) {
    this._nonTrainableWeights = t;
  }
  /**
   * The concatenation of the lists trainableWeights and nonTrainableWeights
   * (in this order).
   */
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  /**
   * Reset the states of the layer.
   *
   * This method of the base Layer class is essentially a no-op.
   * Subclasses that are stateful (e.g., stateful RNNs) should override this
   * method.
   */
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  /**
   * Checks compatibility between the layer and provided inputs.
   *
   * This checks that the tensor(s) `input`
   * verify the input assumptions of the layer
   * (if any). If not, exceptions are raised.
   *
   * @param inputs Input tensor or list of input tensors.
   *
   * @exception ValueError in case of mismatch between
   *   the provided inputs and the expectations of the layer.
   */
  assertInputCompatibility(t) {
    if (t = Bt(t), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    const e = Bt(this.inputSpec);
    if (t.length !== e.length)
      throw new L(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);
    for (let s = 0; s < t.length; s++) {
      const o = t[s], r = e[s];
      if (r == null)
        continue;
      const i = o.rank;
      if (r.ndim != null && i !== r.ndim)
        throw new L(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${i}`);
      if (r.maxNDim != null && i > r.maxNDim)
        throw new L(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${i}`);
      if (r.minNDim != null && i < r.minNDim)
        throw new L(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${i}.`);
      if (r.dtype != null && o.dtype !== r.dtype)
        throw new L(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${o.dtype}.`);
      if (r.axes) {
        const a = o.shape;
        for (const l in r.axes) {
          const c = Number(l), u = r.axes[l], d = c >= 0 ? a[c] : a[a.length + c];
          if (u != null && [u, null].indexOf(d) === -1)
            throw new L(`Input ${s} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${u} but got shape ${a}.`);
        }
      }
      if (r.shape != null)
        for (let a = 0; a < r.shape.length; ++a) {
          const l = r.shape[a], c = o.shape[a];
          if (l != null && c != null && l !== c)
            throw new L(`Input ${s} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${o.shape}.`);
        }
    }
  }
  /**
   * This is where the layer's logic lives.
   *
   * @param inputs Input tensor, or list/tuple of input tensors.
   * @param kwargs Additional keyword arguments.
   *
   * @return A tensor or list/tuple of tensors.
   */
  call(t, e) {
    return t;
  }
  invokeCallHook(t, e) {
    this._callHook != null && this._callHook(t, e);
  }
  /**
   * Set call hook.
   * This is currently used for testing only.
   * @param callHook
   */
  setCallHook(t) {
    this._callHook = t;
  }
  /**
   * Clear call hook.
   * This is currently used for testing only.
   */
  clearCallHook() {
    this._callHook = null;
  }
  /**
   * Builds or executes a `Layer`'s logic.
   *
   * When called with `tf.Tensor`(s), execute the `Layer`'s computation and
   * return Tensor(s). For example:
   *
   * ```js
   * const denseLayer = tf.layers.dense({
   *   units: 1,
   *   kernelInitializer: 'zeros',
   *   useBias: false
   * });
   *
   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
   * // numeric values).
   * const input = tf.ones([2, 2]);
   * const output = denseLayer.apply(input);
   *
   * // The output's value is expected to be [[0], [0]], due to the fact that
   * // the dense layer has a kernel initialized to all-zeros and does not have
   * // a bias.
   * output.print();
   * ```
   *
   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
   * future execution.  This entails internal book-keeping on shapes of
   * expected Tensors, wiring layers together, and initializing weights.
   *
   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
   * building of non-`tf.Sequential` models. For example:
   *
   * ```js
   * const flattenLayer = tf.layers.flatten();
   * const denseLayer = tf.layers.dense({units: 1});
   *
   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
   * const input = tf.input({shape: [2, 2]});
   * const output1 = flattenLayer.apply(input);
   *
   * // output1.shape is [null, 4]. The first dimension is the undetermined
   * // batch size. The second dimension comes from flattening the [2, 2]
   * // shape.
   * console.log(JSON.stringify(output1.shape));
   *
   * // The output SymbolicTensor of the flatten layer can be used to call
   * // the apply() of the dense layer:
   * const output2 = denseLayer.apply(output1);
   *
   * // output2.shape is [null, 1]. The first dimension is the undetermined
   * // batch size. The second dimension matches the number of units of the
   * // dense layer.
   * console.log(JSON.stringify(output2.shape));
   *
   * // The input and output can be used to construct a model that consists
   * // of the flatten and dense layers.
   * const model = tf.model({inputs: input, outputs: output2});
   * ```
   *
   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
   * @param kwargs Additional keyword arguments to be passed to `call()`.
   *
   * @return Output of the layer's `call` method.
   *
   * @exception ValueError error in case the layer is missing shape information
   *   for its `build` call.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  // Porting Note: This is a replacement for __call__() in Python.
  apply(t, e) {
    e = e || {}, this.assertNotDisposed();
    const s = Bt(t);
    let o = !0;
    for (const i of s)
      if (!(i instanceof ds)) {
        o = !1;
        break;
      }
    let r = !0;
    for (const i of s)
      if (i instanceof ds) {
        r = !1;
        break;
      }
    if (o === r)
      throw new L("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return Ao(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(t);
        const i = [];
        for (const a of Bt(t))
          i.push(a.shape);
        this.build(Ke(i)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && r && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(t), r) {
        let i = this.call(t, e);
        const a = Bt(i), l = [];
        for (let c of a)
          s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
        if (i = Ke(l), this.activityRegularizer != null)
          throw new xt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return i;
      } else {
        const i = jL(t), a = this.computeOutputShape(i);
        let l;
        const c = JL(t);
        if (this.warnOnIncompatibleInputShape(Array.isArray(t) ? i[0] : i), a != null && a.length > 0 && Array.isArray(a[0]) ? l = a.map((u, d) => new ds(c, u, this, Bt(t), e, this.name, d)) : l = new ds(c, a, this, Bt(t), e, this.name), this.addInboundNode(t, l, null, null, i, a, e), this._refCount++, this.activityRegularizer != null)
          throw new xt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return l;
      }
    });
  }
  /**
   * Check compatibility between input shape and this layer's batchInputShape.
   *
   * Print warning if any incompatibility is found.
   *
   * @param inputShape Input shape to be checked.
   */
  warnOnIncompatibleInputShape(t) {
    if (this.batchInputShape != null)
      if (t.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let e = !1;
        this.batchInputShape.forEach((s, o) => {
          s != null && t[o] != null && t[o] !== s && (e = !0);
        }), e && console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  /**
   * Retrieves the output shape(s) of a layer.
   *
   * Only applicable if the layer has only one inbound node, or if all inbound
   * nodes have the same output shape.
   *
   * @returns Output shape or shapes.
   * @throws AttributeError: if the layer is connected to more than one incoming
   *   nodes.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new as(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const t = [];
    for (const e of this.inboundNodes) {
      const s = JSON.stringify(e.outputShapes);
      t.indexOf(s) === -1 && t.push(s);
    }
    if (t.length === 1) {
      const e = this.inboundNodes[0].outputShapes;
      return Array.isArray(e) && Array.isArray(e[0]) && e.length === 1 ? e[0] : e;
    } else
      throw new as(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  /**
   * Counts the total number of numbers (e.g., float32, int32) in the
   * weights.
   *
   * @returns An integer count.
   * @throws RuntimeError: If the layer is not built yet (in which case its
   *   weights are not defined yet.)
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  countParams() {
    if (!this.built)
      throw new Ln(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return vc(this.weights);
  }
  /**
   * Creates the layer weights.
   *
   * Must be implemented on all layers that have weights.
   *
   * Called when apply() is called to construct the weights.
   *
   * @param inputShape A `Shape` or array of `Shape` (unused).
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  build(t) {
    this.built = !0;
  }
  /**
   * Returns the current values of the weights of the layer.
   *
   * @param trainableOnly Whether to get the values of only trainable weights.
   * @returns Weight values as an `Array` of `tf.Tensor`s.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getWeights(t = !1) {
    return lp(t ? this.trainableWeights : this.weights);
  }
  /**
   * Sets the weights of the layer, from Tensors.
   *
   * @param weights a list of Tensors. The number of arrays and their shape
   *   must match number of the dimensions of the weights of the layer (i.e.
   *   it should match the output of `getWeights`).
   *
   * @exception ValueError If the provided weights list does not match the
   *   layer's specifications.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  setWeights(t) {
    z(() => {
      const e = this.weights;
      if (e.length !== t.length)
        throw new L(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);
      if (e.length === 0)
        return;
      const s = [], o = lp(e);
      for (let r = 0; r < o.length; ++r) {
        const i = o[r], a = e[r], l = t[r];
        if (!$t(i.shape, l.shape))
          throw new L(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);
        s.push([a, l]);
      }
      qm(s);
    });
  }
  /**
   * Adds a weight variable to the layer.
   *
   * @param name Name of the new weight variable.
   * @param shape The shape of the weight.
   * @param dtype The dtype of the weight.
   * @param initializer An initializer instance.
   * @param regularizer A regularizer instance.
   * @param trainable Whether the weight should be trained via backprop or not
   *   (assuming that the layer itself is also trainable).
   * @param constraint An optional trainable.
   * @return The created weight variable.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addWeight(t, e, s, o, r, i, a, l) {
    if (this._addedWeightNames.indexOf(t) !== -1)
      throw new L(`Duplicate weight name ${t} for layer ${this.name}`);
    this._addedWeightNames.push(t), s == null && (s = "float32"), this.fastWeightInitDuringBuild && (o = l != null ? l() : Qt("zeros"));
    const c = o.apply(e, s), u = new HL(c, s, t, i, a);
    return c.dispose(), r != null && this.addLoss(() => r.apply(u.read())), i == null && (i = !0), i ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
  }
  /**
   * Set the fast-weight-initialization flag.
   *
   * In cases where the initialized weight values will be immediately
   * overwritten by loaded weight values during model loading, setting
   * the flag to `true` saves unnecessary calls to potentially expensive
   * initializers and speeds up the loading process.
   *
   * @param value Target value of the flag.
   */
  setFastWeightInitDuringBuild(t) {
    this.fastWeightInitDuringBuild = t;
  }
  /**
   * Add losses to the layer.
   *
   * The loss may potentially be conditional on some inputs tensors,
   * for instance activity losses are conditional on the layer's inputs.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addLoss(t) {
    t == null || Array.isArray(t) && t.length === 0 || (t = Bt(t), this._losses !== void 0 && this._losses !== null && this.losses.push(...t));
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  computeOutputShape(t) {
    return t;
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(t, e) {
    if (!this.supportsMasking) {
      if (e != null)
        if (Array.isArray(e))
          e.forEach((s) => {
            if (s != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return e;
  }
  /**
   * Internal method to create an inbound node for the layer.
   *
   * @param inputTensors List of input tensors.
   * @param outputTensors List of output tensors.
   * @param inputMasks List of input masks (a mask can be a tensor, or null).
   * @param outputMasks List of output masks (a mask can be a tensor, or null).
   * @param inputShapes List of input shape tuples.
   * @param outputShapes List of output shape tuples.
   * @param kwargs Dictionary of keyword arguments that were passed to the
   *   `call` method of the layer at the call that created the node.
   */
  addInboundNode(t, e, s, o, r, i, a = null) {
    const l = Bt(t);
    e = Bt(e), s = Bt(s), o = Bt(o), r = Cc(r), i = Cc(i);
    const c = [], u = [], d = [];
    for (const h of l)
      c.push(h.sourceLayer), u.push(h.nodeIndex), d.push(h.tensorIndex);
    new ud({
      outboundLayer: this,
      inboundLayers: c,
      nodeIndices: u,
      tensorIndices: d,
      inputTensors: l,
      outputTensors: e,
      inputMasks: s,
      outputMasks: o,
      inputShapes: r,
      outputShapes: i
    }, a);
    for (let h = 0; h < e.length; h++)
      e[h].sourceLayer = this, e[h].nodeIndex = this.inboundNodes.length - 1, e[h].tensorIndex = h;
  }
  /**
   * Returns the config of the layer.
   *
   * A layer config is a TS dictionary (serializable)
   * containing the configuration of a layer.
   * The same layer can be reinstantiated later
   * (without its trained weights) from this configuration.
   *
   * The config of a layer does not include connectivity
   * information, nor the layer class name.  These are handled
   * by 'Container' (one layer of abstraction above).
   *
   * Porting Note: The TS dictionary follows TS naming standards for
   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
   * should use a helper function to convert to the pythonic storage
   * standard. (see serialization_utils.convertTsToPythonic)
   *
   * @returns TS dictionary of configuration.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getConfig() {
    const t = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (t.batchInputShape = this.batchInputShape), this.dtype != null && (t.dtype = this.dtype), t;
  }
  /**
   * Dispose the weight variables that this Layer instance holds.
   *
   * @returns {number} Number of disposed variables.
   */
  disposeWeights() {
    return this.weights.forEach((t) => t.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose layer's weights.
   *
   * This method decreases the reference count of the Layer object by 1.
   *
   * A Layer is reference-counted. Its reference count is incremented by 1
   * the first item its `apply()` method is called and when it becomes a part
   * of a new `Node` (through calling the `apply()` method on a
   * `tf.SymbolicTensor`).
   *
   * If the reference count of a Layer becomes 0, all the weights will be
   * disposed and the underlying memory (e.g., the textures allocated in WebGL)
   * will be freed.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * weights of the Layer will *not* be disposed.
   *
   * After a Layer is disposed, it cannot be used in calls such as `apply()`,
   * `getWeights()` or `setWeights()` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the Container after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the layer has already
   *   been disposed.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let t = 0;
    return --this._refCount === 0 && (t = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: t };
  }
}
function jL(n) {
  n = Bt(n);
  const t = [];
  for (const e of n)
    t.push(e.shape);
  return Ke(t);
}
function JL(n) {
  return "float32";
}
function Zy(n, t, e) {
  if ((t == null || e != null && e > 0) && (t = n.sourceLayer, e = n.nodeIndex), t.inboundNodes.length === 0)
    return [n];
  {
    const s = t.inboundNodes[e];
    if (s.inboundLayers.length === 0)
      return s.inputTensors;
    {
      const o = [];
      for (let r = 0; r < s.inboundLayers.length; r++) {
        const i = s.inputTensors[r], a = s.inboundLayers[r], l = s.nodeIndices[r], c = Zy(i, a, l);
        for (const u of c)
          o.indexOf(u) === -1 && o.push(u);
      }
      return o;
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class yl extends kt {
  constructor(t) {
    if (super({
      dtype: t.dtype,
      name: t.name != null ? t.name : ld("input").toString()
    }), t.batchSize == null && (t.batchSize = null), t.sparse == null && (t.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = t.sparse, t.inputShape != null && t.batchInputShape != null)
      throw new L("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let e = t.batchInputShape;
    if (e == null) {
      if (t.inputShape == null)
        throw new L("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      e = [t.batchSize].concat(t.inputShape);
    } else if (t.batchSize != null)
      throw new L("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const s = t.dtype || "float32";
    this.batchInputShape = e, this.dtype = s, this.inputSpec = [{ shape: e }];
    const o = new ds(this.dtype, this.batchInputShape, this, [], {}, this.name);
    o.nodeIndex = 0, o.tensorIndex = 0, new ud({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: [o],
      outputTensors: [o],
      inputMasks: [null],
      outputMasks: [null],
      inputShapes: [e],
      outputShapes: [e]
    });
  }
  apply(t, e) {
    throw new L(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return {
      batchInputShape: this.batchInputShape,
      dtype: this.dtype,
      sparse: this.sparse,
      name: this.name
    };
  }
}
yl.className = "InputLayer";
H(yl);
function qL(n) {
  if (n.batchShape == null && n.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (n.batchShape != null && n.shape != null)
    throw new L("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let t = n.batchShape;
  n.shape != null && t == null && (t = [null].concat(n.shape));
  let e = n.dtype;
  return e == null && (e = "float32"), new yl({
    batchInputShape: t,
    name: n.name,
    dtype: e,
    sparse: n.sparse
  }).inboundNodes[0].outputTensors[0];
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function tD(n, t) {
  if (n.dtype == null || n.dtype === t.dtype)
    return t;
  try {
    return et(t, n.dtype);
  } catch {
    throw new L(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`);
  }
}
class Ys {
  /**
   * Constructor, optionally does copy-construction.
   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
   *   copy-construction will be performed.
   */
  constructor(t) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t instanceof Ys)
      for (const e in t.id2Value)
        this.id2Value[e] = t.id2Value[e], e in t.id2Mask && (this.id2Mask[e] = t.id2Mask[e]);
    else {
      if (t == null)
        return;
      for (const e of t)
        this.add(e.key, e.value);
    }
  }
  /**
   * Add a key-value pair to the FeedDict.
   *
   * @param key The key of the feed.
   * @param value The value of the tensor feed.
   * @param mask The value of the mask feed (optional).
   * @returns This `FeedDict`.
   * @throws ValueError: If the key `SymbolicTensor` already exists in the
   *   `FeedDict`.
   */
  add(t, e, s) {
    if (this.id2Value[t.id] == null)
      this.id2Value[t.id] = tD(t, e), this.name2Id[t.name] = t.id, s != null && (this.id2Mask[t.id] = s);
    else
      throw new L(`Duplicate key: name=${t.name}, id=${t.id}`);
    return this;
  }
  /**
   * Add a Feed to the FeedDict.
   * @param feed The new `Feed` to add.
   * @returns This `FeedDict`.
   */
  addFeed(t) {
    this.add(t.key, t.value);
  }
  /**
   * Probe whether a key already exists in the FeedDict.
   * @param key
   */
  hasKey(t) {
    return this.id2Value[t.id] != null;
  }
  /**
   * Get all the SymbolicTensor available in this FeedDict.
   */
  names() {
    return Object.keys(this.name2Id);
  }
  /**
   * Get the feed value for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed value.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getValue(t) {
    if (t instanceof ds) {
      if (this.id2Value[t.id] == null)
        throw new L(`Nonexistent key: ${t.name}`);
      return this.id2Value[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new L(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Value[e];
    }
  }
  /**
   * Get the feed mask for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed mask.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getMask(t) {
    if (t instanceof ds) {
      if (this.id2Value[t.id] == null)
        throw new L(`Nonexistent key: ${t.name}`);
      return this.id2Mask[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new L(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Mask[e];
    }
  }
  /** Dispose all mask Tensors held by this object. */
  disposeMasks() {
    this.id2Mask != null && yt(this.id2Mask);
  }
}
const kc = new Ny(), Sc = new Ny();
function eD(n) {
  kc != null && kc.setMaxEntries(n), Sc != null && Sc.setMaxEntries(n);
}
function Ti(n, t, e, s) {
  const o = e == null ? !1 : e.training, r = Array.isArray(n), i = r ? n : [n], a = i.map((f) => f.name), l = [], c = t.names();
  for (const f of a)
    c.indexOf(f) !== -1 ? l.push(t.getValue(f)) : l.push(null);
  s != null && (s.maxNumTensors = -1 / 0, s.minNumTensors = 1 / 0);
  const u = a.join(",") + "|" + t.names().sort().join(",");
  let d = kc.get(u), h;
  if (d == null) {
    const f = nD(i, t);
    d = f.sorted, h = f.recipientCounts, kc.put(u, d), Sc.put(u, h);
  }
  h = {}, o || Object.assign(h, Sc.get(u));
  const p = new Ys(t);
  for (let f = 0; f < d.length; ++f) {
    if (s != null) {
      const N = bc().numTensors;
      N > s.maxNumTensors && (s.maxNumTensors = N), N < s.minNumTensors && (s.minNumTensors = N);
    }
    const m = d[f], g = m.sourceLayer;
    if (g instanceof yl)
      continue;
    const b = [], x = [], w = [];
    let y = !1;
    for (const N of m.inputs) {
      const R = p.getValue(N), $ = p.getMask(N);
      b.push(R), x.push($), $ != null && (y = !0), o || (h[N.name]--, h[N.name] === 0 && !t.hasKey(N) && a.indexOf(N.name) === -1 && !R.isDisposed && N.sourceLayer.stateful !== !0 && w.push(R));
    }
    y && (e = e || {}, e.mask = x[0]);
    const I = Bt(g.apply(b, e));
    let C = null;
    g.supportsMasking && (C = g.computeMask(b, x));
    const v = oD(m), S = Array.isArray(v) ? v : [v];
    for (let N = 0; N < S.length; ++N) {
      p.hasKey(S[N]) || p.add(S[N], I[N], Array.isArray(C) ? C[0] : C);
      const R = a.indexOf(S[N].name);
      R !== -1 && (l[R] = I[N]);
    }
    o || yt(w);
  }
  return p.disposeMasks(), r ? l : l[0];
}
function nD(n, t) {
  k(n != null && n.length > 0, () => "Expected at least one fetch, got none");
  let e = [], s = {};
  if (n.length === 1) {
    const o = x0(n[0], t);
    e = o.sorted, s = o.recipientMap;
  } else {
    const o = /* @__PURE__ */ new Set();
    for (const r of n) {
      const { sorted: i, recipientMap: a } = x0(r, t);
      for (const l of i)
        o.has(l.name) || (e.push(l), o.add(l.name));
      for (const l in a)
        s[l] == null && (s[l] = /* @__PURE__ */ new Set()), a[l].forEach((c) => s[l].add(c));
    }
  }
  return {
    sorted: e,
    recipientCounts: sD(s)
  };
}
function sD(n) {
  const t = {};
  for (const e in n)
    t[e] = n[e].size;
  return t;
}
function x0(n, t) {
  const e = /* @__PURE__ */ new Set(), s = [], o = {};
  for (const a of t.names())
    e.add(a);
  const r = [], i = [];
  for (r.push(n); r.length > 0; ) {
    const a = r[r.length - 1];
    if (e.has(a.name)) {
      r.pop();
      continue;
    }
    const l = i[i.length - 1] === r.length - 1;
    if (a.inputs.length === 0 || l)
      r.pop(), s.push(a), e.add(a.name), l && i.pop();
    else {
      i.push(r.length - 1);
      for (const c of a.inputs)
        o[c.name] == null && (o[c.name] = /* @__PURE__ */ new Set()), o[c.name].add(a.name), !e.has(c.name) && r.push(c);
    }
  }
  return { sorted: s, recipientMap: o };
}
function oD(n) {
  let t;
  if (n.sourceLayer.inboundNodes.length === 1)
    t = n.sourceLayer.output;
  else {
    let e = null;
    for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s)
      for (const o of n.sourceLayer.inboundNodes[s].outputTensors)
        if (o.id === n.id) {
          e = s;
          break;
        }
    t = n.sourceLayer.getOutputAt(e);
  }
  return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rD = V();
rD.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, eD);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function tg(n, t) {
  return z(() => Ae(at(G(n, n), t, !0)));
}
class wl extends dr {
  getConfig() {
    return {};
  }
}
class Ky extends wl {
  constructor(t) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return z(() => {
      const e = tg(t, this.axis), s = Cn(e, 0, this.maxValue);
      return G(t, ut(s, U(pe(), e)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
Ky.className = "MaxNorm";
H(Ky);
class By extends wl {
  constructor(t) {
    super(), this.defaultAxis = 0, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return z(() => ut(t, U(pe(), tg(t, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
By.className = "UnitNorm";
H(By);
class Hy extends wl {
  apply(t) {
    return Vs(t);
  }
}
Hy.className = "NonNeg";
H(Hy);
class Uy extends wl {
  constructor(t) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = t.minValue != null ? t.minValue : this.defaultMinValue, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.rate = t.rate != null ? t.rate : this.defaultRate, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return z(() => {
      const e = tg(t, this.axis), s = U(G(this.rate, Cn(e, this.minValue, this.maxValue)), G(1 - this.rate, e));
      return G(t, ut(s, U(pe(), e)));
    });
  }
  getConfig() {
    return {
      minValue: this.minValue,
      maxValue: this.maxValue,
      rate: this.rate,
      axis: this.axis
    };
  }
}
Uy.className = "MinMaxNorm";
H(Uy);
const y0 = {
  maxNorm: "MaxNorm",
  minMaxNorm: "MinMaxNorm",
  nonNeg: "NonNeg",
  unitNorm: "UnitNorm"
};
function me(n) {
  return Pm(n);
}
function w0(n, t = {}) {
  return ml(n, mn.getMap().classNameMap, t, "constraint");
}
function ge(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in y0 ? y0[n] : n, config: {} };
    return w0(e);
  } else
    return n instanceof wl ? n : w0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function So(n) {
  if (n == null)
    return;
  const t = [], e = [], s = [];
  for (const o in n) {
    const r = n[o];
    if (typeof r != "number") {
      const i = r;
      t.push(i.data()), e.push(o), s.push(i);
    }
  }
  if (t.length > 0) {
    const o = await Promise.all(t);
    for (let r = 0; r < o.length; ++r)
      n[e[r]] = o[r][0];
    yt(s);
  }
}
function Yy(n) {
  if (n != null)
    for (const t in n) {
      const e = n[t];
      typeof e != "number" && e.dispose();
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var I0;
(function(n) {
  n[n.SILENT = 0] = "SILENT", n[n.VERBOSE = 1] = "VERBOSE";
})(I0 || (I0 = {}));
const iD = 125;
class Ki {
  constructor() {
    this.validationData = null;
  }
  setParams(t) {
    this.params = t;
  }
  async onEpochBegin(t, e) {
  }
  async onEpochEnd(t, e) {
  }
  async onBatchBegin(t, e) {
  }
  async onBatchEnd(t, e) {
  }
  async onTrainBegin(t) {
  }
  async onTrainEnd(t) {
  }
  // LayersModel needs to call Callback.setModel(), but cannot actually depend
  // on Callback because that creates a cyclic dependency.  Providing this no-op
  // method on BaseCallback breaks the cycle: this way LayersModel can depend on
  // BaseCallback but not on Callback.  The argument is typed as `Container`
  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
  // overrides this method and enforces that the argument is really a
  // LayersModel.
  setModel(t) {
  }
}
class aD {
  // TODO(cais): When the need arises, uncomment the following lines and
  // implement the queue for time values.
  // private deltaTBatch: number;
  // private deltaTsBatchBegin: Array<number>;
  // private deltaTsBatchEnd: Array<number>;
  /**
   * Constructor of CallbackList.
   * @param callbacks Array of `Callback` instances.
   * @param queueLength Queue length for keeping running statistics over
   *   callback execution time.
   */
  constructor(t, e = 10) {
    t == null && (t = []), this.callbacks = t, this.queueLength = e;
  }
  append(t) {
    this.callbacks.push(t);
  }
  setParams(t) {
    for (const e of this.callbacks)
      e.setParams(t);
  }
  setModel(t) {
    for (const e of this.callbacks)
      e.setModel(t);
  }
  /**
   * Called at the start of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochBegin(t, e);
  }
  /**
   * Called at the end of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochEnd(t, e);
  }
  /**
   * Called  right before processing a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchBegin(t, e);
  }
  /**
   * Called at the end of a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchEnd(t, e);
  }
  /**
   * Called at the beginning of training.
   * @param logs Dictionary of logs.
   */
  async onTrainBegin(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainBegin(t);
  }
  /**
   * Called at the end of training.
   * @param logs Dictionary of logs.
   */
  async onTrainEnd(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainEnd(t);
  }
}
class lD extends Ki {
  constructor() {
    super();
  }
  async onEpochBegin(t) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(t, e) {
    e == null && (e = {});
    const s = e.size == null ? 0 : e.size;
    this.seen += s;
    for (const o in e) {
      const r = e[o];
      if (typeof r == "number")
        this.totals.hasOwnProperty(o) || (this.totals[o] = 0), this.totals[o] = this.totals[o] + r * s;
      else {
        let i;
        o in this.totals ? i = this.totals[o] : this.totals[o] = 0;
        const a = z(() => U(this.totals[o], G(r, s)));
        this.totals[o] = a, i != null && i.dispose();
      }
    }
  }
  async onEpochEnd(t, e) {
    if (e != null)
      for (const s of this.params.metrics)
        this.totals[s] != null && (typeof this.totals[s] == "number" ? e[s] = this.totals[s] / this.seen : z(() => {
          const o = G(ut(1, this.seen), this.totals[s]);
          e[s] = o, this.totals[s].dispose(), xn(e[s]);
        }));
  }
}
class cD extends Ki {
  async onTrainBegin(t) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(t, e) {
    e == null && (e = {}), this.epoch.push(t);
    for (const s in e)
      this.history[s] == null && (this.history[s] = []), this.history[s].push(e[s]);
  }
  /**
   * Await the values of all losses and metrics.
   */
  async syncData() {
    const t = [], e = [], s = [];
    for (const r in this.history) {
      const i = this.history[r];
      for (let a = 0; a < i.length; ++a)
        if (typeof i[a] != "number") {
          const l = i[a];
          t.push(l.data()), e.push(r), s.push(a);
        }
    }
    const o = await Promise.all(t);
    for (let r = 0; r < o.length; ++r)
      this.history[e[r]][s[r]].dispose(), this.history[e[r]][s[r]] = o[r][0];
  }
}
class uD extends Ki {
  constructor(t, e) {
    if (super(), this.currentEpoch = 0, this.nowFunc = t.nowFunc, this.nextFrameFunc = t.nextFrameFunc || od, this.yieldEvery = e || "auto", this.yieldEvery === "auto" && (this.yieldEvery = iD), this.yieldEvery === "never" && t.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    uc(this.yieldEvery) && (this.maybeWait = SL(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = t.onTrainBegin, this.trainEnd = t.onTrainEnd, this.epochBegin = t.onEpochBegin, this.epochEnd = t.onEpochEnd, this.batchBegin = t.onBatchBegin, this.batchEnd = t.onBatchEnd, this.yield = t.onYield;
  }
  async maybeWait(t, e, s) {
    const o = [];
    this.yield != null && (await So(s), o.push(this.yield(t, e, s))), o.push(this.nextFrameFunc()), await Promise.all(o);
  }
  async onEpochBegin(t, e) {
    this.currentEpoch = t, this.epochBegin != null && (await So(e), await this.epochBegin(t, e));
  }
  async onEpochEnd(t, e) {
    const s = [];
    this.epochEnd != null && (await So(e), s.push(this.epochEnd(t, e))), this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onBatchBegin(t, e) {
    this.batchBegin != null && (await So(e), await this.batchBegin(t, e));
  }
  async onBatchEnd(t, e) {
    const s = [];
    this.batchEnd != null && (await So(e), s.push(this.batchEnd(t, e))), this.yieldEvery === "batch" ? s.push(this.nextFrameFunc()) : uc(this.yieldEvery) && s.push(this.maybeWait(this.currentEpoch, t, e)), await Promise.all(s);
  }
  async onTrainBegin(t) {
    this.trainBegin != null && (await So(t), await this.trainBegin(t));
  }
  async onTrainEnd(t) {
    this.trainEnd != null && (await So(t), await this.trainEnd(t));
  }
}
function Qy(n, t) {
  return n == null && (n = {}), n instanceof Ki ? [n] : Array.isArray(n) && n[0] instanceof Ki ? n : Bt(n).map((s) => new uD(s, t));
}
class Nn {
  /**
   * Blocks public access to constructor.
   */
  constructor() {
  }
  /**
   * Register a tf.LayersModel.fit() callback constructor.
   *
   * The registered callback constructor will be used to instantiate
   * callbacks for every tf.LayersModel.fit() call afterwards.
   *
   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
   *   is to be reigstered.
   * @param callbackConstructor A no-arg constructor for `tf.Callback`.
   * @throws Error, if the same callbackConstructor has been registered before,
   *   either at the same or a different `verbosityLevel`.
   */
  static registerCallbackConstructor(t, e) {
    k(t >= 0 && Number.isInteger(t), () => `Verbosity level is expected to be an integer >= 0, but got ${t}`), Nn.checkForDuplicate(e), Nn.constructors[t] == null && (Nn.constructors[t] = []), Nn.constructors[t].push(e);
  }
  static checkForDuplicate(t) {
    for (const e in Nn.constructors)
      Nn.constructors[+e].forEach((o) => {
        if (o === t)
          throw new L("Duplicate callback constructor.");
      });
  }
  /**
   * Clear all registered callback constructors.
   */
  static clear() {
    Nn.constructors = {};
  }
  /**
   * Create callbacks using the registered callback constructors.
   *
   * Given `verbosityLevel`, all constructors registered at that level or above
   * will be called and the instantiated callbacks will be used.
   *
   * @param verbosityLevel: Level of verbosity.
   */
  static createCallbacks(t) {
    const e = [];
    for (const s in Nn.constructors) {
      const o = +s;
      t >= o && e.push(...Nn.constructors[o]);
    }
    return e.map((s) => new s());
  }
}
Nn.constructors = {};
function jy(n, t, e, s, o, r, i, a, l) {
  const c = new cD(), u = [
    new lD(),
    ...Nn.createCallbacks(t)
  ];
  n != null && u.push(...n), u.push(c);
  const d = new aD(u);
  return d.setParams({
    epochs: e,
    initialEpoch: s,
    samples: o,
    steps: r,
    batchSize: i,
    verbose: t,
    doValidation: a,
    metrics: l
  }), { callbackList: d, history: c };
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function jn(n, t = {}, e = !1) {
  return ml(n, mn.getMap().classNameMap, t, "layer", e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Tc(n, t) {
  return z(() => {
    n.dtype !== "float32" && (n = et(n, "float32"));
    const e = at(bl(n), t, !0), s = ll(e.shape, pe()), o = Ae(bo(e, s));
    return ut(n, o);
  });
}
function dd(n, t) {
  return z(() => ie(bl(lt(t, n)), -1));
}
function eg(n, t) {
  return z(() => ie(be(lt(t, n)), -1));
}
function ng(n, t) {
  return z(() => {
    const e = lt(n, t), s = Cn(be(n), pe(), Number.MAX_VALUE), o = be(ut(e, s));
    return G(100, ie(o, -1));
  });
}
function dD(n, t) {
  return z(() => {
    const e = Cn(t, pe(), Number.MAX_VALUE), s = Wn(U(1, e)), o = Cn(n, pe(), Number.MAX_VALUE), r = Wn(U(1, o));
    return ie(bl(lt(s, r)), -1);
  });
}
function hD(n, t) {
  return z(() => {
    const e = bo(0, lt(1, G(n, t)));
    return ie(bl(e), -1);
  });
}
function pD(n, t) {
  return z(() => {
    const e = bo(0, lt(1, G(n, t)));
    return ie(e, -1);
  });
}
function fD(n, t) {
  return z(() => {
    const e = at(G(n, t), -1), s = Qn(G(lt(1, n), t), -1);
    return bo(0, U(1, lt(s, e)));
  });
}
function mD(n, t) {
  return z(() => {
    const e = Math.log(2), s = lt(t, n), o = lt(U(s, cl(G(-2, s))), e);
    return ie(o, -1);
  });
}
function Bi(n, t, e = !1) {
  return z(() => {
    if (e)
      t = sm(t);
    else {
      const s = at(t, t.shape.length - 1, !0);
      t = ut(t, s);
    }
    return t = Cn(t, pe(), 1 - pe()), ee(at(G(et(n, "float32"), Wn(t)), t.shape.length - 1));
  });
}
function Nc(n, t, e = !1) {
  return z(() => {
    const s = et(Ju(WL(n)), "int32");
    t = Cn(t, pe(), 1 - pe());
    const o = t.shape, r = M(g1(s, o[o.length - 1]), o);
    return Bi(r, t, e);
  });
}
function gD(n, t) {
  if (!$t(n.shape, t.shape))
    throw new L(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);
  return z(() => {
    const e = Vs(t), s = ee(be(t));
    return U(lt(e, G(t, n)), Hf(Fn(s)));
  });
}
function hd(n, t) {
  return z(() => {
    let e;
    return e = Cn(t, pe(), 1 - pe()), e = Wn(ut(e, lt(1, e))), ie(gD(n, e), -1);
  });
}
function bD(n, t) {
  return z(() => {
    const e = Cn(n, pe(), 1), s = Cn(t, pe(), 1);
    return at(G(n, Wn(ut(e, s))), -1);
  });
}
function xD(n, t) {
  return z(() => {
    const e = Wn(U(pe(), t));
    return ie(lt(t, G(n, e)), -1);
  });
}
function Jy(n, t) {
  return z(() => {
    const e = Tc(n, -1), s = Tc(t, -1), o = G(e, s);
    return ee(at(o, -1));
  });
}
const Rc = {
  meanSquaredError: dd,
  meanAbsoluteError: eg,
  meanAbsolutePercentageError: ng,
  meanSquaredLogarithmicError: dD,
  squaredHinge: hD,
  hinge: pD,
  categoricalHinge: fD,
  logcosh: mD,
  categoricalCrossentropy: Bi,
  sparseCategoricalCrossentropy: Nc,
  binaryCrossentropy: hd,
  kullbackLeiblerDivergence: bD,
  poisson: xD,
  cosineProximity: Jy
};
function Ad(n) {
  if (typeof n == "string") {
    if (n in Rc)
      return Rc[n];
    let t = `Unknown loss ${n}`;
    throw n.toLowerCase().includes("softmaxcrossentropy") && (t = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new L(t);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function qy(n, t) {
  return z(() => {
    const e = G(0.5, Vn(t)), s = fs(dn(t, e), n.dtype);
    return ie(zn(n, s), -1);
  });
}
function tw(n, t) {
  return z(() => fs(zn(Ai(n, -1), Ai(t, -1)), "float32"));
}
function ew(n, t) {
  return z(() => et(at(xs(zn(n, 1), zn(t, 1))), "float32"));
}
function yD(n, t) {
  return z(() => et(at(xs(zn(n, 1), zn(t, 0))), "float32"));
}
function wD(n, t) {
  return z(() => et(at(xs(zn(n, 0), zn(t, 1))), "float32"));
}
function ID(n, t) {
  return z(() => {
    const e = ew(n, t), s = wD(n, t), o = U(e, s);
    return et(Ue(dn(o, 0), ut(e, o), 0), "float32");
  });
}
function o6(n, t) {
  return z(() => {
    const e = ew(n, t), s = yD(n, t), o = U(e, s);
    return et(Ue(dn(o, 0), ut(e, o), 0), "float32");
  });
}
function CD(n, t) {
  return hd(n, t);
}
function vD(n, t) {
  return n.rank === t.rank && (n = ul(n, [n.rank - 1])), t = Ai(t, -1), t.dtype !== n.dtype && (t = et(t, n.dtype)), et(zn(n, t), "float32");
}
const kD = dd, SD = dd, TD = eg, ND = eg, RD = ng, $D = ng, nw = Bi, ED = Jy, sw = Nc, $c = {
  binaryAccuracy: qy,
  categoricalAccuracy: tw,
  precision: ID,
  categoricalCrossentropy: nw,
  sparseCategoricalCrossentropy: sw,
  mse: kD,
  MSE: SD,
  mae: TD,
  MAE: ND,
  mape: RD,
  MAPE: $D,
  cosine: ED
};
function GD(n) {
  if (typeof n == "string" && n in $c)
    return $c[n];
  if (typeof n != "string" && n != null)
    return n;
  throw new L(`Unknown metric ${n}`);
}
function Al(n) {
  if (ls(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == "string")
    return n;
  {
    let t;
    for (const e of Object.keys(Rc))
      if (Rc[e] === n) {
        t = e;
        break;
      }
    if (t !== void 0)
      return t;
    for (const e of Object.keys($c))
      if ($c[e] === n) {
        t = e;
        break;
      }
    return t !== void 0 ? t : n.name;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function LD(n) {
  const t = {
    Adagrad: () => xr.adagrad(0.01),
    Adadelta: () => xr.adadelta(1, 0.95, pe()),
    Adam: () => xr.adam(1e-3, 0.9, 0.999, pe()),
    Adamax: () => xr.adamax(2e-3, 0.9, 0.999, pe(), 0),
    RMSProp: () => xr.rmsprop(1e-3, 0.9, 0, pe()),
    SGD: () => xr.sgd(0.01)
  };
  if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, n in t)
    return t[n]();
  throw new L(`Unknown Optimizer ${n}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const C0 = 1 * 1024 * 1024;
function v0(n, t, e = !1) {
  if (n == null || typeof n != "object" || Object.getPrototypeOf(n) !== Object.prototype || !cp(n))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (e) {
    const s = JSON.stringify(n);
    s.length > C0 && console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${C0}.`);
  }
}
function cp(n) {
  if (n === null)
    return !0;
  if (typeof n == "object")
    if (Object.getPrototypeOf(n) === Object.prototype) {
      const t = Object.keys(n);
      for (const e of t)
        if (typeof e != "string" || !cp(n[e]))
          return !1;
      return !0;
    } else if (Array.isArray(n)) {
      for (const t of n)
        if (!cp(t))
          return !1;
      return !0;
    } else
      return !1;
  else {
    const t = typeof n;
    return t === "string" || t === "number" || t === "boolean";
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function DD(n, t, e, s = console.log) {
  const o = zD(n), r = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  o ? (t = t || 90, e = e || [0.32, 0.61, 0.89, 1]) : (t = t || 115, e = e || [0.24, 0.48, 0.7, 0.8, 1]), e[e.length - 1] <= 1 && (e = e.map((u) => Math.floor(t * u)));
  let i;
  if (!o) {
    r.push("Receives inputs"), i = [];
    for (const u in n.nodesByDepth)
      i.push(...n.nodesByDepth[u]);
  }
  s("_".repeat(t)), Ec(r, e, s), s("=".repeat(t));
  const a = n.layers;
  for (let u = 0; u < a.length; ++u)
    o ? FD(a[u], e, s) : WD(a[u], e, i, s), s((u === a.length - 1 ? "=" : "_").repeat(t));
  n.checkTrainableWeightsConsistency();
  const l = MD(n), c = vc(n.nonTrainableWeights);
  s(`Total params: ${l + c}`), s(`Trainable params: ${l}`), s(`Non-trainable params: ${c}`), s("_".repeat(t));
}
function MD(n) {
  let t;
  return n.collectedTrainableWeights != null ? t = vc(n.collectedTrainableWeights) : t = vc(n.trainableWeights), t;
}
function zD(n) {
  let t = !0;
  const e = [], s = [];
  for (const o in n.nodesByDepth)
    e.push(n.nodesByDepth[o]);
  for (const o of e) {
    if (o.length > 1 || o.length === 1 && o[0].inboundLayers.length > 1) {
      t = !1;
      break;
    }
    s.push(...o);
  }
  if (t)
    for (const o of n.layers) {
      let r = !1;
      for (const i of o.inboundNodes)
        if (s.indexOf(i) !== -1)
          if (r) {
            t = !1;
            break;
          } else
            r = !0;
      if (!t)
        break;
    }
  return t;
}
function Ec(n, t, e = console.log) {
  let s = "";
  for (let o = 0; o < n.length; ++o)
    o > 0 && (s = s.slice(0, s.length - 1) + " "), s += n[o], s = s.slice(0, t[o]), s += " ".repeat(t[o] - s.length);
  e(s);
}
function FD(n, t, e) {
  let s, o;
  try {
    o = n.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
  } catch {
    o = "multiple";
  }
  try {
    s = JSON.stringify(n.outputShape);
  } catch {
    s = "multiple";
  }
  const r = n.name, i = n.getClassName(), a = [
    `${r} (${i})`,
    o,
    s,
    n.countParams().toString()
  ];
  Ec(a, t, e);
}
function WD(n, t, e, s) {
  let o, r;
  try {
    r = n.inboundNodes.map((d) => JSON.stringify(d.inputShapes)).join(",");
  } catch {
    r = "multiple";
  }
  try {
    o = JSON.stringify(n.outputShape);
  } catch {
    o = "multiple";
  }
  const i = [];
  for (const d of n.inboundNodes)
    if (!(e != null && e.length > 0 && e.indexOf(d) === -1))
      for (let h = 0; h < d.inboundLayers.length; ++h) {
        const p = d.inboundLayers[h].name, f = d.nodeIndices[h], m = d.tensorIndices[h];
        i.push(`${p}[${f}][${m}]`);
      }
  const a = n.name, l = n.getClassName(), c = i.length === 0 ? "" : i[0], u = [
    `${a} (${l})`,
    r,
    o,
    n.countParams().toString(),
    c
  ];
  Ec(u, t, s);
  for (let d = 1; d < i.length; ++d)
    Ec(["", "", "", "", i[d]], t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ow(n, t, e) {
  return (n === "inboundNodes" || n === "outputLayers" || n === "inputLayers") && t === 0 && typeof e == "string";
}
function Hi(n, t) {
  if (n === null)
    return null;
  if (typeof n == "string")
    return $o(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let o = 0; o < s; ++o) {
      const r = n[o];
      ow(t, o, r) ? e.push(r) : e.push(Hi(r, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const o = n[s];
      if (s === "name" && typeof o == "string")
        e[s] = o;
      else {
        const r = $o(s);
        e[r] = Hi(o, r);
      }
    }
    return e;
  }
}
function up(n, t) {
  if (n == null)
    return null;
  if (typeof n == "string")
    return Ss(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let o = 0; o < s; ++o) {
      const r = n[o];
      ow(t, o, r) ? e.push(r) : e.push(up(r, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const o = n[s], r = Ss(s);
      (s === "name" || s === "className") && typeof o == "string" ? e[r] = o : e[r] = up(o, s);
    }
    return e;
  }
}
/** @license See the LICENSE file. */
const rw = "4.2.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Kn extends kt {
  constructor(t) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = t.name, this.name == null) {
      const x = this.getClassName().toLowerCase();
      this.name = ld(x);
    }
    if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(t.inputs) ? this.inputs = t.inputs.slice() : this.inputs = [t.inputs], Array.isArray(t.outputs) ? this.outputs = t.outputs.slice() : this.outputs = [t.outputs], to(this.inputs).length !== this.inputs.length)
      throw new L(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((x) => x.name)}`);
    to(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((x) => x.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const x of this.outputs) {
      const w = x.sourceLayer, y = x.nodeIndex, I = x.tensorIndex;
      this.outputLayers.push(w), this.outputLayersNodeIndices.push(y), this.outputLayersTensorIndices.push(I);
    }
    for (const x of this.inputs) {
      const w = x.sourceLayer, y = x.nodeIndex, I = x.tensorIndex;
      ls(y === 0, "input layer has >1 nodes"), ls(I === 0, "input layer has >1 tensors"), this.inputLayers.push(w), this.inputLayersNodeIndices.push(y), this.inputLayersTensorIndices.push(I);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let x = 0; x < this.inputLayers.length; x++) {
      const w = this.inputLayers[x];
      if (!(w instanceof yl))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${w.getClassName()}.`);
      this.inputNames.push(w.name), this.feedInputShapes.push(w.batchInputShape), this.feedInputNames.push(w.name);
    }
    for (const x of this.outputLayers)
      this.outputNames.push(x.name);
    this.internalInputShapes = this.inputs.map((x) => x.shape), this.internalOutputShapes = this.outputs.map((x) => x.shape);
    const e = {}, s = {}, o = {}, r = {}, i = {}, a = [], l = (x, w, y, I, C, v) => {
      (I == null || C == null || v == null) && (I = x.sourceLayer, C = x.nodeIndex, v = x.tensorIndex);
      const S = I.inboundNodes[C];
      if (y.indexOf(S) !== -1)
        throw new Ln(`The tensor ${x.name} at layer "${I.name}" is part of a cycle.`);
      if (w.indexOf(S) !== -1)
        return;
      this.containerNodes.add(Kn.nodeKey(I, C)), I.id in i || (i[I.id] = Object.keys(i).length), y.indexOf(S) === -1 && y.push(S);
      const N = S.inboundLayers.length;
      for (let R = 0; R < N; R++) {
        const $ = S.inputTensors[R], F = S.inboundLayers[R], W = S.nodeIndices[R], _ = S.tensorIndices[R];
        l($, w, y, F, W, _);
      }
      for (w.push(S); y.indexOf(S) >= 0; )
        y.splice(y.indexOf(S), 1);
      a.push(S);
    }, c = [], u = [];
    for (const x of this.outputs)
      l(x, c, u);
    const d = a.slice().reverse();
    for (const x of d) {
      s[x.id] = x, x.id in e || (e[x.id] = 0);
      let w = e[x.id];
      const y = o[x.outboundLayer.id] == null ? 0 : o[x.outboundLayer.id];
      w = Math.max(w, y), o[x.outboundLayer.id] = w, r[x.outboundLayer.id] = x.outboundLayer, e[x.id] = w;
      for (let I = 0; I < x.inboundLayers.length; I++) {
        const C = x.inboundLayers[I], v = x.nodeIndices[I], S = C.inboundNodes[v], N = e[S.id] == null ? 0 : e[S.id];
        e[S.id] = Math.max(w + 1, N), s[S.id] = S;
      }
    }
    const h = {};
    for (const x in e) {
      const w = e[x];
      w in h || (h[w] = []), h[w].push(s[x]);
    }
    const p = {};
    for (const x in o) {
      const w = o[x];
      w in p || (p[w] = []), p[w].push(r[x]);
    }
    let f = Object.keys(p).map((x) => parseInt(x, 10)).sort(Wl);
    this.layers = [];
    for (const x of f) {
      const w = p[x];
      w.sort((y, I) => {
        const C = i[y.id], v = i[I.id];
        return C < v ? -1 : C > v ? 1 : 0;
      });
      for (const y of w)
        y instanceof Kn && this.internalContainerRefs.push(y), this.layers.push(y);
    }
    this.layersByDepth = p, f = Object.keys(h).map((x) => parseInt(x, 10)).sort(Wl);
    const m = this.inputs.slice(), g = [];
    for (const x of f)
      for (const w of h[x]) {
        const y = w.outboundLayer;
        if (y != null) {
          for (const I of w.inputTensors)
            if (m.indexOf(I) === -1)
              throw new Ln(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${y.name}". The following previous layers were accessed without issue: ${g}`);
          for (const I of w.outputTensors)
            m.push(I);
          g.push(y.name);
        }
      }
    this.nodesByDepth = h;
    const b = this.layers.map((x) => x.name);
    for (const x of b) {
      const w = b.filter((y) => y === x).length;
      if (w !== 1)
        throw new Ln(`The name "${x}" is used ${w} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(b));
    }
    this.outboundNodes = [], this.inboundNodes = [], new ud({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: this.inputs,
      outputTensors: this.outputs,
      inputMasks: this.inputs.map((x) => null),
      outputMasks: this.outputs.map((x) => null),
      inputShapes: this.inputs.map((x) => x.shape),
      outputShapes: this.outputs.map((x) => x.shape)
    }), this.built = !0, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose a LayersModel's weights.
   *
   * This method decrease the reference count of the LayersModel object by 1.
   *
   * A LayersModel is reference-counted. Its reference count is incremented by 1
   * when it is first constructed and when it is used as a Layer of another
   * LayersModel.
   *
   * If the reference count of a LayersModel becomes 0, the `dispose` method of
   * all its constituent `Layer`s will be called.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * `dispose` method of its constituent `Layer`s will *not* be called.
   *
   * After a LayersModel is disposed, it cannot be used in calls such as
   * 'predict`, `evaluate` or `fit` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the LayersModel after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the LayersModel has
   *   already been disposed.
   */
  dispose() {
    this.assertNotDisposed();
    const t = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (const e of this.layers)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
      for (const e of this.internalContainerRefs)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
    }
    return t.refCountAfterDispose = this._refCount, t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.layers.forEach((e) => {
      e._trainableWeights.forEach((s) => s.trainable = t);
    }), this.trainable_ = t;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new L("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let t = [];
    for (const e of this.layers)
      t = t.concat(e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.layers)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.layers)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  /**
   * Loads all layer weights from a JSON object.
   *
   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
   *   TypeScript. The utility script at `scripts/pykeras.py` offers means
   *   to convert them into JSON strings compatible with this method.
   * Porting Note: TensorFlow.js Layers supports only loading by name currently.
   *
   * @param weights A JSON mapping weight names to weight values as nested
   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
   *   names to `tf.Tensor` objects.
   * @param strict Require that the provided weights exactly match those
   *   required by the container.  Default: `true`.  Passing `false` means that
   *   extra weights and missing weights will be silently ignored.
   */
  loadWeights(t, e = !0) {
    const s = {};
    let o = 0;
    for (const i of this.layers)
      for (const a of i.weights) {
        if (s[a.originalName] != null)
          throw new L(`Duplicate weight name: ${a.originalName}`);
        s[a.originalName] = a, o++;
      }
    const r = [];
    for (const i in t) {
      let a = i;
      if (s[i] == null) {
        const l = i.split("/");
        a = l.slice(0, -2).concat([l[l.length - 1]]).join("/");
      }
      if (s[a] != null)
        r.push([s[a], t[i]]);
      else if (e)
        throw new L(`Provided weight data has no target variable: ${i}`);
      delete s[a];
    }
    if (e) {
      const i = [];
      for (const a in s)
        i.push(a);
      if (i.length > 0)
        throw new L(`${i.length} of ${o} weights are not set: ${i}`);
    }
    qm(r);
  }
  /**
   * Util shared between different serialization methods.
   * @returns LayersModel config with Keras version information added.
   */
  updatedConfig() {
    const t = this.getConfig(), e = {};
    return e.className = this.getClassName(), e.config = t, e.kerasVersion = `tfjs-layers ${rw}`, e.backend = "TensorFlow.js", e;
  }
  /**
   * Returns a JSON string containing the network configuration.
   *
   * To load a network from a JSON save file, use
   * models.modelFromJSON(jsonString);
   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
   * @param returnString Whether the return value should be stringified
   *    (default: `true`).
   * @returns a JSON string if `returnString` (default), or a JSON object if
   *   `!returnString`.
   */
  // tslint:disable-next-line:no-any
  toJSON(t, e = !0) {
    const s = up(this.updatedConfig());
    return e ? JSON.stringify(s) : s;
  }
  /**
   * Call the model on new inputs.
   *
   * In this case `call` just reapplies all ops in the graph to the new inputs
   * (e.g. build a new computational graph from the provided inputs).
   *
   * @param inputs A tensor or list of tensors.
   * @param mask A mask or list of masks. A mask can be either a tensor or null
   *   (no mask).
   *
   * @return A tensor if there is a single output, or a list of tensors if there
   *   are more than one outputs.
   */
  call(t, e) {
    return z(() => {
      t = Bt(t);
      const s = new Ys();
      for (let o = 0; o < this.inputs.length; ++o)
        s.add(this.inputs[o], t[o]);
      return Ti(this.outputs, s, e);
    });
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(t, e) {
    return z(() => {
      t = Bt(t);
      let s;
      return e == null ? s = tr(null, t.length) : s = Bt(e), this.runInternalGraph(t, s)[1];
    });
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   */
  computeOutputShape(t) {
    const e = Cc(t);
    if (e.length !== this.inputLayers.length)
      throw new L(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);
    const s = {};
    for (let a = 0; a < e.length; a++) {
      const l = this.inputLayers[a], c = e[a], u = l.name + "_0_0";
      s[u] = c;
    }
    const o = Object.keys(this.nodesByDepth).map((a) => parseInt(a, 10)).sort(Wl);
    if (o.length > 1)
      for (const a of o) {
        const l = this.nodesByDepth[a];
        for (const c of l) {
          const u = c.outboundLayer;
          if (this.inputLayers.map((m) => m.id).indexOf(u.id) !== -1)
            continue;
          const d = [];
          for (let m = 0; m < c.inboundLayers.length; m++) {
            const g = c.inboundLayers[m], b = c.nodeIndices[m], x = c.tensorIndices[m], w = `${g.name}_${b}_${x}`, y = s[w];
            d.push(y);
          }
          const h = u.computeOutputShape(Ke(d)), p = Cc(h), f = u.inboundNodes.indexOf(c);
          for (let m = 0; m < p.length; m++) {
            const g = `${u.name}_${f}_${m}`;
            s[g] = p[m];
          }
        }
      }
    const r = [], i = [];
    for (let a = 0; a < this.outputLayers.length; a++) {
      const l = this.outputLayers[a], c = this.outputLayersNodeIndices[a], u = this.outputLayersTensorIndices[a], d = `${l.name}_${c}_${u}`;
      i.push(d);
    }
    for (let a = 0; a < i.length; a++) {
      const l = i[a];
      ls(l in s), r.push(s[l]);
    }
    return Ke(r);
  }
  /**
   * Computes output tensors for new inputs.
   *
   * Note:
   *   - Expects `inputs` to be a list (potentially with 1 element).
   *
   * @param inputs List of tensors
   * @param masks List of masks (tensors or null).
   * @return Three lists: outputTensors, outputMasks, outputShapes
   */
  runInternalGraph(t, e) {
    e == null && (e = tr(null, t.length));
    const s = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      const c = this.inputs[l], u = t[l], d = e[l];
      s[c.id] = [u, d];
    }
    const o = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(Wl);
    for (const l of o) {
      const c = this.nodesByDepth[l];
      for (const u of c) {
        const d = u.outboundLayer, h = u.inputTensors, p = u.outputTensors, f = new Array();
        for (const m of h)
          m.id in s && f.push(s[m.id]);
        if (f.length === h.length) {
          let m = {}, g, b, x, w;
          if (u.callArgs != null && (m = u.callArgs), f.length === 1) {
            const [y, I] = f[0];
            m.mask == null && (m.mask = I), x = Bt(d.call(y, m)), w = Bt(d.computeMask(y, I)), g = [y], b = [I];
          } else
            g = f.map((y) => y[0]), b = f.map((y) => y[1]), m.mask == null && (m.mask = b), x = Bt(d.call(g, m)), w = Bt(d.computeMask(g, b));
          if (d.activityRegularizer)
            throw new xt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let y = 0; y < p.length; ++y) {
            const I = p[y], C = x[y], v = w[y];
            s[I.id] = [C, v];
          }
        }
      }
    }
    const r = [], i = [], a = [];
    for (const l of this.outputs) {
      ls(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
      const [c, u] = s[l.id];
      a.push(c.shape), r.push(c), i.push(u);
    }
    return [r, i, a];
  }
  /**
   * Builds a map of internal node keys to node ordering.
   * Used in serializaion a node orderings may change as unused nodes are
   * dropped. Porting Note:  This helper method was pulled out of getConfig to
   * improve readability.
   * @param layers An array of Layers in the model.
   * @returns Map of Node Keys to index order within the layer.
   */
  buildNodeConversionMap(t) {
    const e = {};
    let s;
    for (const o of this.layers) {
      s = o instanceof Kn ? 1 : 0;
      for (let r = 0; r < o.inboundNodes.length; r++) {
        const i = Kn.nodeKey(o, r);
        this.containerNodes.has(i) && (e[i] = s, s += 1);
      }
    }
    return e;
  }
  /**
   * Retrieves a layer based on either its name (unique) or index.
   *
   * Indices are based on order of horizontal graph traversal (bottom-up).
   *
   * If both `name` and `index` are specified, `index` takes precedence.
   *
   * @param name Name of layer.
   * @param index Index of layer.
   * @returns A Layer instance.
   * @throws ValueError: In case of invalid layer name or index.
   *
   * @doc {
   *    heading: 'Layers',
   *    subheading: 'Classes',
   *    namespace: 'layers',
   *    subclasses: ['LayersModel']
   * }
   */
  getLayer(t, e) {
    if (e != null) {
      if (this.layers.length <= e)
        throw new L(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[e];
    } else if (t == null)
      throw new L("Provide either a layer name or layer index");
    for (const s of this.layers)
      if (s.name === t)
        return s;
    throw new L(`No such layer: ${t}`);
  }
  /**
   * Retrieves the Container's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return z(() => {
      const t = [];
      for (const e of this.layers)
        for (let s = 0; s < e.inboundNodes.length; ++s) {
          const o = Kn.nodeKey(e, s);
          this.containerNodes.has(o) && t.push(...e.calculateLosses());
        }
      return t;
    });
  }
  getConfig() {
    const t = { name: this.name }, e = this.buildNodeConversionMap(this.layers), s = [];
    for (const i of this.layers) {
      const a = i.getClassName(), l = i.getConfig(), c = [];
      for (let d = 0; d < i.inboundNodes.length; d++) {
        const h = i.inboundNodes[d], p = Kn.nodeKey(i, d);
        let f = {};
        if (this.containerNodes.has(p)) {
          if (h.callArgs)
            try {
              JSON.stringify(h.callArgs), f = h.callArgs;
            } catch {
              console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${h.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), f = {};
            }
          if (h.inboundLayers.length > 0) {
            const m = [];
            for (let g = 0; g < h.inboundLayers.length; g++) {
              const b = h.inboundLayers[g], x = h.nodeIndices[g], w = h.tensorIndices[g], y = Kn.nodeKey(b, x);
              let I = e[y];
              I == null && (I = 0), m.push([b.name, I, w, f]);
            }
            c.push(m);
          }
        }
      }
      const u = {};
      u.name = i.name, u.className = a, u.config = l, u.inboundNodes = c, s.push(u);
    }
    t.layers = s;
    const o = [];
    for (let i = 0; i < this.inputLayers.length; i++) {
      const a = this.inputLayers[i], l = this.inputLayersNodeIndices[i], c = Kn.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const d = this.inputLayersTensorIndices[i];
      o.push([a.name, u, d]);
    }
    t.inputLayers = o;
    const r = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const a = this.outputLayers[i], l = this.outputLayersNodeIndices[i], c = Kn.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const d = this.outputLayersTensorIndices[i];
      r.push([a.name, u, d]);
    }
    return t.outputLayers = r, t;
  }
  /**
   * Instantiates a LayersModel from its config (output of `get_config()`).
   * @param cls the class to create
   * @param config LayersModel config dictionary.
   * @param customObjects An optional dictionary of custom objects.
   * @param fastWeightInit Optional flag to use fast weight initialization
   *   during deserialization. This is applicable to cases in which
   *   the initialization will be immediately overwritten by loaded weight
   *   values. Default: `false`.
   * @returns A LayersModel instance.
   * @throws ValueError: In case of improperly formatted config dict.
   */
  /** @nocollapse */
  static fromConfig(t, e, s = {}, o = !1) {
    const r = {}, i = {};
    function a(g, b) {
      g.name in i ? i[g.name].push(b) : i[g.name] = [b];
    }
    function l(g, b) {
      const x = [];
      let w;
      for (const y of b) {
        const I = y[0], C = y[1], v = y[2];
        if (w = y[3] == null ? {} : y[3], !(I in r)) {
          a(g, b);
          return;
        }
        const S = r[I];
        if (S.inboundNodes.length <= C) {
          a(g, b);
          return;
        }
        const N = S.inboundNodes[C];
        x.push(N.outputTensors[v]);
      }
      x.length > 0 && g.apply(Ke(x), w);
    }
    function c(g) {
      const b = g.name, x = jn(g, e.customObjects != null ? e.customObjects : {});
      x.setFastWeightInitDuringBuild(o), r[b] = x, g.inboundNodes.forEach((y) => {
        if (!(y instanceof Array))
          throw new L(`Corrupted configuration, expected array for nodeData: ${y}`);
        a(x, y);
      });
    }
    const u = e.name, d = e.layers;
    for (const g of d)
      c(g);
    for (; !kL(i); )
      for (const g of d) {
        const b = r[g.name];
        if (b.name in i) {
          const x = i[b.name];
          delete i[b.name];
          for (const w of x)
            l(b, w);
        }
      }
    const h = [], p = [], f = e.inputLayers;
    for (const g of f) {
      const b = g[0], x = g[1], w = g[2];
      ls(b in r);
      const I = r[b].inboundNodes[x].outputTensors;
      h.push(I[w]);
    }
    const m = e.outputLayers;
    for (const g of m) {
      const b = g[0], x = g[1], w = g[2];
      ls(b in r);
      const I = r[b].inboundNodes[x].outputTensors;
      p.push(I[w]);
    }
    return new t({ inputs: h, outputs: p, name: u });
  }
  /**
   * Determine whether the container is stateful.
   *
   * Porting Note: this is the equivalent of the stateful @property of
   *   the Container class in PyKeras.
   */
  get stateful() {
    if (this._stateful)
      throw new L("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const t of this.layers)
      if (t.stateful)
        return !0;
    return !1;
  }
  /**
   * Reset the state of all stateful constituent layers (if any).
   *
   * Examples of stateful layers include RNN layers whose `stateful` property
   * is set as `true`.
   */
  resetStates() {
    z(() => {
      this.layers.forEach((t) => {
        t.stateful && t.resetStates();
      });
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function VD(n, t, e) {
  const s = t.length;
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((o) => null);
  if (s === 1)
    return Array.isArray(n) && n.length === 1 ? n : typeof n == "object" && t[0] in n ? [n[t[0]]] : [n];
  if (Array.isArray(n)) {
    if (n.length !== s)
      throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
    return n;
  } else if (typeof n == "object" && Object.keys(n).length > 0 && typeof n[Object.keys(n)[0]] == "object") {
    const o = [];
    return t.forEach((r) => {
      r in n ? o.push(n[r]) : o.push(null);
    }), o;
  } else
    throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`);
}
function iw(n, t) {
  return VD(n, t, "classWeight");
}
async function aw(n, t, e, s) {
  if (t != null || s != null)
    throw new Error("Support sampleWeight is not implemented yet");
  if (e != null) {
    const o = z(() => {
      if (n.shape.length === 1)
        return _o(n);
      if (n.shape.length === 2) {
        if (n.shape[1] > 1)
          return Ai(n, 1);
        if (n.shape[1] === 1)
          return M(n, [n.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), r = Array.from(await o.data());
    yt(o);
    const i = [];
    return r.forEach((a) => {
      if (e[a] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);
      i.push(e[a]);
    }), sn(i, "float32");
  } else
    return null;
}
function _D(n, t) {
  return G(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const AD = 32;
function lw(n, t) {
  let e, s;
  const o = t;
  e = o.xs, s = o.ys, k(e != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);
  const r = k0("input", n.inputNames, e), i = k0("output", n.outputNames, s), a = r[0].shape[0];
  k(r.length === n.inputs.length, () => `LayersModel has ${n.inputs.length} inputs, but the dataset provides ${r.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`), k(i.length === n.outputs.length, () => `LayersModel has ${n.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);
  for (let l = 0; l < r.length; l++)
    k(r[l].shape[0] === a, () => `Batch size mismatch: input ${n.inputNames[l]} has ${r[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  for (let l = 0; l < i.length; l++)
    k(i[l].shape[0] === a, () => `Batch size mismatch: output ${n.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  return { xs: r, ys: i };
}
function k0(n, t, e) {
  if (e instanceof Mt)
    return [e];
  if (Array.isArray(e))
    return k(e.length === t.length, () => `Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`), e;
  {
    const s = [];
    for (const o of t) {
      if (e[o] == null)
        throw new L(`The feature data generated by the dataset lacks the required ${n} key '${o}'.`);
      s.push(e[o]);
    }
    return s;
  }
}
function OD(n) {
  if (n.length === 3)
    throw new xt("Validation with sample weights is not implemented yet.");
  return { xs: n[0], ys: n[1] };
}
async function XD(n, t, e) {
  const s = e.batchesPerEpoch != null;
  if (k(n.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), k(e != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), k(e.epochs != null && e.epochs > 0 && Number.isInteger(e.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`), k(!s || e.batchesPerEpoch > 0 && Number.isInteger(e.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`), k(
    // tslint:disable-next-line:no-any
    e.validationSplit == null,
    () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
  ), n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  try {
    const o = e.validationData != null;
    let r, i;
    if (o)
      if (S0(e.validationData))
        k(e.validationBatches == null || e.validationBatches > 0 && Number.isInteger(e.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);
      else {
        const g = OD(e.validationData);
        r = g.xs, i = g.ys;
      }
    const a = n.makeTrainFunction(), l = n.getDedupedMetricsNames();
    let c;
    o ? c = l.slice().concat(l.map((g) => "val_" + g)) : c = l.slice();
    const u = Qy(e.callbacks, e.yieldEvery), d = e.verbose == null ? 1 : e.verbose, { callbackList: h, history: p } = jy(
      u,
      d,
      e.epochs,
      null,
      null,
      PD(t, e),
      null,
      // Batch size determined by the dataset itself.
      o,
      c
    );
    h.setModel(n), n.history = p, await h.onTrainBegin(), n.stopTraining_ = !1;
    let f = e.initialEpoch == null ? 0 : e.initialEpoch, m = await t.iterator();
    for (; f < e.epochs; ) {
      const g = {};
      await h.onEpochBegin(f);
      let b = 0, x = 0;
      for (s || (m = await t.iterator()); !s || b < e.batchesPerEpoch; ) {
        const w = await m.next();
        if (s && w.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${b} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch * e.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (w.value != null) {
          const { xs: y, ys: I } = lw(n, w.value), C = {};
          C.batch = x, C.size = y[0].shape[0], await h.onBatchBegin(x, C);
          const v = [];
          if (e.classWeight != null) {
            const R = iw(e.classWeight, n.outputNames);
            for (let $ = 0; $ < R.length; ++$)
              v.push(await aw(I[$], null, R[$]));
          }
          const S = y.concat(I).concat(v), N = a(S);
          yt(S);
          for (let R = 0; R < l.length; ++R) {
            const $ = l[R], F = N[R];
            C[$] = F, xn(F);
          }
          await h.onBatchEnd(x, C), Yy(C), x++, b++;
        }
        if (s ? b >= e.batchesPerEpoch : w.done) {
          if (o) {
            let y;
            S0(e.validationData) ? y = Bt(await n.evaluateDataset(e.validationData, { batches: e.validationBatches })) : y = Bt(n.evaluate(r, i, {
              batchSize: e.validationBatchSize == null ? AD : e.validationBatchSize,
              verbose: 0
            }));
            for (let I = 0; I < n.metricsNames.length; ++I)
              g[`val_${n.metricsNames[I]}`] = y[I];
          }
          break;
        }
        if (n.stopTraining_)
          break;
      }
      if (await h.onEpochEnd(f, g), f++, n.stopTraining_)
        break;
    }
    return await h.onTrainEnd(), await n.history.syncData(), n.history;
  } finally {
    n.isTraining = !1;
  }
}
function PD(n, t) {
  let e = null;
  return t.batchesPerEpoch != null ? e = t.batchesPerEpoch : Number.isFinite(n.size) && (e = n.size), e;
}
function S0(n) {
  return typeof n.iterator == "function";
}
function ZD(n) {
  return typeof n.next == "function";
}
async function KD(n, t, e) {
  e = e || {};
  const s = e.batches != null, o = n.testFunction;
  let r = [];
  if (e.verbose > 0)
    throw new xt("Verbose mode is not implemented yet.");
  k(!s || e.batches > 0 && Number.isInteger(e.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);
  const i = ZD(t) ? t : await t.iterator();
  let a = 0, l = 0;
  for (; !s || l < e.batches; ) {
    const c = await i.next();
    if (r = z(() => {
      if (c.value) {
        const { xs: u, ys: d } = lw(n, c.value), h = u.concat(d), p = z(() => o(h));
        if (yt(h), l === 0)
          for (let m = 0; m < p.length; ++m)
            r.push(gt(0));
        const f = h[0].shape[0];
        for (let m = 0; m < p.length; ++m) {
          const g = p[m], b = r[m];
          r[m] = z(() => U(r[m], G(f, g))), l > 0 && yt(b);
        }
        yt(p), a += f, ++l;
      }
      return r;
    }), c.done) {
      s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let c = 0; c < r.length; ++c) {
    const u = r[c];
    r[c] = ut(r[c], a), yt(u);
  }
  return Ke(r);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Od(n) {
  k(n > 0 && Number.isInteger(n), () => `batchSize is required to be a positive integer, but got ${n}`);
}
function xi(n, t, e) {
  return n == null ? [null] : Array.isArray(n) ? n.map((s) => Oo(s, t, e - t)) : Oo(n, t, e - t);
}
function dp(n, t) {
  return z(() => n == null ? null : Array.isArray(n) ? n.map((e) => dp(e, t)) : zy(n, t.dtype === "int32" ? t : et(t, "int32")));
}
function Xd(n, t) {
  const e = [];
  let s = 0, o = null;
  for (; s < n; )
    o = s + t, o >= n && (o = n), e.push([s, o]), s = o;
  return e;
}
function cw(n) {
  const t = [];
  n instanceof Mt && (n = [n]);
  for (let e = 0; e < n.length; ++e) {
    const s = n[e];
    if (s.rank === 1)
      t.push(gl(s, 1));
    else {
      if (s.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      t.push(s);
    }
  }
  return t;
}
function Zn(n, t) {
  if (n == null)
    return;
  const e = [];
  if (t instanceof Mt)
    e.push(t.id);
  else if (Array.isArray(t))
    t.forEach((o) => e.push(o.id));
  else if (t != null)
    for (const o in t) {
      const r = t[o];
      e.push(r.id);
    }
  const s = [];
  if (n instanceof Mt)
    e.indexOf(n.id) === -1 && s.push(n);
  else if (Array.isArray(n))
    n.forEach((o) => {
      e.indexOf(o.id) === -1 && s.push(o);
    });
  else if (n != null)
    for (const o in n) {
      const r = n[o];
      e.indexOf(r.id) === -1 && s.push(r);
    }
  s.forEach((o) => {
    o.isDisposed || o.dispose();
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function BD(n) {
  return n instanceof Mt;
}
function hp(n) {
  return Array.isArray(n);
}
function T0(n) {
  return !BD(n) && !hp(n);
}
function N0(n, t, e, s = !0, o = "") {
  if (t == null || t.length === 0) {
    if (n != null) {
      let i = !1;
      if (hp(n) && n.length > 0)
        i = !0;
      else if (T0(n)) {
        for (const a in n)
          if (n.hasOwnProperty(a)) {
            i = !0;
            break;
          }
      } else
        i = !0;
      if (i)
        throw new L(`Error when checking model ${o} expected no data, but got ${n}`);
    }
    return [];
  }
  if (n == null)
    return t.map((i) => null);
  let r;
  if (T0(n)) {
    n = n, r = [];
    for (const i of t) {
      if (n[i] == null)
        throw new L(`No data provided for "${i}". Need data for each key in: ${t}`);
      r.push(n[i]);
    }
  } else if (hp(n)) {
    if (n = n, n.length !== t.length)
      throw new L(`Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);
    r = n;
  } else {
    if (n = n, t.length > 1)
      throw new L(`The model ${o} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);
    r = [n];
  }
  if (r = cw(r), e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = r[i];
      if (a.shape.length !== e[i].length)
        throw new L(`Error when checking ${o}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u >= 0 && c !== u)
          throw new L(`${o} expected a batch of elements where each example has shape [${e[i].slice(1, e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1, e[i].length)}]) but the ${o} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1, a.shape.length)}] (tensor shape [${a.shape}])`);
      }
    }
  return r;
}
function HD(n, t, e) {
  const s = to(n.map((r) => r.shape[0]));
  s.sort();
  const o = to(t.map((r) => r.shape[0]));
  if (o.sort(), s.length > 1)
    throw new L(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((r) => r.shape))}`);
  if (o.length > 1)
    throw new L(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((r) => r.shape))}`);
  if (s.length > 0 && o.length > 0 && !$t(s, o))
    throw new L(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${o[0]} target sample(s).`);
}
function UD(n, t, e) {
  const s = [
    dd,
    hd,
    Bi
  ];
  for (let o = 0; o < n.length; ++o) {
    const r = n[o], i = t[o], a = e[o];
    if (i != null) {
      if (i === Bi && r.shape[r.shape.length - 1] === 1)
        throw new L(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (s.indexOf(i) !== -1) {
        const l = r.shape.slice(1), c = a.slice(1);
        for (let u = 0; u < l.length; ++u) {
          const d = l[u], h = c[u];
          if (h != null && d !== h)
            throw new L(`A target Tensor with shape ${r.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function R0(n, t, e, s = !0, o = "") {
  let r;
  if (Array.isArray(n)) {
    if (n.length !== t.length)
      throw new L(`Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);
    r = n;
  } else {
    if (t.length > 1)
      throw new L(`The model expects ${t.length} ${o} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);
    r = [n];
  }
  if (e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = r[i];
      if (a.shape.length !== e[i].length)
        throw new L(`Error when checking ${o}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u !== c)
          throw new L(`Error when checking ${o}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`);
      }
    }
}
function YD(n, t) {
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((s) => []);
  let e;
  if (typeof n == "string" || typeof n == "function")
    e = [n];
  else if (Array.isArray(n) || typeof n == "object")
    e = n;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);
  if (Array.isArray(e))
    return t.map((s) => e);
  {
    const s = [];
    for (const o of t) {
      let r = e.hasOwnProperty(o) ? e[o] : [];
      Array.isArray(r) || (r = [r]), s.push(r);
    }
    return s;
  }
}
const QD = "layers-model";
class Gr extends Kn {
  constructor(t) {
    super(t), this.isTraining = !1;
  }
  /**
   * Print a text summary of the model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - If the model has non-sequential-like topology, the inputs each layer
   *   receives
   * - The total number of trainable and non-trainable parameters of the model.
   *
   * ```js
   * const input1 = tf.input({shape: [10]});
   * const input2 = tf.input({shape: [20]});
   * const dense1 = tf.layers.dense({units: 4}).apply(input1);
   * const dense2 = tf.layers.dense({units: 8}).apply(input2);
   * const concat = tf.layers.concatenate().apply([dense1, dense2]);
   * const output =
   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
   *
   * const model = tf.model({inputs: [input1, input2], outputs: output});
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(t, e, s = console.log) {
    if (!this.built)
      throw new L("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    DD(this, t, e, s);
  }
  /**
   * Configures and prepares the model for training and evaluation.  Compiling
   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
   * or `evaluate` on an un-compiled model will throw an error.
   *
   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
   * metrics to be used for fitting and evaluating this model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  compile(t) {
    if (t.loss == null && (t.loss = []), this.loss = t.loss, typeof t.optimizer == "string")
      this.optimizer_ = LD(t.optimizer), this.isOptimizerOwned = !0;
    else {
      if (!(t.optimizer instanceof yo))
        throw new L("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = t.optimizer, this.isOptimizerOwned = !1;
    }
    let e = [];
    if (!Array.isArray(t.loss) && typeof t.loss != "string" && typeof t.loss != "function") {
      t.loss = t.loss;
      for (const i in t.loss)
        if (this.outputNames.indexOf(i) === -1)
          throw new L(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);
      for (const i of this.outputNames)
        t.loss[i] == null && console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`), e.push(Ad(t.loss[i]));
    } else if (Array.isArray(t.loss)) {
      if (t.loss.length !== this.outputs.length)
        throw new L(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);
      e = t.loss.map((a) => Ad(a));
    } else {
      const i = Ad(t.loss);
      this.outputs.forEach((a) => {
        e.push(i);
      });
    }
    this.lossFunctions = e, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let i = 0; i < this.outputs.length; ++i) {
      const a = this.internalOutputShapes[i], l = this.outputNames[i];
      this.feedOutputNames.push(l), this.feedOutputShapes.push(a), this.feedLossFns.push(this.lossFunctions[i]);
    }
    const s = [];
    this.metrics = t.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], Ao("loss", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = this.lossFunctions[i];
        this.outputs.length > 1 && (this.metricsTensors.push([a, i]), this.metricsNames.push(this.outputNames[i] + "_loss"));
      }
    });
    const o = YD(t.metrics, this.outputNames), r = (i, a, l) => {
      this.outputNames.length > 1 && (a = this.outputNames[i] + "_" + a), this.metricsNames.push(a), this.metricsTensors.push([l, i]);
    };
    Ao("metric", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = o[i];
        ((c) => {
          const u = "";
          let d, h, p;
          for (const f of c) {
            if (typeof f == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(f) !== -1) {
              const g = this.internalOutputShapes[i];
              g[g.length - 1] === 1 || this.lossFunctions[i] === hd ? ["accuracy", "acc"].indexOf(f) !== -1 ? h = qy : ["crossentropy", "ce"].indexOf(f) !== -1 && (h = CD) : this.lossFunctions[i] === Nc ? ["accuracy", "acc"].indexOf(f) !== -1 ? h = vD : ["crossentropy", "ce"].indexOf(f) !== -1 && (h = sw) : ["accuracy", "acc"].indexOf(f) !== -1 ? h = tw : ["crossentropy", "ce"].indexOf(f) !== -1 && (h = nw);
              let b;
              ["accuracy", "acc"].indexOf(f) !== -1 ? b = "acc" : ["crossentropy", "ce"].indexOf(f) !== -1 && (b = "ce"), p = h, d = u + b;
            } else
              p = GD(f), d = u + Al(f);
            let m;
            Ao(d, () => {
              m = p;
            }), r(i, d, m);
          }
        })(a);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  /**
   * Check trainable weights count consistency.
   *
   * This will raise a warning if `this.trainableWeights` and
   * `this.collectedTrainableWeights` are inconsistent (i.e., have different
   * numbers of parameters).
   * Inconsistency will typically arise when one modifies `model.trainable`
   * without calling `model.compile()` again.
   */
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(
   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateArgs`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(t, e, s = {}) {
    const o = s.batchSize == null ? 32 : s.batchSize;
    Od(o);
    const r = !0, i = this.standardizeUserDataXY(t, e, r, o);
    try {
      const a = i[0].concat(i[1]);
      this.makeTestFunction();
      const l = this.testFunction, c = this.testLoop(l, a, o, s.verbose, s.steps);
      return Ke(c);
    } finally {
      Zn(i[0], t), Zn(i[1], e);
    }
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(t, e) {
    return this.makeTestFunction(), KD(this, t, e);
  }
  /**
   * Get number of samples provided for training, evaluation or prediction.
   *
   * @param ins Input `tf.Tensor`.
   * @param batchSize Integer batch size, optional.
   * @param steps Total number of steps (batches of samples) before
   * declaring loop finished. Optional.
   * @param stepsName The public API's parameter name for `steps`.
   * @returns Number of samples provided.
   */
  checkNumSamples(t, e, s, o = "steps") {
    let r;
    if (s != null) {
      if (r = null, e != null)
        throw new L(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${e}`);
    } else if (t != null)
      Array.isArray(t) ? r = t[0].shape[0] : r = t.shape[0];
    else
      throw new L(`Either the input data should have a defined shape, or ${o} shoud be specified.`);
    return r;
  }
  /**
   * Execute internal tensors of the model with input data feed.
   * @param inputs Input data feed. Must match the inputs of the model.
   * @param outputs Names of the output tensors to be fetched. Must match
   *   names of the SymbolicTensors that belong to the graph.
   * @returns Fetched values for `outputs`.
   */
  execute(t, e) {
    if (Array.isArray(e) && e.length === 0)
      throw new L("`outputs` is an empty Array, which is not allowed.");
    const s = Array.isArray(e), o = s ? e : [e], r = this.retrieveSymbolicTensors(o), i = new Ys();
    if (t instanceof Mt && (t = [t]), Array.isArray(t)) {
      if (t.length !== this.inputs.length)
        throw new L(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let l = 0; l < this.inputs.length; ++l)
        i.add(this.inputs[l], t[l]);
    } else
      for (const l of this.inputs) {
        const c = t[l.name];
        if (c == null)
          throw new L(`No value is provided for the model's input ${l.name}`);
        i.add(l, c);
      }
    const a = Ti(r, i);
    return s ? a : a[0];
  }
  /**
   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
   */
  retrieveSymbolicTensors(t) {
    const e = tr(null, t.length);
    let s = t.length;
    for (const o of this.layers) {
      const r = Array.isArray(o.output) ? o.output : [o.output], i = r.map((a) => a.name);
      for (let a = 0; a < t.length; ++a) {
        const l = i.indexOf(t[a]);
        if (l !== -1 && (e[a] = r[l], s--), s === 0)
          break;
      }
      if (s === 0)
        break;
    }
    if (s > 0) {
      const o = [];
      throw e.forEach((r, i) => {
        r == null && o.push(t[i]);
      }), new L(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`);
    }
    return e;
  }
  /**
   * Helper method to loop over some data in batches.
   *
   * Porting Note: Not using the functional approach in the Python equivalent
   *   due to the imperative backend.
   * Porting Note: Does not support step mode currently.
   *
   * @param ins: input data
   * @param batchSize: integer batch size.
   * @param verbose: verbosity model
   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
   *   `tf.Tensor` (if multipe outputs).
   */
  predictLoop(t, e = 32, s = !1) {
    return z(() => {
      const o = this.checkNumSamples(t);
      if (s)
        throw new xt("Verbose predictLoop() is not implemented yet.");
      const r = Xd(o, e), i = this.outputs.map((a) => []);
      for (let a = 0; a < r.length; ++a)
        z(() => {
          const c = r[a][0], u = r[a][1], d = xi(t, c, u), h = [];
          if (Array.isArray(d))
            for (let f = 0; f < d.length; ++f)
              h.push({ key: this.inputs[f], value: d[f] });
          else
            h.push({ key: this.inputs[0], value: d });
          const p = new Ys(h);
          return Ti(this.outputs, p);
        }).forEach((c, u) => i[u].push(c));
      return Ke(i.map((a) => ze(a, 0)));
    });
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param args A `ModelPredictArgs` object containing optional fields.
   *
   * @return Prediction results as a `tf.Tensor`(s).
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(t, e = {}) {
    const s = cw(t);
    R0(s, this.inputNames, this.feedInputShapes, !1);
    try {
      const o = e.batchSize == null ? 32 : e.batchSize;
      return Od(o), this.predictLoop(s, o);
    } finally {
      Zn(s, t);
    }
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predictOnBatch(tf.ones([8, 10])).print();
   * ```
   * @param x: Input samples, as a Tensor (for models with exactly one
   *   input) or an array of Tensors (for models with more than one input).
   * @return Tensor(s) of predictions
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predictOnBatch(t) {
    R0(t, this.inputNames, this.feedInputShapes, !0);
    const e = (Array.isArray(t) ? t[0] : t).shape[0];
    return this.predictLoop(t, e);
  }
  standardizeUserDataXY(t, e, s = !0, o) {
    if (this.optimizer_ == null)
      throw new Ln("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const r = [];
    for (let i = 0; i < this.feedOutputShapes.length; ++i) {
      const a = this.feedOutputShapes[i];
      this.feedLossFns[i] === Nc ? r.push(a.slice(0, a.length - 1).concat([1])) : r.push(a);
    }
    if (t = N0(t, this.feedInputNames, this.feedInputShapes, !1, "input"), e = N0(e, this.feedOutputNames, r, !1, "target"), HD(t, e), UD(e, this.feedLossFns, this.feedOutputShapes), this.stateful && o != null && o > 0 && t[0].shape[0] % o !== 0)
      throw new L(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${t[0].shape[0]} sample(s).`);
    return [t, e];
  }
  async standardizeUserData(t, e, s, o, r = !0, i) {
    const [a, l] = this.standardizeUserDataXY(t, e, r, i);
    if (s != null)
      throw new Error("sample weight is not supported yet.");
    let c = null;
    if (o != null) {
      const u = iw(o, this.outputNames);
      c = [];
      for (let d = 0; d < u.length; ++d)
        c.push(await aw(l[d], null, u[d]));
    }
    return [a, l, c];
  }
  /**
   * Loop over some test data in batches.
   * @param f A Function returning a list of tensors.
   * @param ins Array of tensors to be fed to `f`.
   * @param batchSize Integer batch size or `null` / `undefined`.
   * @param verbose verbosity mode.
   * @param steps Total number of steps (batches of samples) before
   * declaring test finished. Ignored with the default value of `null` /
   * `undefined`.
   * @returns Array of Scalars.
   */
  testLoop(t, e, s, o = 0, r) {
    return z(() => {
      const i = this.checkNumSamples(e, s, r, "steps"), a = [];
      if (o > 0)
        throw new xt("Verbose mode is not implemented yet.");
      if (r != null)
        throw new xt("steps mode in testLoop() is not implemented yet");
      {
        const l = Xd(i, s), c = sn(qn(0, i));
        for (let u = 0; u < l.length; ++u) {
          const d = l[u][0], h = l[u][1], p = Oo(c, d, h - d), f = dp(e, p), m = t(f);
          if (u === 0)
            for (let g = 0; g < m.length; ++g)
              a.push(gt(0));
          for (let g = 0; g < m.length; ++g) {
            const b = m[g];
            a[g] = U(a[g], G(h - d, b));
          }
        }
        for (let u = 0; u < a.length; ++u)
          a[u] = ut(a[u], i);
      }
      return a;
    });
  }
  getDedupedMetricsNames() {
    const t = this.metricsNames, e = [];
    for (let s = 0; s < t.length; ++s) {
      const o = t[s];
      let r = o;
      if (h0(t, o) > 1) {
        const i = h0(t.slice(0, s), o);
        r += `_${i}`;
      }
      e.push(r);
    }
    return e;
  }
  /**
   * Creates a function that performs the following actions:
   *
   * 1. computes the losses
   * 2. sums them to get the total loss
   * 3. call the optimizer computes the gradients of the LayersModel's
   *    trainable weights w.r.t. the total loss and update the variables
   * 4. calculates the metrics
   * 5. returns the values of the losses and metrics.
   */
  makeTrainFunction() {
    return (t) => {
      const e = [], s = t.slice(0, this.inputs.length), o = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), r = t.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), i = [], a = () => {
        const d = [];
        for (let m = 0; m < this.inputs.length; ++m)
          d.push({ key: this.inputs[m], value: s[m] });
        const h = new Ys(d), p = Ti(this.outputs, h, { training: !0 });
        let f;
        for (let m = 0; m < this.lossFunctions.length; ++m) {
          const g = this.lossFunctions[m];
          let b = g(o[m], p[m]);
          r[m] != null && (b = _D(b, r[m]));
          const x = ie(b);
          e.push(x), m === 0 ? f = b : f = U(f, b);
        }
        for (let m = 0; m < this.metricsTensors.length; ++m) {
          let g;
          if (this.outputs.length > 1 && m < this.outputs.length)
            g = e[m];
          else {
            const b = this.metricsTensors[m][0], x = this.metricsTensors[m][1];
            g = ie(b(o[x], p[x]));
          }
          xn(g), i.push(g);
        }
        return f = ie(f), this.calculateLosses().forEach((m) => {
          f = U(f, m);
        }), f;
      }, l = this.collectedTrainableWeights.map((d) => d.read()), c = !0;
      return [this.optimizer_.minimize(a, c, l)].concat(i);
    };
  }
  /**
   * Create a function which, when invoked with an array of `tf.Tensor`s as a
   * batch of inputs, returns the prespecified loss and metrics of the model
   * under the batch of input data.
   */
  makeTestFunction() {
    this.testFunction = (t) => z(() => {
      const e = [];
      let s;
      const o = t.slice(0, this.inputs.length), r = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), i = [];
      for (let c = 0; c < this.inputs.length; ++c)
        i.push({ key: this.inputs[c], value: o[c] });
      const a = new Ys(i), l = Ti(this.outputs, a);
      for (let c = 0; c < this.lossFunctions.length; ++c) {
        const u = this.lossFunctions[c], d = ie(u(r[c], l[c]));
        c === 0 ? s = d : s = U(s, d), e.push(s);
      }
      for (let c = 0; c < this.metricsTensors.length; ++c) {
        const u = this.metricsTensors[c][0], d = this.metricsTensors[c][1], h = ie(u(r[d], l[d]));
        e.push(h);
      }
      return e;
    });
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a
   * dataset).
   *
   * ```js
   * const model = tf.sequential({
   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * for (let i = 1; i < 5 ; ++i) {
   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *       batchSize: 4,
   *       epochs: 3
   *   });
   *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
   * }
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you
   * can also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named,
   * you can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args A `ModelFitArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input
   * data and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(t, e, s = {}) {
    if (this.isTraining)
      throw new Error("Cannot start training because another fit() call is ongoing.");
    this.isTraining = !0;
    let o, r, i, a, l, c, u, d, h;
    try {
      const p = s.batchSize == null ? 32 : s.batchSize;
      Od(p);
      const f = !1, m = await this.standardizeUserData(t, e, s.sampleWeight, s.classWeight, f, p);
      o = m[0], r = m[1], h = m[2];
      let g = !1, b;
      if (s.validationData != null && s.validationData.length > 0) {
        if (g = !0, s.validationData.length === 2)
          l = s.validationData[0], c = s.validationData[1];
        else
          throw s.validationData.length === 3 ? new xt("validationData including sample weights is not supported yet.") : new L(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
        const N = !0, R = await this.standardizeUserData(
          l,
          c,
          null,
          /** Unused sample weights. */
          null,
          /** Unused class weights. */
          N,
          p
        );
        u = R[0], d = R[1], b = u.concat(d);
      } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
        g = !0;
        const N = Math.floor(o[0].shape[0] * (1 - s.validationSplit)), R = o[0].shape[0];
        u = xi(o, N, R), i = o, o = xi(o, 0, N), d = xi(r, N, R), a = r, r = xi(r, 0, N), b = u.concat(d);
      } else
        s.validationSteps != null && (g = !0);
      const x = o.concat(r).concat(h);
      this.checkTrainableWeightsConsistency();
      const w = this.makeTrainFunction(), y = this.getDedupedMetricsNames();
      let I, C;
      g ? (this.makeTestFunction(), I = this.testFunction, C = y.slice().concat(y.map((N) => "val_" + N))) : (I = null, b = [], C = y.slice());
      const v = Qy(s.callbacks, s.yieldEvery);
      return await this.fitLoop(w, x, y, p, s.epochs, s.verbose, v, I, b, s.shuffle, C, s.initialEpoch, null, null);
    } finally {
      this.isTraining = !1, Zn(o, t), Zn(r, e), Zn(i, t), Zn(a, e), Zn(u, l), Zn(d, c), h != null && yt(h);
    }
  }
  /**
   * Abstract fit function for `f(ins)`.
   * @param f A Function returning a list of tensors. For training, this
   *   function is expected to perform the updates to the variables.
   * @param ins List of tensors to be fed to `f`.
   * @param outLabels List of strings, display names of the outputs of `f`.
   * @param batchSize Integer batch size or `== null` if unknown. Default : 32.
   * @param epochs Number of times to iterate over the data. Default : 1.
   * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.
   * @param callbacks List of callbacks to be called during training.
   * @param valF Function to call for validation.
   * @param valIns List of tensors to be fed to `valF`.
   * @param shuffle Whether to shuffle the data at the beginning of every
   * epoch. Default : true.
   * @param callbackMetrics List of strings, the display names of the metrics
   *   passed to the callbacks. They should be the concatenation of the
   *   display names of the outputs of `f` and the list of display names
   *   of the outputs of `valF`.
   * @param initialEpoch Epoch at which to start training (useful for
   *   resuming a previous training run). Default : 0.
   * @param stepsPerEpoch Total number of steps (batches on samples) before
   *   declaring one epoch finished and starting the next epoch. Ignored with
   *   the default value of `undefined` or `null`.
   * @param validationSteps Number of steps to run validation for (only if
   *   doing validation from data tensors). Not applicable for tfjs-layers.
   * @returns A `History` object.
   */
  async fitLoop(t, e, s, o, r, i, a, l, c, u, d, h, p, f) {
    o == null && (o = 32), r == null && (r = 1), u == null && (u = !0), h == null && (h = 0);
    let m = !1;
    if (l != null && c != null && (m = !0), f != null && (m = !0, p == null))
      throw new L("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
    const g = this.checkNumSamples(e, o, p, "steps_per_epoch");
    let b;
    g != null && (b = qn(0, g)), i == null && (i = 1);
    const { callbackList: x, history: w } = jy(a, i, r, h, g, p, o, m, d);
    x.setModel(this), this.history = w, await x.onTrainBegin(), this.stopTraining_ = !1;
    for (let y = h; y < r; ++y) {
      await x.onEpochBegin(y);
      const I = {};
      if (p != null)
        throw new xt("stepsPerEpoch mode is not implemented yet.");
      {
        if (u === "batch")
          throw new xt("batch shuffling is not implemneted yet");
        u && Gp(b);
        const C = sn(b), v = Xd(g, o);
        for (let S = 0; S < v.length; ++S) {
          const N = {};
          if (await x.onBatchBegin(S, N), z(() => {
            const R = v[S][0], $ = v[S][1], F = Oo(C, R, $ - R);
            N.batch = S, N.size = $ - R;
            const W = dp(e, F), _ = t(W);
            for (let A = 0; A < s.length; ++A) {
              const O = s[A], K = _[A];
              N[O] = K, xn(K);
            }
            if (S === v.length - 1 && m) {
              const A = this.testLoop(l, c, o);
              for (let O = 0; O < s.length; ++O) {
                const K = s[O], Z = A[O];
                xn(Z), I["val_" + K] = Z;
              }
            }
          }), await x.onBatchEnd(S, N), Yy(N), this.stopTraining_)
            break;
        }
        C.dispose();
      }
      if (await x.onEpochEnd(y, I), this.stopTraining_)
        break;
    }
    return await x.onTrainEnd(), await this.history.syncData(), this.history;
  }
  // TODO(cais): Add code snippet below when it's possible to instantiate
  //   actual dataset objects.
  /**
   * Trains the model using a dataset object.
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for training. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs.
   *   Of the two items in the array, the first is the input feature(s) and
   *   the second is the output target(s).
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fitDataset(t, e) {
    return XD(this, t, e);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(t, e) {
    const s = await this.standardizeUserData(t, e), o = s[0], r = s[1], a = this.makeTrainFunction()(o.concat(r)), l = [];
    for (const c of a) {
      const u = await c.data();
      l.push(u[0]);
    }
    return yt(a), Zn(s[0], t), Zn(s[1], e), Ke(l);
  }
  /**
   * Extract weight values of the model.
   *
   * @param config: An instance of `io.SaveConfig`, which specifies
   * model-saving options such as whether only trainable weights are to be
   * saved.
   * @returns A `NamedTensorMap` mapping original weight names (i.e.,
   *   non-uniqueified weight names) to their values.
   */
  getNamedWeights(t) {
    const e = [], s = t != null && t.trainableOnly, o = s ? this.trainableWeights : this.weights, r = this.getWeights(s);
    for (let i = 0; i < o.length; ++i)
      s && !o[i].trainable || e.push({ name: o[i].originalName, tensor: r[i] });
    return e;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const input = tf.input({shape: [10]});
   * const output = tf.layers.dense({units: 1}).apply(input);
   * const model = tf.model({inputs: [input], outputs: [output]});
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10
   * values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(t) {
    this.stopTraining_ = t;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(t) {
    this.optimizer_ !== t && (this.optimizer_ = t, this.isOptimizerOwned = !1);
  }
  dispose() {
    const t = super.dispose();
    if (t.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const e = bc().numTensors;
      this.optimizer_.dispose(), t.numDisposedVariables += e - bc().numTensors;
    }
    return t;
  }
  getLossIdentifiers() {
    let t;
    if (typeof this.loss == "string")
      t = Ss(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const e of this.loss)
        if (typeof e != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      t = this.loss.map((e) => Ss(e));
    } else {
      const e = Object.keys(this.loss);
      t = {};
      const s = this.loss;
      for (const o of e)
        if (typeof s[o] == "string")
          t[o] = Ss(s[o]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return t;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [Ss(Al(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((t) => Ss(Al(t)));
    {
      const t = {};
      for (const e in this.metrics)
        t[e] = Ss(Al(this.metrics[e]));
      return t;
    }
  }
  getTrainingConfig() {
    return {
      loss: this.getLossIdentifiers(),
      metrics: this.getMetricIdentifiers(),
      optimizer_config: {
        class_name: this.optimizer.getClassName(),
        config: this.optimizer.getConfig()
      }
    };
  }
  loadTrainingConfig(t) {
    if (t.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (t.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (t.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    const e = Hi(t.optimizer_config), s = jn(e);
    let o;
    if (typeof t.loss == "string")
      o = $o(t.loss);
    else if (Array.isArray(t.loss))
      o = t.loss.map((i) => $o(i));
    else if (t.loss != null) {
      o = {};
      for (const i in t.loss)
        o[i] = $o(t.loss[i]);
    }
    let r;
    if (Array.isArray(t.metrics))
      r = t.metrics.map((i) => $o(i));
    else if (t.metrics != null) {
      r = {};
      for (const i in t.metrics)
        r[i] = $o(t.metrics[i]);
    }
    this.compile({ loss: o, metrics: r, optimizer: s });
  }
  /**
   * Save the configuration and/or weights of the LayersModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 2. Saving `model`'s topology and weights to browser
   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('indexeddb://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 3. Saving `model`'s topology and weights as two files
   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
   * browser.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('downloads://my-model-1');
   * ```
   *
   * Example 4. Send  `model`'s topology and weights to an HTTP server.
   * See the documentation of `tf.io.http` for more details
   * including specifying request parameters and implementation of the
   * server.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('http://my-server/model/upload');
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async save(t, e) {
    if (typeof t == "string") {
      const c = Ok(t);
      if (c.length === 0)
        throw new L(`Cannot find any save handlers for URL '${t}'`);
      if (c.length > 1)
        throw new L(`Found more than one (${c.length}) save handlers for URL '${t}'`);
      t = c[0];
    }
    if (t.save == null)
      throw new L("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const s = await Yg(this.getNamedWeights(e)), o = !1, r = null, a = {
      modelTopology: this.toJSON(r, o),
      format: QD,
      generatedBy: `TensorFlow.js tfjs-layers v${rw}`,
      convertedBy: null
    };
    if ((e == null ? !1 : e.includeOptimizer) && this.optimizer != null) {
      a.trainingConfig = this.getTrainingConfig();
      const c = "optimizer", { data: u, specs: d } = await Yg(await this.optimizer.getWeights(), c);
      s.specs.push(...d), s.data = Hx([s.data, u]);
    }
    return this.userDefinedMetadata != null && (v0(this.userDefinedMetadata, this.name, !0), a.userDefinedMetadata = this.userDefinedMetadata), a.weightData = s.data, a.weightSpecs = s.specs, t.save(a);
  }
  /**
   * Set user-defined metadata.
   *
   * The set metadata will be serialized together with the topology
   * and weights of the model during `save()` calls.
   *
   * @param setUserDefinedMetadata
   */
  setUserDefinedMetadata(t) {
    v0(t, this.name), this.userDefinedMetadata = t;
  }
  /**
   * Get user-defined metadata.
   *
   * The metadata is supplied via one of the two routes:
   *   1. By calling `setUserDefinedMetadata()`.
   *   2. Loaded during model loading (if the model is constructed
   *      via `tf.loadLayersModel()`.)
   *
   * If no user-defined metadata is available from either of the
   * two routes, this function will return `undefined`.
   */
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
Gr.className = "Model";
H(Gr);
class uw extends Gr {
}
uw.className = "Functional";
H(uw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function r6(n, t) {
  "modelTopology" in n || (n = { modelTopology: n }), n = n;
  let e = n.modelTopology;
  e.model_config != null && (e = e.model_config);
  const s = Hi(e), o = jn(s, t);
  if (n.weightsManifest != null) {
    const r = await QE(n.weightsManifest, n.pathPrefix, o.weights.map((a) => a.originalName)), i = {};
    for (const a of o.weights)
      i[a.originalName] = r[a.originalName];
    o.loadWeights(i), yt(r);
  }
  return o;
}
async function i6(n, t) {
  if (t == null && (t = {}), typeof n == "string") {
    const e = Xk(n, t);
    if (e.length === 0)
      e.push(eG(n, t));
    else if (e.length > 1)
      throw new L(`Found more than one (${e.length}) load handlers for URL '${n}'`);
    n = e[0];
  }
  return jD(n, void 0, t);
}
async function jD(n, t, e) {
  if (e == null && (e = {}), n.load == null)
    throw new L("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  const s = await n.load();
  let o = s.modelTopology;
  o.model_config != null && (o = o.model_config);
  const r = e.strict == null ? !0 : e.strict, i = s.weightData != null && s.weightSpecs != null && r, a = jn(Hi(o), t, i), l = s.trainingConfig;
  if (l != null && a.loadTrainingConfig(l), s.userDefinedMetadata != null && a.setUserDefinedMetadata(s.userDefinedMetadata), s.weightData != null) {
    if (s.weightSpecs == null)
      throw new L("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    const { modelWeights: c, optimizerWeights: u } = JD(s.weightData, s.weightSpecs);
    a.loadWeights(c, r), a.optimizer != null && u.length > 0 && await a.optimizer.setWeights(u), yt(c), yt(u.map((d) => d.tensor));
  }
  return a;
}
function JD(n, t) {
  const e = Bx(n, t), s = {}, o = [];
  return t.forEach((r) => {
    r.group === "optimizer" ? o.push({ name: r.name, tensor: e[r.name] }) : s[r.name] = e[r.name];
  }), { modelWeights: s, optimizerWeights: o };
}
class Ui extends Gr {
  constructor(t) {
    if (super({ inputs: [], outputs: [] }), t = t || {}, this.trainable = !0, this.built = !1, this.name = t.name != null ? t.name : ld("sequential_"), t.layers != null)
      for (const e of t.layers)
        this.add(e);
  }
  // Helper function to Sequential.add  Throws if the new output shape will be
  // invalid.
  checkShape(t) {
    if (t.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0))
      throw new L(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`);
  }
  /**
   * Adds a layer instance on top of the layer stack.
   *
   * ```js
   *  const model = tf.sequential();
   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
   *  // Note that the untrained model is random at this point.
   *  model.predict(tf.randomNormal([10, 1])).print();
   * ```
   * @param layer Layer instance.
   *
   * @exception ValueError In case the `layer` argument does not know its
   * input shape.
   * @exception ValueError In case the `layer` argument has multiple output
   *   tensors, or is already connected somewhere else (forbidden in
   *   `Sequential` models).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  add(t) {
    const e = t instanceof Ui || t instanceof Gr;
    let s;
    if (e) {
      if (s = t, s.outputs.length !== 1)
        throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (s.inputs.length !== 1)
        throw new L("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (t.inboundNodes.length === 0) {
        if (t.batchInputShape == null)
          throw new L("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const o = qL({
          batchShape: t.batchInputShape,
          dtype: t.dtype,
          name: t.name + "_input"
        });
        t.apply(o);
      }
      if (e)
        this.outputs = s.outputs, this.inputs = s.inputs;
      else {
        if (t.inboundNodes.length !== 1)
          throw new L(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);
        if (t.inboundNodes[0].outputTensors.length !== 1)
          throw new L("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(t), this.outputs = [t.inboundNodes[0].outputTensors[0]], this.inputs = Zy(this.outputs[0]);
      }
      this.inboundNodes = [], new ud({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        // no model-level masking for now
        inputMasks: tr(null, this.inputs.length),
        outputMasks: [null],
        inputShapes: this.inputs.map((o) => o.shape),
        outputShapes: this.outputs[0].shape
      });
    } else {
      const o = t.apply(this.outputs[0]);
      if (Array.isArray(o))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(t), this.outputs = [o], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(t), this.built = !1;
  }
  /**
   * Removes the last layer in the model.
   *
   * @exception TypeError if there are no layers in the model.
   */
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const t = this.layers.length - 1;
      this.layers[t].outboundNodes = [], this.outputs = [this.layers[t].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(t, e) {
    return this.model == null && this.build(), this.model.call(t, e);
  }
  build(t) {
    if (Et(t), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new Gr({
      inputs: this.inputs,
      outputs: this.outputs[0],
      name: this.name + "_model"
    }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  /**
   * Print a text summary of the Sequential model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - The total number of trainable and non-trainable parameters of the
   * model.
   *
   * ```js
   * const model = tf.sequential();
   * model.add(
   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
   *
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(t, e, s = console.log) {
    this.built || this.build(), super.summary(t, e, s);
  }
  /**
   * Sets the weights of the model.
   *
   * @param weights Should be a list of Tensors with shapes and types matching
   *   the output of `model.getWeights()`.
   */
  setWeights(t) {
    this.model == null && this.build(), this.model.setWeights(t);
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   * });
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateConfig`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(t, e, s = {}) {
    if (!this.built)
      throw new Ln("The model needs to be compiled before being used.");
    return this.model.evaluate(t, e, s);
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(t, e) {
    if (!this.built)
      throw new Ln("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(t, e);
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([2, 10])).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param conifg A `ModelPredictConfig` object containing optional fields.
   *
   * @return `tf.Tensor`(s) of predictions.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(t, e = {}) {
    return this.model == null && this.build(), this.model.predict(t, e);
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * @param x: Input samples, as a Tensor, or list of Tensors (if the model
   *   has multiple inputs).
   * @return Tensor(s) of predictions
   */
  predictOnBatch(t) {
    return this.model == null && this.build(), this.model.predictOnBatch(t);
  }
  /**
   * See `LayersModel.compile`.
   *
   * @param args
   */
  compile(t) {
    this.build(), this.model.compile(t), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(t) {
    this.model.optimizer = t;
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a dataset).
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   *   epochs: 3
   * });
   * console.log(history.history.loss[0]);
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you can
   * also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named, you
   *  can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args  A `ModelFitConfig`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(t, e, s = {}) {
    if (!this.built)
      throw new Ln("The model needs to be compiled before being used.");
    return this.model.fit(t, e, s);
  }
  /**
   * Trains the model using a dataset object.
   *
   * ```js
   * const xArray = [
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   * ];
   * const yArray = [1, 1, 1, 1];
   * // Create a dataset from the JavaScript array.
   * const xDataset = tf.data.array(xArray);
   * const yDataset = tf.data.array(yArray);
   * // Zip combines the `x` and `y` Datasets into a single Dataset, the
   * // iterator of which will return an object containing of two tensors,
   * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
   * // four such samples into a single object, with the same keys now pointing
   * // to tensors that hold 4 examples, organized along the batch dimension.
   * // The call to `shuffle(4)` causes each iteration through the dataset to
   * // happen in a different order.  The size of the shuffle window is 4.
   * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
   *     .batch(4)
   *     .shuffle(4);
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fitDataset(xyDataset, {
   *   epochs: 4,
   *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
   * });
   * ```
   *
   * @param dataset A dataset object. Its `iterator()` method is expected to
   *   generate a dataset iterator object, the `next()` method of which is
   *   expected to produce data batches for evaluation. The return value of the
   *   `next()` call ought to contain a boolean `done` field and a `value`
   *   field.
   *
   *   The `value` field is expected to be an object of with fields
   *   `xs` and `ys`, which point to the feature tensor and the target tensor,
   *   respectively. This case is for models with exactly one input and one
   *   output (e.g. a sequential model). For example:
   *   ```js
   *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
   *   ```
   *
   *   If the model has multiple inputs, the `xs` field of `value` should
   *   be an object mapping input names to their respective feature tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: {
   *         input_1: xsTensor1,
   *         input_2: xsTensor2
   *       },
   *       ys: ysTensor
   *     },
   *     done: false
   *   }
   *   ```
   *   If the model has multiple outputs, the `ys` field of `value` should
   *   be an object mapping output names to their respective target tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: xsTensor,
   *       ys: {
   *         output_1: ysTensor1,
   *         output_2: ysTensor2
   *       },
   *     },
   *     done: false
   *   }
   *   ```
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async fitDataset(t, e) {
    if (!this.built)
      throw new Ln("The model needs to be compiled before being used.");
    return this.model.fitDataset(t, e);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(t, e) {
    return this.model.trainOnBatch(t, e);
  }
  /* See parent class for JsDoc */
  /** @nocollapse */
  static fromConfig(t, e, s = {}, o = !1) {
    let r, i = {};
    if (e instanceof Array) {
      if (e[0].className == null || e[0].className === "Merge")
        throw new L("Legacy serialization format not supported yet.");
      r = e;
    } else
      k(e.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), r = e.layers, delete e.layers, i = e;
    const a = new t(i);
    if (!(a instanceof Ui))
      throw new xt(`Sequential.fromConfig called on non-Sequential input: ${a}`);
    for (const l of r) {
      const u = jn(l, void 0, o);
      o && u.setFastWeightInitDuringBuild(!0), a.add(u);
    }
    return a;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const model = tf.sequential();
   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10 values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(t) {
    if (this.model == null)
      throw new L("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = t;
  }
  get stopTraining() {
    if (this.model == null)
      throw new L("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  // TODO(cais): Override get trainableWeights() here
  // tslint:disable-next-line:no-any
  getConfig() {
    const t = [];
    for (const e of this.layers) {
      const s = {};
      s.className = e.getClassName(), s.config = e.getConfig(), t.push(s);
    }
    return { name: this.name, layers: t };
  }
}
Ui.className = "Sequential";
H(Ui);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let Je = class extends dr {
  getConfig() {
    return {};
  }
};
class dw extends Je {
  /**
   * Calculate the activation function.
   *
   * @param x: Input.
   * @param alpha: Scaling factor the negative section.
   * @return Output of the ELU activation.
   */
  apply(t, e = 1) {
    return _L(t, e);
  }
}
dw.className = "elu";
H(dw);
class hw extends Je {
  apply(t) {
    return w1(t);
  }
}
hw.className = "selu";
H(hw);
class pw extends Je {
  apply(t) {
    return Vs(t);
  }
}
pw.className = "relu";
H(pw);
class fw extends Je {
  apply(t) {
    return z(() => td(6, Vs(t)));
  }
}
fw.className = "relu6";
H(fw);
class mw extends Je {
  apply(t) {
    return t;
  }
}
mw.className = "linear";
H(mw);
class gw extends Je {
  apply(t) {
    return qr(t);
  }
}
gw.className = "sigmoid";
H(gw);
class bw extends Je {
  apply(t) {
    return OL(t);
  }
}
bw.className = "hardSigmoid";
H(bw);
class xw extends Je {
  apply(t) {
    return cl(t);
  }
}
xw.className = "softplus";
H(xw);
class yw extends Je {
  apply(t) {
    return AL(t);
  }
}
yw.className = "softsign";
H(yw);
class ww extends Je {
  apply(t) {
    return Vf(t);
  }
}
ww.className = "tanh";
H(ww);
let sg = class extends Je {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(t, e = -1) {
    return sm(t, e);
  }
};
sg.className = "softmax";
H(sg);
class Iw extends Je {
  /**
   * Calculate the activation function of log softmax:
   * log( exp(x_i) / sum(exp(x)) )
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(t, e = -1) {
    return p1(t, e);
  }
}
Iw.className = "logSoftmax";
H(Iw);
class Cw extends Je {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param alpha Scaling factor for the sigmoid function.
   * @returns a Tensor of the same shape as x
   */
  apply(t, e = 1) {
    return z(() => G(qr(G(t, e)), t));
  }
}
Cw.className = "swish";
H(Cw);
class vw extends Je {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @returns a Tensor of the same shape as x
   */
  apply(t) {
    return z(() => G(t, Vf(cl(t))));
  }
}
vw.className = "mish";
H(vw);
function co(n) {
  return n.getClassName();
}
function Pd(n, t = {}) {
  return ml(n, mn.getMap().classNameMap, t, "activation");
}
function uo(n) {
  if (n == null) {
    const t = {};
    return t.className = "linear", t.config = {}, Pd(t);
  }
  if (typeof n == "string") {
    const t = {};
    return t.className = n, t.config = {}, Pd(t);
  } else
    return n instanceof Je ? n : Pd(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function og(n) {
  if (n != null && typeof n != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`);
}
class kw extends dr {
}
class pd extends kw {
  constructor(t) {
    super(), og(t), this.l1 = t == null || t.l1 == null ? 0.01 : t.l1, this.l2 = t == null || t.l2 == null ? 0.01 : t.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  /**
   * Porting note: Renamed from __call__.
   * @param x Variable of which to calculate the regularization score.
   */
  apply(t) {
    return z(() => {
      let e = ye([1]);
      return this.hasL1 && (e = U(e, at(G(this.l1, be(t))))), this.hasL2 && (e = U(e, at(G(this.l2, bl(t))))), M(e, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t({ l1: e.l1, l2: e.l2 });
  }
}
pd.className = "L1L2";
H(pd);
function c6(n) {
  return og(n), new pd({ l1: n != null ? n.l1 : null, l2: 0 });
}
function u6(n) {
  return og(n), new pd({ l2: n != null ? n.l2 : null, l1: 0 });
}
const $0 = {
  l1l2: "L1L2"
};
function Vt(n) {
  return Pm(n);
}
function E0(n, t = {}) {
  return ml(n, mn.getMap().classNameMap, t, "regularizer");
}
function jt(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in $0 ? $0[n] : n, config: {} };
    return E0(e);
  } else
    return n instanceof kw ? n : E0(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Sw extends kt {
  constructor(t) {
    super(t ?? {}), this.supportsMasking = !0, t != null && (this.maxValue = t.maxValue);
  }
  call(t, e) {
    t = mt(t);
    let s = Vs(t);
    return this.maxValue != null && (s = Cn(s, 0, this.maxValue)), s;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { maxValue: this.maxValue }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Sw.className = "ReLU";
H(Sw);
class Tw extends kt {
  constructor(t) {
    super(t ?? {}), this.DEFAULT_ALPHA = 0.3, t == null && (t = {}), this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = mt(t);
    return Bf(s, this.alpha);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Tw.className = "LeakyReLU";
H(Tw);
class Nw extends kt {
  constructor(t) {
    if (super(t ?? {}), this.DEFAULT_ALPHA_INITIALIZER = "zeros", t == null && (t = {}), this.supportsMasking = !0, this.alphaInitializer = Qt(t.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = jt(t.alphaRegularizer), this.alphaConstraint = ge(t.alphaConstraint), t.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(t.sharedAxes))
      this.sharedAxes = t.sharedAxes;
    else if (typeof t.sharedAxes == "number")
      this.sharedAxes = [t.sharedAxes];
    else
      throw new L(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);
  }
  build(t) {
    t = Et(t);
    const e = t.slice(1);
    if (this.sharedAxes != null)
      for (const o of this.sharedAxes)
        e[o - 1] = 1;
    this.alpha = this.addWeight("alpha", e, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
    const s = {};
    if (this.sharedAxes != null)
      for (let o = 1; o < t.length; ++o)
        s[o] = t[o];
    this.inputSpec = [new fe({
      ndim: t.length,
      axes: s
    })], this.built = !0;
  }
  call(t, e) {
    return t = mt(t), qf(t, this.alpha.read());
  }
  getConfig() {
    const t = {
      alphaInitializer: te(this.alphaInitializer),
      alphaRegularizer: Vt(this.alphaRegularizer),
      alphaConstraint: me(this.alphaConstraint),
      sharedAxes: this.sharedAxes
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Nw.className = "PReLU";
H(Nw);
let Rw = class extends kt {
  constructor(t) {
    if (super(t ?? {}), this.DEFAULT_ALPHA = 1, t == null && (t = {}), t.alpha != null && t.alpha !== this.DEFAULT_ALPHA)
      throw new xt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = mt(t);
    return Qu(s);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
};
Rw.className = "ELU";
H(Rw);
class $w extends kt {
  constructor(t) {
    super(t ?? {}), this.DEFAULT_THETA = 1, t == null && (t = {}), this.theta = t.theta == null ? this.DEFAULT_THETA : t.theta;
  }
  call(t, e) {
    const s = mt(t);
    return G(s, et(dn(s, this.theta), "float32"));
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { theta: this.theta }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
$w.className = "ThresholdedReLU";
H($w);
class Ew extends kt {
  constructor(t) {
    super(t ?? {}), this.DEFAULT_AXIS = 1, t == null && (t = {}), this.softmax = new sg().apply, this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis;
  }
  call(t, e) {
    const s = mt(t);
    return this.softmax(s, this.axis);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { axis: this.axis }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Ew.className = "Softmax";
H(Ew);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Lr(n, t, e) {
  if (typeof n == "number")
    return tr(n, t);
  if (n.length !== t)
    throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);
  for (let s = 0; s < t; ++s) {
    const o = n[s];
    if (!zL(o))
      throw new L(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${o}`);
  }
  return n;
}
function Jn(n, t, e, s, o = 1) {
  if (n == null)
    return n;
  const r = t + (t - 1) * (o - 1);
  let i;
  return e === "same" ? i = n : i = n - r + 1, Math.floor((i + s - 1) / s);
}
function cs(n, t, e, s) {
  if (n == null)
    return null;
  if (s === "valid")
    n = n * t + lo([e - t, 0]);
  else if (s === "same")
    n = n * t;
  else
    throw new L(`Unsupport padding mode: ${s}.`);
  return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function rg(n, t) {
  return z(() => (ue(t), t === "channelsFirst" ? St(n, [0, 2, 3, 1]) : n));
}
function Gw(n, t) {
  return z(() => (ue(t), t === "channelsFirst" ? St(n, [0, 2, 3, 4, 1]) : n));
}
function qD(n, t, e, s = 1, o = "valid", r, i = 1) {
  return z(() => {
    if (r == null && (r = ts()), ue(r), n.shape.length !== 3)
      throw new L(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);
    if (t.shape.length !== 3)
      throw new L(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);
    if (e != null && e.shape.length !== 1)
      throw new L(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);
    if (r === "channelsFirst" && (n = St(n, [0, 2, 1])), o === "causal")
      throw new xt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let a = o1(n, t, s, o === "same" ? "same" : "valid", "NWC", i);
    return e != null && (a = ss(a, e)), a;
  });
}
function G0(n, t, e, s = [1, 1], o = "valid", r, i, a = null) {
  return z(() => {
    if (r == null && (r = ts()), ue(r), n.rank !== 3 && n.rank !== 4)
      throw new L(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);
    if (t.rank !== 3 && t.rank !== 4)
      throw new L(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);
    let l = rg(n, r);
    if (o === "causal")
      throw new xt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = b$({
      x: l,
      filter: t,
      strides: s,
      pad: o === "same" ? "same" : "valid",
      dilations: i,
      dataFormat: "NHWC",
      bias: e,
      activation: a
    }), r === "channelsFirst" && (l = St(l, [0, 3, 1, 2])), l;
  });
}
function tM(n, t, e, s = [1, 1, 1], o = "valid", r, i) {
  return z(() => {
    if (r == null && (r = ts()), ue(r), n.rank !== 4 && n.rank !== 5)
      throw new L(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);
    if (t.rank !== 4 && t.rank !== 5)
      throw new L(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);
    let a = Gw(n, r);
    if (o === "causal")
      throw new xt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return a = xT(a, t, s, o === "same" ? "same" : "valid", "NDHWC", i), e != null && (a = ss(a, e)), r === "channelsFirst" && (a = St(a, [0, 4, 1, 2, 3])), a;
  });
}
class fd extends kt {
  constructor(t, e) {
    if (super(e), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", fd.verifyArgs(e), this.rank = t, we(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new xt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = Lr(e.kernelSize, t, "kernelSize"), this.strides = Lr(e.strides == null ? 1 : e.strides, t, "strides"), this.padding = e.padding == null ? "valid" : e.padding, vn(this.padding), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, ue(this.dataFormat), this.activation = uo(e.activation), this.useBias = e.useBias == null ? !0 : e.useBias, this.biasInitializer = Qt(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = ge(e.biasConstraint), this.biasRegularizer = jt(e.biasRegularizer), this.activityRegularizer = jt(e.activityRegularizer), this.dilationRate = Lr(e.dilationRate == null ? 1 : e.dilationRate, t, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new L(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new L(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new L(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(t) {
    if (ls("kernelSize" in t, "required key 'kernelSize' not in config"), typeof t.kernelSize != "number" && !Zm(t.kernelSize, "number", 1, 3))
      throw new L(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`);
  }
  getConfig() {
    const t = {
      kernelSize: this.kernelSize,
      strides: this.strides,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      activation: co(this.activation),
      useBias: this.useBias,
      biasInitializer: te(this.biasInitializer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      biasConstraint: me(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class oi extends fd {
  constructor(t, e) {
    super(t, e), this.kernel = null, oi.verifyArgs(e), this.filters = e.filters, we(this.filters, "filters"), this.kernelInitializer = Qt(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = ge(e.kernelConstraint), this.kernelRegularizer = jt(e.kernelRegularizer);
  }
  build(t) {
    t = Et(t);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new L(`The channel dimension of the input should be defined. Found ${t[e]}`);
    const s = t[e], o = this.kernelSize.concat([s, this.filters]);
    this.kernel = this.addWeight("kernel", o, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [e]: s } }], this.built = !0;
  }
  call(t, e) {
    return z(() => {
      t = mt(t);
      let s;
      const o = this.bias == null ? null : this.bias.read(), r = $y(this.activation.getClassName());
      if (r != null && this.rank === 2)
        s = G0(t, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate, r);
      else {
        if (this.rank === 1)
          s = qD(t, this.kernel.read(), o, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          s = G0(t, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          s = tM(t, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new xt("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (s = this.activation.apply(s));
      }
      return s;
    });
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = [], s = this.dataFormat === "channelsLast" ? t.slice(1, t.length - 1) : t.slice(2);
    for (let r = 0; r < s.length; ++r) {
      const i = Jn(s[r], this.kernelSize[r], this.padding, this.strides[r], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[r]);
      e.push(i);
    }
    let o = [t[0]];
    return this.dataFormat === "channelsLast" ? (o = o.concat(e), o.push(this.filters)) : (o.push(this.filters), o = o.concat(e)), o;
  }
  getConfig() {
    const t = {
      filters: this.filters,
      kernelInitializer: te(this.kernelInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      kernelConstraint: me(this.kernelConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  static verifyArgs(t) {
    if (!("filters" in t) || typeof t.filters != "number" || t.filters < 1)
      throw new L(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`);
  }
}
class Il extends oi {
  constructor(t) {
    super(2, t), Il.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !Zm(t.kernelSize, "number", 1, 2))
      throw new L(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
Il.className = "Conv2D";
H(Il);
class Cl extends oi {
  constructor(t) {
    super(3, t), Cl.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !(Array.isArray(t.kernelSize) && (t.kernelSize.length === 1 || t.kernelSize.length === 3)))
      throw new L(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
Cl.className = "Conv3D";
H(Cl);
class Lw extends Il {
  constructor(t) {
    if (super(t), this.inputSpec = [new fe({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new L(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = Et(t), t.length !== 4)
      throw new L("Input should have rank 4; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new L("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], o = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", o, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new fe({ ndim: 4, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return z(() => {
      let s = mt(t);
      if (s.shape.length !== 4)
        throw new L(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const o = s.shape, r = o[0];
      let i, a;
      this.dataFormat === "channelsFirst" ? (i = 2, a = 3) : (i = 1, a = 2);
      const l = o[i], c = o[a], u = this.kernelSize[0], d = this.kernelSize[1], h = this.strides[0], p = this.strides[1], f = cs(l, h, u, this.padding), m = cs(c, p, d, this.padding), g = [r, f, m, this.filters];
      this.dataFormat !== "channelsLast" && (s = St(s, [0, 2, 3, 1]));
      let b = r1(s, this.kernel.read(), g, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (b = St(b, [0, 3, 1, 2])), this.bias != null && (b = ss(b, this.bias.read(), this.dataFormat)), this.activation != null && (b = this.activation.apply(b)), b;
    });
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = t.slice();
    let s, o, r;
    this.dataFormat === "channelsFirst" ? (s = 1, o = 2, r = 3) : (s = 3, o = 1, r = 2);
    const i = this.kernelSize[0], a = this.kernelSize[1], l = this.strides[0], c = this.strides[1];
    return e[s] = this.filters, e[o] = cs(e[o], l, i, this.padding), e[r] = cs(e[r], c, a, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
Lw.className = "Conv2DTranspose";
H(Lw);
class Dw extends Cl {
  constructor(t) {
    if (super(t), this.inputSpec = [new fe({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new L(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = Et(t), t.length !== 5)
      throw new L("Input should have rank 5; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new L("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], o = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", o, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new fe({ ndim: 5, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return z(() => {
      let s = mt(t);
      if (s.shape.length !== 5)
        throw new L(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const o = s.shape, r = o[0];
      let i, a, l;
      this.dataFormat === "channelsFirst" ? (l = 2, i = 3, a = 4) : (l = 1, i = 2, a = 3);
      const c = o[l], u = o[i], d = o[a], h = this.kernelSize[0], p = this.kernelSize[1], f = this.kernelSize[2], m = this.strides[0], g = this.strides[1], b = this.strides[2], x = cs(c, m, h, this.padding), w = cs(u, g, p, this.padding), y = cs(d, b, f, this.padding), I = [r, x, w, y, this.filters];
      this.dataFormat !== "channelsLast" && (s = St(s, [0, 2, 3, 4, 1]));
      let C = IT(s, this.kernel.read(), I, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (C = St(C, [0, 4, 1, 2, 3])), this.bias !== null && (C = ss(C, this.bias.read(), this.dataFormat)), this.activation !== null && (C = this.activation.apply(C)), C;
    });
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = t.slice();
    let s, o, r, i;
    this.dataFormat === "channelsFirst" ? (s = 1, o = 2, r = 3, i = 4) : (s = 4, o = 1, r = 2, i = 3);
    const a = this.kernelSize[0], l = this.kernelSize[1], c = this.kernelSize[2], u = this.strides[0], d = this.strides[1], h = this.strides[2];
    return e[s] = this.filters, e[o] = cs(e[o], u, a, this.padding), e[r] = cs(e[r], d, l, this.padding), e[i] = cs(e[i], h, c, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
Dw.className = "Conv3DTranspose";
H(Dw);
class Mw extends oi {
  constructor(t, e) {
    if (super(t, e), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, e.filters == null)
      throw new L("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (e.kernelInitializer != null || e.kernelRegularizer != null || e.kernelConstraint != null)
      throw new L("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (e.padding != null && e.padding !== "same" && e.padding !== "valid")
      throw new L(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);
    this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = Qt(e.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = jt(e.depthwiseRegularizer), this.depthwiseConstraint = ge(e.depthwiseConstraint), this.pointwiseInitializer = Qt(e.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = jt(e.pointwiseRegularizer), this.pointwiseConstraint = ge(e.pointwiseConstraint);
  }
  build(t) {
    if (t = Et(t), t.length < this.rank + 2)
      throw new L(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(t)}`);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null || t[e] < 0)
      throw new L(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);
    const s = t[e], o = this.kernelSize.concat([s, this.depthMultiplier]), r = [];
    for (let a = 0; a < this.rank; ++a)
      r.push(1);
    r.push(s * this.depthMultiplier, this.filters);
    const i = !0;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", o, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, i, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", r, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, i, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, i, this.biasConstraint) : this.bias = null, this.inputSpec = [new fe({ ndim: this.rank + 2, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return z(() => {
      t = mt(t);
      let s;
      if (this.rank === 1)
        throw new xt("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (t = St(t, [0, 2, 3, 1])), s = I1(t, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (s = ss(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), this.dataFormat === "channelsFirst" && (s = St(s, [0, 3, 1, 2])), s;
    });
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = te(this.depthwiseInitializer), t.pointwiseInitializer = te(this.pointwiseInitializer), t.depthwiseRegularizer = Vt(this.depthwiseRegularizer), t.pointwiseRegularizer = Vt(this.pointwiseRegularizer), t.depthwiseConstraint = me(this.depthwiseConstraint), t.pointwiseConstraint = me(this.pointwiseConstraint), t;
  }
}
Mw.className = "SeparableConv";
class zw extends Mw {
  constructor(t) {
    super(2, t);
  }
}
zw.className = "SeparableConv2D";
H(zw);
class md extends oi {
  constructor(t) {
    super(1, t), md.verifyArgs(t), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.dataFormat, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !Zm(t.kernelSize, "number", 1, 1))
      throw new L(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
md.className = "Conv1D";
H(md);
class Fw extends kt {
  constructor(t) {
    super(t), typeof t.cropping == "number" ? this.cropping = [[t.cropping, t.cropping], [t.cropping, t.cropping]] : typeof t.cropping[0] == "number" ? this.cropping = [
      [t.cropping[0], t.cropping[0]],
      [t.cropping[1], t.cropping[1]]
    ] : this.cropping = t.cropping, this.dataFormat = t.dataFormat === void 0 ? "channelsLast" : t.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(t) {
    return this.dataFormat === "channelsFirst" ? [
      t[0],
      t[1],
      t[2] - this.cropping[0][0] - this.cropping[0][1],
      t[3] - this.cropping[1][0] - this.cropping[1][1]
    ] : [
      t[0],
      t[1] - this.cropping[0][0] - this.cropping[0][1],
      t[2] - this.cropping[1][0] - this.cropping[1][1],
      t[3]
    ];
  }
  call(t, e) {
    return z(() => {
      if (t = mt(t), this.dataFormat === "channelsLast") {
        const s = _l(t, this.cropping[0][0], t.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return _l(s, this.cropping[1][0], t.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const s = _l(t, this.cropping[0][0], t.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return _l(s, this.cropping[1][0], t.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const t = { cropping: this.cropping, dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Fw.className = "Cropping2D";
H(Fw);
class Ww extends kt {
  constructor(t) {
    super(t), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = t.size == null ? this.DEFAULT_SIZE : t.size, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, ue(this.dataFormat), this.interpolation = t.interpolation == null ? "nearest" : t.interpolation, LL(this.interpolation);
  }
  computeOutputShape(t) {
    if (this.dataFormat === "channelsFirst") {
      const e = t[2] == null ? null : this.size[0] * t[2], s = t[3] == null ? null : this.size[1] * t[3];
      return [t[0], t[1], e, s];
    } else {
      const e = t[1] == null ? null : this.size[0] * t[1], s = t[2] == null ? null : this.size[1] * t[2];
      return [t[0], e, s, t[3]];
    }
  }
  call(t, e) {
    return z(() => {
      let s = mt(t);
      const o = s.shape;
      if (this.dataFormat === "channelsFirst") {
        s = St(s, [0, 2, 3, 1]);
        const r = this.size[0] * o[2], i = this.size[1] * o[3], a = this.interpolation === "nearest" ? Mo.resizeNearestNeighbor(s, [r, i]) : Mo.resizeBilinear(s, [r, i]);
        return St(a, [0, 3, 1, 2]);
      } else {
        const r = this.size[0] * o[1], i = this.size[1] * o[2];
        return this.interpolation === "nearest" ? Mo.resizeNearestNeighbor(s, [r, i]) : Mo.resizeBilinear(s, [r, i]);
      }
    });
  }
  getConfig() {
    const t = {
      size: this.size,
      dataFormat: this.dataFormat,
      interpolation: this.interpolation
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Ww.className = "UpSampling2D";
H(Ww);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function eM(n, t, e = [1, 1], s = "valid", o, r) {
  return z(() => {
    o == null && (o = ts()), ue(o);
    let i = rg(n, o);
    if (n.rank !== 4)
      throw new L(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);
    if (t.rank !== 4)
      throw new L(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);
    return i = Xf(i, t, e, s === "same" ? "same" : "valid", "NHWC", r), o === "channelsFirst" && (i = St(i, [0, 3, 1, 2])), i;
  });
}
class Vw extends fd {
  constructor(t) {
    super(2, t), this.depthwiseKernel = null, this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = Qt(t.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = ge(t.depthwiseConstraint), this.depthwiseRegularizer = jt(t.depthwiseRegularizer);
  }
  build(t) {
    if (t = Et(t), t.length < 4)
      throw new L(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);
    const e = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (t[e] == null || t[e] < 0)
      throw new L(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);
    const s = t[e], o = [
      this.kernelSize[0],
      this.kernelSize[1],
      s,
      this.depthMultiplier
    ];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", o, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [s * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return z(() => {
      t = mt(t);
      let s = eM(t, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (s = ss(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), s;
    });
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], o = this.dataFormat === "channelsFirst" ? t[1] * this.depthMultiplier : t[3] * this.depthMultiplier, r = Jn(e, this.kernelSize[0], this.padding, this.strides[0]), i = Jn(s, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [t[0], o, r, i] : [t[0], r, i, o];
  }
  getConfig() {
    const t = super.getConfig();
    return t.depthMultiplier = this.depthMultiplier, t.depthwiseInitializer = te(this.depthwiseInitializer), t.depthwiseRegularizer = Vt(this.depthwiseRegularizer), t.depthwiseConstraint = me(this.depthwiseRegularizer), t;
  }
}
Vw.className = "DepthwiseConv2D";
H(Vw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function _w(n, t, e, s) {
  if (Array.isArray(n)) {
    if (t != null || e != null)
      throw new L("When inputs is an array, neither initialState or constants should be provided");
    s != null && (e = n.slice(n.length - s, n.length), n = n.slice(0, n.length - s)), n.length > 1 && (t = n.slice(1, n.length)), n = n[0];
  }
  function o(r) {
    return r == null || Array.isArray(r) ? r : [r];
  }
  return t = o(t), e = o(e), { inputs: n, initialState: t, constants: e };
}
function Aw(n, t, e, s = !1, o, r, i = !1, a = !1) {
  return z(() => {
    const l = t.shape.length;
    if (l < 3)
      throw new L(`Input should be at least 3D, but is ${l}D.`);
    const c = [1, 0].concat(qn(2, l));
    if (t = St(t, c), r != null)
      throw new xt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), o != null && (o = et(et(o, "bool"), "float32"), o.rank === l - 1 && (o = tn(o, -1)), o = St(o, c)), s && (t = jo(t, 0), o != null && (o = jo(o, 0)));
    const u = [];
    let d, h = e;
    const p = t.shape[0], f = Jo(t);
    let m;
    o != null && (m = Jo(o));
    for (let b = 0; b < p; ++b) {
      const x = f[b], w = z(() => n(x, h));
      if (o == null)
        d = w[0], h = w[1];
      else {
        const y = z(() => {
          const I = m[b], C = lt(Vn(I), I), v = U(G(w[0], I), G(h[0], C)), S = h.map((N, R) => U(G(w[1][R], I), G(N, C)));
          return { output: v, newStates: S };
        });
        d = y.output, h = y.newStates;
      }
      a && u.push(d);
    }
    let g;
    return a && (g = ys(u, 1)), [d, g, h];
  });
}
class wo extends kt {
  constructor(t) {
    super(t);
    let e;
    if (t.cell == null)
      throw new L("cell property is missing for the constructor of RNN.");
    if (Array.isArray(t.cell) ? e = new lg({ cells: t.cell }) : e = t.cell, e.stateSize == null)
      throw new L("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = e, this.returnSequences = t.returnSequences == null ? !1 : t.returnSequences, this.returnState = t.returnState == null ? !1 : t.returnState, this.goBackwards = t.goBackwards == null ? !1 : t.goBackwards, this._stateful = t.stateful == null ? !1 : t.stateful, this.unroll = t.unroll == null ? !1 : t.unroll, this.supportsMasking = !0, this.inputSpec = [new fe({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  // Porting Note: This is the equivalent of `RNN.states` property getter in
  //   PyKeras.
  getStates() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return qn(0, t).map((e) => null);
    } else
      return this.states_;
  }
  // Porting Note: This is the equivalent of the `RNN.states` property setter in
  //   PyKeras.
  setStates(t) {
    this.states_ = t;
  }
  computeOutputShape(t) {
    ap(t) && (t = t[0]), t = t;
    let e = this.cell.stateSize;
    Array.isArray(e) || (e = [e]);
    const s = e[0];
    let o;
    if (this.returnSequences ? o = [t[0], t[1], s] : o = [t[0], s], this.returnState) {
      const r = [];
      for (const i of e)
        r.push([t[0], i]);
      return [o].concat(r);
    } else
      return o;
  }
  computeMask(t, e) {
    return z(() => {
      Array.isArray(e) && (e = e[0]);
      const s = this.returnSequences ? e : null;
      if (this.returnState) {
        const o = this.states.map((r) => null);
        return [s].concat(o);
      } else
        return s;
    });
  }
  /**
   * Get the current state tensors of the RNN.
   *
   * If the state hasn't been set, return an array of `null`s of the correct
   * length.
   */
  get states() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, e = [];
      for (let s = 0; s < t; ++s)
        e.push(null);
      return e;
    } else
      return this.states_;
  }
  set states(t) {
    this.states_ = t;
  }
  build(t) {
    if (this.numConstants != null)
      throw new xt("Constants support is not implemented in RNN yet.");
    ap(t) && (t = t[0]), t = t;
    const e = this.stateful ? t[0] : null, s = t.slice(2);
    this.inputSpec[0] = new fe({ shape: [e, null, ...s] });
    const o = [t[0]].concat(t.slice(2));
    this.cell.build(o);
    let r;
    if (Array.isArray(this.cell.stateSize) ? r = this.cell.stateSize : r = [this.cell.stateSize], this.stateSpec != null) {
      if (!$t(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), r))
        throw new L(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = r.map((i) => new fe({ shape: [null, i] }));
    this.stateful && this.resetStates();
  }
  /**
   * Reset the state tensors of the RNN.
   *
   * If the `states` argument is `undefined` or `null`, will set the
   * state tensor(s) of the RNN to all-zero tensors of the appropriate
   * shape(s).
   *
   * If `states` is provided, will set the state tensors of the RNN to its
   * value.
   *
   * @param states Optional externally-provided initial states.
   * @param training Whether this call is done during training. For stateful
   *   RNNs, this affects whether the old states are kept or discarded. In
   *   particular, if `training` is `true`, the old states will be kept so
   *   that subsequent backpropgataion through time (BPTT) may work properly.
   *   Else, the old states will be discarded.
   */
  resetStates(t, e = !1) {
    z(() => {
      if (!this.stateful)
        throw new as("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape[0];
      if (s == null)
        throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((o) => ye([s, o])) : this.states_ = [ye([s, this.cell.stateSize])];
      else if (t == null)
        yt(this.states_), this.keptStates != null && (yt(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((o) => ye([s, o])) : this.states_[0] = ye([s, this.cell.stateSize]);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e === !0 ? this.keptStates.push(this.states_.slice()) : yt(this.states_);
        for (let o = 0; o < this.states_.length; ++o) {
          const r = t[o], i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[o] : this.cell.stateSize, a = [s, i];
          if (!$t(r.shape, a))
            throw new L(`State ${o} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);
          this.states_[o] = r;
        }
      }
      this.states_ = this.states_.map((o) => xn(o.clone()));
    });
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, o = e == null ? null : e.constants;
    e == null && (e = {});
    const r = _w(t, s, o, this.numConstants);
    t = r.inputs, s = r.initialState, o = r.constants;
    let i = [], a = [];
    if (s != null) {
      e.initialState = s, i = i.concat(s), this.stateSpec = [];
      for (const c of s)
        this.stateSpec.push(new fe({ shape: c.shape }));
      a = a.concat(this.stateSpec);
    }
    if (o != null && (e.constants = o, i = i.concat(o), this.numConstants = o.length), i[0] instanceof ds) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), d = this.inputSpec;
      this.inputSpec = u;
      const h = super.apply(c, e);
      return this.inputSpec = d, h;
    } else
      return super.apply(t, e);
  }
  // tslint:disable-next-line:no-any
  call(t, e) {
    return z(() => {
      const s = e == null ? null : e.mask, o = e == null ? null : e.training;
      let r = e == null ? null : e.initialState;
      t = mt(t), r == null && (this.stateful ? r = this.states_ : r = this.getInitialState(t));
      const i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (r.length !== i)
        throw new L(`RNN Layer has ${i} state(s) but was passed ${r.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const a = { training: o }, c = Aw((f, m) => {
        const g = this.cell.call([f].concat(m), a);
        return [g[0], g.slice(1)];
      }, t, r, this.goBackwards, s, null, this.unroll, this.returnSequences), u = c[0], d = c[1], h = c[2];
      this.stateful && this.resetStates(h, o);
      const p = this.returnSequences ? d : u;
      return this.returnState ? [p].concat(h) : p;
    });
  }
  getInitialState(t) {
    return z(() => {
      let e = ye(t.shape);
      return e = at(e, [1, 2]), e = gl(e), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((s) => s > 1 ? rp(e, [1, s]) : e) : this.cell.stateSize > 1 ? [rp(e, [1, this.cell.stateSize])] : [e];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.cell != null && this.cell.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = super.getConfig(), e = {
      returnSequences: this.returnSequences,
      returnState: this.returnState,
      goBackwards: this.goBackwards,
      stateful: this.stateful,
      unroll: this.unroll
    };
    this.numConstants != null && (e.numConstants = this.numConstants);
    const s = this.cell.getConfig();
    return this.getClassName() === wo.className && (e.cell = {
      className: this.cell.getClassName(),
      config: s
    }), Object.assign(Object.assign(Object.assign({}, s), t), e);
  }
  /** @nocollapse */
  static fromConfig(t, e, s = {}) {
    const o = e.cell, r = jn(o, s);
    return new t(Object.assign(e, { cell: r }));
  }
}
wo.className = "RNN";
H(wo);
class gd extends kt {
}
class ig extends gd {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, we(this.units, "units"), this.activation = uo(t.activation == null ? this.DEFAULT_ACTIVATION : t.activation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Qt(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = jt(t.kernelRegularizer), this.recurrentRegularizer = jt(t.recurrentRegularizer), this.biasRegularizer = jt(t.biasRegularizer), this.kernelConstraint = ge(t.kernelConstraint), this.recurrentConstraint = ge(t.recurrentConstraint), this.biasConstraint = ge(t.biasConstraint), this.dropout = _r([1, lo([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = _r([
      1,
      lo([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = Et(t), this.kernel = this.addWeight("kernel", [t[t.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
  //   `inputs` and `states`. Here, the two tensors are combined into an
  //   `Tensor[]` Array as the first input argument.
  //   Similarly, PyKeras' equivalent of this method returns two values:
  //    `output` and `[output]`. Here the two are combined into one length-2
  //    `Tensor[]`, consisting of `output` repeated.
  call(t, e) {
    return z(() => {
      if (t = t, t.length !== 2)
        throw new L(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);
      let s = t[1];
      t = t[0];
      const o = e.training == null ? !1 : e.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = ho({
        ones: () => Vn(t),
        rate: this.dropout,
        training: o,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = ho({
        ones: () => Vn(s),
        rate: this.recurrentDropout,
        training: o,
        dropoutFunc: this.dropoutFunc
      }));
      let r;
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      i != null ? r = ms(G(t, i), this.kernel.read()) : r = ms(t, this.kernel.read()), this.bias != null && (r = ss(r, this.bias.read())), a != null && (s = G(s, a));
      let l = U(r, ms(s, this.recurrentKernel.read()));
      return this.activation != null && (l = this.activation.apply(l)), [l, l];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: co(this.activation),
      useBias: this.useBias,
      kernelInitializer: te(this.kernelInitializer),
      recurrentInitializer: te(this.recurrentInitializer),
      biasInitializer: te(this.biasInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      recurrentRegularizer: Vt(this.recurrentRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: me(this.kernelConstraint),
      recurrentConstraint: me(this.recurrentConstraint),
      biasConstraint: me(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout
    };
    return Object.assign(Object.assign({}, t), e);
  }
}
ig.className = "SimpleRNNCell";
H(ig);
class Ow extends wo {
  constructor(t) {
    t.cell = new ig(t), super(t);
  }
  call(t, e) {
    return z(() => {
      this.cell.dropoutMask != null && (yt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (yt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e);
  }
}
Ow.className = "SimpleRNN";
H(Ow);
class ag extends gd {
  constructor(t) {
    if (super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.resetAfter)
      throw new L("GRUCell does not support reset_after parameter set to true.");
    this.units = t.units, we(this.units, "units"), this.activation = uo(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = uo(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Qt(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = jt(t.kernelRegularizer), this.recurrentRegularizer = jt(t.recurrentRegularizer), this.biasRegularizer = jt(t.biasRegularizer), this.kernelConstraint = ge(t.kernelConstraint), this.recurrentConstraint = ge(t.recurrentConstraint), this.biasConstraint = ge(t.biasConstraint), this.dropout = _r([1, lo([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = _r([
      1,
      lo([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = Et(t);
    const e = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [e, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return z(() => {
      if (t = t, t.length !== 2)
        throw new L(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training == null ? !1 : e.training;
      let o = t[1];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = ho({
        ones: () => Vn(t),
        rate: this.dropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = ho({
        ones: () => Vn(o),
        rate: this.recurrentDropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      }));
      const r = this.dropoutMask, i = this.recurrentDropoutMask;
      let a, l, c;
      0 < this.dropout && this.dropout < 1 && (t = G(t, r[0]));
      let u = ms(t, this.kernel.read());
      this.useBias && (u = ss(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (o = G(o, i[0]));
      const d = this.recurrentKernel.read(), [h, p] = yn(d, [2 * this.units, this.units], d.rank - 1), f = ms(o, h), [m, g, b] = yn(u, 3, u.rank - 1), [x, w] = yn(f, 2, f.rank - 1);
      a = this.recurrentActivation.apply(U(m, x)), l = this.recurrentActivation.apply(U(g, w));
      const y = ms(G(l, o), p);
      c = this.activation.apply(U(b, y));
      const I = U(G(a, o), G(U(1, ee(a)), c));
      return [I, I];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: co(this.activation),
      recurrentActivation: co(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: te(this.kernelInitializer),
      recurrentInitializer: te(this.recurrentInitializer),
      biasInitializer: te(this.biasInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      recurrentRegularizer: Vt(this.recurrentRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: me(this.kernelConstraint),
      recurrentConstraint: me(this.recurrentConstraint),
      biasConstraint: me(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation,
      resetAfter: !1
    };
    return Object.assign(Object.assign({}, t), e);
  }
}
ag.className = "GRUCell";
H(ag);
class Xw extends wo {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new ag(t), super(t);
  }
  call(t, e) {
    return z(() => {
      this.cell.dropoutMask != null && (yt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (yt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
Xw.className = "GRU";
H(Xw);
class bd extends gd {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, we(this.units, "units"), this.activation = uo(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = uo(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = Qt(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = t.unitForgetBias, this.kernelRegularizer = jt(t.kernelRegularizer), this.recurrentRegularizer = jt(t.recurrentRegularizer), this.biasRegularizer = jt(t.biasRegularizer), this.kernelConstraint = ge(t.kernelConstraint), this.recurrentConstraint = ge(t.recurrentConstraint), this.biasConstraint = ge(t.biasConstraint), this.dropout = _r([1, lo([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = _r([
      1,
      lo([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    var e;
    t = Et(t);
    const s = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [s, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint);
    let o;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const r = this.biasInitializer, i = this.units;
        o = new (e = class extends On {
          apply(l, c) {
            const u = r.apply([i]), d = new Bm().apply([i]), h = r.apply([i * 2]);
            return f0(f0(u, d), h);
          }
        }, /** @nocollapse */
        e.className = "CustomInit", e)();
      } else
        o = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, o, this.biasRegularizer, !0, this.biasConstraint);
    } else
      this.bias = null;
    this.built = !0;
  }
  call(t, e) {
    return z(() => {
      const s = e.training == null ? !1 : e.training;
      if (t = t, t.length !== 3)
        throw new L(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      let o = t[1];
      const r = t[2];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = ho({
        ones: () => Vn(t),
        rate: this.dropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = ho({
        ones: () => Vn(o),
        rate: this.recurrentDropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      }));
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      let l, c, u, d;
      0 < this.dropout && this.dropout < 1 && (t = G(t, i[0]));
      let h = ms(t, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (o = G(o, a[0])), h = U(h, ms(o, this.recurrentKernel.read())), this.useBias && (h = ss(h, this.bias.read()));
      const [p, f, m, g] = yn(h, 4, h.rank - 1);
      l = this.recurrentActivation.apply(p), c = this.recurrentActivation.apply(f), u = U(G(c, r), G(l, this.activation.apply(m))), d = this.recurrentActivation.apply(g);
      const b = G(d, this.activation.apply(u));
      return [b, b, u];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: co(this.activation),
      recurrentActivation: co(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: te(this.kernelInitializer),
      recurrentInitializer: te(this.recurrentInitializer),
      biasInitializer: te(this.biasInitializer),
      unitForgetBias: this.unitForgetBias,
      kernelRegularizer: Vt(this.kernelRegularizer),
      recurrentRegularizer: Vt(this.recurrentRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: me(this.kernelConstraint),
      recurrentConstraint: me(this.recurrentConstraint),
      biasConstraint: me(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation
    };
    return Object.assign(Object.assign({}, t), e);
  }
}
bd.className = "LSTMCell";
H(bd);
class Pw extends wo {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new bd(t), super(t);
  }
  call(t, e) {
    return z(() => {
      this.cell.dropoutMask != null && (yt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (yt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
Pw.className = "LSTM";
H(Pw);
class lg extends gd {
  constructor(t) {
    super(t), this.cells = t.cells;
  }
  get stateSize() {
    const t = [];
    for (const e of this.cells.slice().reverse())
      Array.isArray(e.stateSize) ? t.push(...e.stateSize) : t.push(e.stateSize);
    return t;
  }
  call(t, e) {
    return z(() => {
      t = t;
      let s = t.slice(1);
      const o = [];
      for (const a of this.cells.slice().reverse())
        Array.isArray(a.stateSize) ? o.push(s.splice(0, a.stateSize.length)) : o.push(s.splice(0, 1));
      o.reverse();
      const r = [];
      let i;
      for (let a = 0; a < this.cells.length; ++a) {
        const l = this.cells[a];
        s = o[a], a === 0 ? i = [t[0]].concat(s) : i = [i[0]].concat(s), i = l.call(i, e), r.push(i.slice(1));
      }
      s = [];
      for (const a of r.slice().reverse())
        s.push(...a);
      return [i[0]].concat(s);
    });
  }
  build(t) {
    ap(t) && (t = t[0]), t = t;
    let e;
    this.cells.forEach((s, o) => {
      Ao(`RNNCell_${o}`, () => {
        s.build(t), Array.isArray(s.stateSize) ? e = s.stateSize[0] : e = s.stateSize, t = [t[0], e];
      });
    }), this.built = !0;
  }
  getConfig() {
    const t = super.getConfig(), e = (r) => ({
      className: r.getClassName(),
      config: r.getConfig()
    }), o = { cells: this.cells.map(e) };
    return Object.assign(Object.assign({}, t), o);
  }
  /** @nocollapse */
  static fromConfig(t, e, s = {}) {
    const o = [];
    for (const r of e.cells)
      o.push(jn(r, s));
    return new t({ cells: o });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    const t = [];
    for (const e of this.cells)
      t.push(...e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.cells)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  /**
   * Retrieve the weights of a the model.
   *
   * @returns A flat `Array` of `tf.Tensor`s.
   */
  getWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.weights);
    return lp(t);
  }
  /**
   * Set the weights of the model.
   *
   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
   *     the output of `getWeights()`.
   */
  setWeights(t) {
    const e = [];
    for (const s of this.cells) {
      const o = s.weights.length, r = t.splice(o);
      for (let i = 0; i < s.weights.length; ++i)
        e.push([s.weights[i], r[i]]);
    }
    qm(e);
  }
}
lg.className = "StackedRNNCells";
H(lg);
function ho(n) {
  const { ones: t, rate: e, training: s = !1, count: o = 1, dropoutFunc: r } = n, i = () => r != null ? r(t(), e) : Fy(t(), e), a = () => xl(i, t, s);
  return !o || o <= 1 ? xn(a().clone()) : Array(o).fill(void 0).map(a).map((c) => xn(c.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var nM = globalThis && globalThis.__rest || function(n, t) {
  var e = {};
  for (var s in n)
    Object.prototype.hasOwnProperty.call(n, s) && t.indexOf(s) < 0 && (e[s] = n[s]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, s = Object.getOwnPropertySymbols(n); o < s.length; o++)
      t.indexOf(s[o]) < 0 && Object.prototype.propertyIsEnumerable.call(n, s[o]) && (e[s[o]] = n[s[o]]);
  return e;
};
class Zw extends wo {
  constructor(t) {
    if (t.unroll)
      throw new xt("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(t.cell))
      throw new xt("It is not possible at the moment to stack convolutional cells.");
    super(t), this.inputSpec = [new fe({ ndim: 5 })];
  }
  call(t, e) {
    return z(() => {
      if (this.cell.dropoutMask != null && (yt(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (yt(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), e && e.constants)
        throw new L("ConvRNN2D cell does not support constants");
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  computeOutputShape(t) {
    let e = this.computeSingleOutputShape(t);
    return this.returnSequences || (e = [e[0], ...e.slice(2)]), this.returnState && (e = [e, ...Array(2).fill([t[0], ...e.slice(-3)])]), e;
  }
  getInitialState(t) {
    return z(() => {
      const { stateSize: e } = this.cell, s = t.shape, o = this.computeSingleOutputShape(s), r = [o[0], ...o.slice(2)], i = ye(r);
      return Array.isArray(e) ? Array(e.length).fill(i) : [i];
    });
  }
  resetStates(t, e = !1) {
    z(() => {
      if (!this.stateful)
        throw new as("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape, o = this.computeSingleOutputShape(s), r = [o[0], ...o.slice(2)];
      if (s[0] == null)
        throw new L("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ye(r)) : this.states_ = [ye(r)];
      else if (t == null)
        yt(this.states_), this.keptStates != null && (yt(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => ye(r)) : this.states_[0] = ye(r);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new L(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e ? this.keptStates.push(this.states_.slice()) : yt(this.states_);
        for (let a = 0; a < this.states_.length; ++a) {
          const l = t[a], c = r;
          if (!$t(l.shape, c))
            throw new L(`State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`);
          this.states_[a] = l;
        }
      }
      this.states_ = this.states_.map((a) => xn(a.clone()));
    });
  }
  computeSingleOutputShape(t) {
    const { dataFormat: e, filters: s, kernelSize: o, padding: r, strides: i, dilationRate: a } = this.cell, l = e === "channelsFirst", c = t[l ? 3 : 2], u = t[l ? 4 : 3], d = Jn(c, o[0], r, i[0], a[0]), h = Jn(u, o[1], r, i[1], a[1]);
    return [
      ...t.slice(0, 2),
      ...l ? [s, d, h] : [d, h, s]
    ];
  }
}
Zw.className = "ConvRNN2D";
class cg extends bd {
  constructor(t) {
    const { filters: e, kernelSize: s, strides: o, padding: r, dataFormat: i, dilationRate: a } = t;
    super(Object.assign(Object.assign({}, t), { units: e })), this.filters = e, we(this.filters, "filters"), this.kernelSize = Lr(s, 2, "kernelSize"), this.kernelSize.forEach((l) => we(l, "kernelSize")), this.strides = Lr(o || 1, 2, "strides"), this.strides.forEach((l) => we(l, "strides")), this.padding = r || "valid", vn(this.padding), this.dataFormat = i || "channelsLast", ue(this.dataFormat), this.dilationRate = Lr(a || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => we(l, "dilationRate"));
  }
  build(t) {
    var e;
    t = Et(t);
    const s = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[s] == null)
      throw new L(`The channel dimension of the input should be defined. Found ${t[s]}`);
    const o = t[s], r = 4, i = this.kernelSize.concat([o, this.filters * r]);
    this.kernel = this.addWeight("kernel", i, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint);
    const a = this.kernelSize.concat([this.filters, this.filters * r]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", a, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      let l;
      if (this.unitForgetBias) {
        const c = this.biasInitializer, u = this.filters;
        l = new (e = class extends On {
          apply(h, p) {
            const f = c.apply([u]), m = xo([u]), g = c.apply([u * 2]);
            return Km([f, m, g]);
          }
        }, /** @nocollapse */
        e.className = "CustomInit", e)();
      } else
        l = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * r], null, l, this.biasRegularizer, !0, this.biasConstraint);
    }
    this.built = !0;
  }
  call(t, e) {
    return z(() => {
      if (t.length !== 3)
        throw new L(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training || !1, o = t[0], r = t[1], i = t[2], a = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = ho({
        ones: () => Vn(o),
        rate: this.dropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const l = this.dropoutMask, c = (Y, Q, J) => !Q || !Q[J] ? Y : G(Q[J], Y);
      let u = c(o, l, 0), d = c(o, l, 1), h = c(o, l, 2), p = c(o, l, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = ho({
        ones: () => Vn(r),
        rate: this.recurrentDropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const f = this.recurrentDropoutMask;
      let m = c(r, f, 0), g = c(r, f, 1), b = c(r, f, 2), x = c(r, f, 3);
      const w = 3, [y, I, C, v] = yn(this.kernel.read(), a, w), [S, N, R, $] = this.useBias ? yn(this.bias.read(), a) : [null, null, null, null];
      u = this.inputConv(u, y, S, this.padding), d = this.inputConv(d, I, N, this.padding), h = this.inputConv(h, C, R, this.padding), p = this.inputConv(p, v, $, this.padding);
      const [F, W, _, A] = yn(this.recurrentKernel.read(), a, w);
      m = this.recurrentConv(m, F), g = this.recurrentConv(g, W), b = this.recurrentConv(b, _), x = this.recurrentConv(x, A);
      const O = this.recurrentActivation.apply(U(u, m)), K = this.recurrentActivation.apply(U(d, g)), Z = U(G(K, i), G(O, this.activation.apply(U(h, b)))), B = G(this.recurrentActivation.apply(U(p, x)), this.activation.apply(Z));
      return [B, B, Z];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = nM(t, ["units"]), s = {
      filters: this.filters,
      kernelSize: this.kernelSize,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      strides: this.strides
    };
    return Object.assign(Object.assign({}, e), s);
  }
  inputConv(t, e, s, o) {
    const r = Uo(t, e, this.strides, o || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return s ? ss(r, s, this.dataFormat) : r;
  }
  recurrentConv(t, e) {
    return Uo(t, e, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
cg.className = "ConvLSTM2DCell";
H(cg);
class Kw extends Zw {
  constructor(t) {
    const e = new cg(t);
    super(Object.assign(Object.assign({}, t), { cell: e }));
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e);
  }
}
Kw.className = "ConvLSTM2D";
H(Kw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ug extends kt {
  constructor(t) {
    super(t), this.rate = Math.max(Math.min(t.rate, 1), 0), this.noiseShape = t.noiseShape, this.seed = t.seed, this.supportsMasking = !0;
  }
  getNoiseShape(t) {
    if (this.noiseShape == null)
      return this.noiseShape;
    const e = t.shape, s = [];
    for (let o = 0; o < this.noiseShape.length; ++o)
      s.push(this.noiseShape[o] == null ? e[o] : this.noiseShape[o]);
    return s;
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      const s = mt(t);
      if (0 < this.rate && this.rate < 1) {
        const o = e.training == null ? !1 : e.training, r = this.getNoiseShape(s);
        return xl(() => Fy(s, this.rate, r, this.seed), () => s, o);
      }
      return t;
    });
  }
  getConfig() {
    const t = {
      rate: this.rate,
      noiseShape: this.noiseShape,
      seed: this.seed
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  dispose() {
    return super.dispose();
  }
}
ug.className = "Dropout";
H(ug);
class Bw extends ug {
  constructor(t) {
    super(t), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(t) {
    const e = t.shape;
    return [e[0], 1, e[2]];
  }
}
Bw.className = "SpatialDropout1D";
H(Bw);
class Hw extends kt {
  constructor(t) {
    if (super(t), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.batchInputShape == null && t.inputShape == null && t.inputDim != null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), this.batchInputShape = [e, t.inputDim];
    }
    this.units = t.units, we(this.units, "units"), this.activation = uo(t.activation), t.useBias != null && (this.useBias = t.useBias), this.kernelInitializer = Qt(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = Qt(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = ge(t.kernelConstraint), this.biasConstraint = ge(t.biasConstraint), this.kernelRegularizer = jt(t.kernelRegularizer), this.biasRegularizer = jt(t.biasRegularizer), this.activityRegularizer = jt(t.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }];
  }
  build(t) {
    t = Et(t);
    const e = t[t.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [e, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: e } }], this.built = !0;
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = t.slice();
    return e[e.length - 1] = this.units, e;
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      const s = mt(t), o = $y(this.activation.getClassName());
      let r;
      return o != null ? r = ms(s, this.kernel.read(), o, this.bias ? this.bias.read() : null) : (r = ms(s, this.kernel.read()), this.bias != null && (r = ss(r, this.bias.read())), this.activation != null && (r = this.activation.apply(r))), r;
    });
  }
  getConfig() {
    const t = {
      units: this.units,
      activation: co(this.activation),
      useBias: this.useBias,
      kernelInitializer: te(this.kernelInitializer),
      biasInitializer: te(this.biasInitializer),
      kernelRegularizer: Vt(this.kernelRegularizer),
      biasRegularizer: Vt(this.biasRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      kernelConstraint: me(this.kernelConstraint),
      biasConstraint: me(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Hw.className = "Dense";
H(Hw);
class Uw extends kt {
  constructor(t) {
    t = t || {}, super(t), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = t.dataFormat;
  }
  computeOutputShape(t) {
    t = Et(t);
    for (const e of t.slice(1))
      if (e == null)
        throw new L(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [t[0], eo(t, 1)];
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      let s = mt(t);
      if (this.dataFormat === "channelsFirst" && s.rank > 1) {
        const o = [0];
        for (let r = 2; r < s.rank; ++r)
          o.push(r);
        o.push(1), s = St(s, o);
      }
      return VL(s);
    });
  }
  getConfig() {
    const t = {};
    this.dataFormat != null && (t.dataFormat = this.dataFormat);
    const e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Uw.className = "Flatten";
H(Uw);
class Yw extends kt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.activation = uo(t.activation);
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      const s = mt(t);
      return this.activation.apply(s);
    });
  }
  getConfig() {
    const t = { activation: co(this.activation) }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Yw.className = "Activation";
H(Yw);
class Qw extends kt {
  constructor(t) {
    super(t), this.n = t.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(t) {
    return [t[0], this.n, t[1]];
  }
  call(t, e) {
    return z(() => (t = mt(t), FL(t, this.n)));
  }
  getConfig() {
    const t = {
      n: this.n
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Qw.className = "RepeatVector";
H(Qw);
class jw extends kt {
  constructor(t) {
    super(t), this.targetShape = t.targetShape;
    for (let e = 0; e < this.targetShape.length; ++e)
      this.isUnknown(this.targetShape[e]) && (this.targetShape[e] = null);
  }
  isUnknown(t) {
    return t < 0 || t == null;
  }
  /**
   * Finds and replaces a missing dimension in output shape.
   *
   * This is a near direct port of the internal Numpy function
   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
   *
   * @param inputShape: Original shape of array begin reshape.
   * @param outputShape: Target shape of the array, with at most a single
   * `null` or negative number, which indicates an underdetermined dimension
   * that should be derived from `inputShape` and the known dimensions of
   *   `outputShape`.
   * @returns: The output shape with `null` replaced with its computed value.
   * @throws: ValueError: If `inputShape` and `outputShape` do not match.
   */
  fixUnknownDimension(t, e) {
    const s = "Total size of new array must be unchanged.", o = e.slice();
    let r = 1, i = null;
    for (let l = 0; l < o.length; ++l) {
      const c = o[l];
      if (this.isUnknown(c))
        if (i === null)
          i = l;
        else
          throw new L("Can only specifiy one unknown dimension.");
      else
        r *= c;
    }
    const a = eo(t);
    if (i !== null) {
      if (r === 0 || a % r !== 0)
        throw new L(s);
      o[i] = a / r;
    } else if (a !== r)
      throw new L(s);
    return o;
  }
  computeOutputShape(t) {
    let e = !1;
    for (let s = 0; s < t.length; ++s)
      if (this.isUnknown(t[s])) {
        e = !0;
        break;
      }
    return e ? t.slice(0, 1).concat(this.targetShape) : t.slice(0, 1).concat(this.fixUnknownDimension(t.slice(1), this.targetShape));
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      const s = mt(t), o = s.shape, r = o.slice(0, 1).concat(this.fixUnknownDimension(o.slice(1), this.targetShape));
      return M(s, r);
    });
  }
  getConfig() {
    const t = {
      targetShape: this.targetShape
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
jw.className = "Reshape";
H(jw);
class Jw extends kt {
  constructor(t) {
    if (super(t), t.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(t.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);
    const e = qn(1, t.dims.length + 1);
    if (!$t(t.dims.slice().sort(), e))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(t.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = t.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new fe({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = t.slice();
    return this.dims.forEach((s, o) => {
      e[o + 1] = t[s];
    }), e;
  }
  call(t, e) {
    return St(mt(t), this.dimsIncludingBatch);
  }
  getConfig() {
    const t = {
      dims: this.dims
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Jw.className = "Permute";
H(Jw);
class qw extends kt {
  constructor(t) {
    super(t ?? {}), this.supportsMasking = !0, t != null ? this.maskValue = t.maskValue == null ? 0 : t.maskValue : this.maskValue = 0;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { maskValue: this.maskValue };
    return Object.assign(e, t), e;
  }
  computeMask(t, e) {
    const s = mt(t), o = -1;
    return Bh(Pi(s, this.maskValue), o);
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      const s = mt(t), o = -1, r = !0, i = Bh(Pi(s, this.maskValue), o, r);
      return G(s, et(i, s.dtype));
    });
  }
}
qw.className = "Masking";
H(qw);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class tI extends kt {
  constructor(t) {
    if (super(t), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", t.batchInputShape == null && t.inputShape == null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), t.inputLength == null ? this.batchInputShape = [e, null] : this.batchInputShape = [e].concat(Bt(t.inputLength));
    }
    this.inputDim = t.inputDim, we(this.inputDim, "inputDim"), this.outputDim = t.outputDim, we(this.outputDim, "outputDim"), this.embeddingsInitializer = Qt(t.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = jt(t.embeddingsRegularizer), this.activityRegularizer = jt(t.activityRegularizer), this.embeddingsConstraint = ge(t.embeddingsConstraint), this.maskZero = t.maskZero, this.supportsMasking = t.maskZero, this.inputLength = t.inputLength;
  }
  build(t) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
  }
  // Override warnOnIncompatibleInputShape because an embedding layer allows
  // the input to have varying ranks.
  warnOnIncompatibleInputShape(t) {
  }
  computeMask(t, e) {
    return z(() => this.maskZero ? (t = mt(t), Pi(t, Nt(t))) : null);
  }
  computeOutputShape(t) {
    if (t = Et(t), this.inputLength == null)
      return [...t, this.outputDim];
    const e = Bt(this.inputLength);
    if (e.length !== t.length - 1)
      throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
    {
      let s = 0;
      for (let o = 0; o < e.length; ++o) {
        const r = e[o], i = t[o + 1];
        if (r != null && i != null && r !== i)
          throw new L(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
        r == null && (e[s] = i), s++;
      }
    }
    return [t[0], ...e, this.outputDim];
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      let s = mt(t);
      s.dtype !== "int32" && (s = fs(s, "int32"));
      const o = zy(this.embeddings.read(), M(s, [s.size]));
      return M(o, Et(this.computeOutputShape(s.shape)));
    });
  }
  getConfig() {
    const t = {
      inputDim: this.inputDim,
      outputDim: this.outputDim,
      embeddingsInitializer: te(this.embeddingsInitializer),
      embeddingsRegularizer: Vt(this.embeddingsRegularizer),
      activityRegularizer: Vt(this.activityRegularizer),
      embeddingsConstraint: me(this.embeddingsConstraint),
      maskZero: this.maskZero,
      inputLength: this.inputLength
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
tI.className = "Embedding";
H(tI);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class pr extends kt {
  constructor(t) {
    super(t || {}), this.supportsMasking = !0;
  }
  /**
   * Logic for merging multiple tensors, to be overridden by subclasses.
   * @param inputs
   */
  mergeFunction(t) {
    throw new xt();
  }
  /**
   * Computes the shape of the result of an elementwise operation.
   *
   * @param shape1: Shape of the first tensor.
   * @param shape2: Shape of the second tensor.
   * @returns Expected output shape when an elementwise operation is carried
   *   out on 2 tensors with shapes `shape1` and `shape2`.
   * @throws ValueError: If `shape1` and `shape2` are not compatible for
   *   element-wise operations.
   */
  computeElementwiseOpOutputShape(t, e) {
    if (t == null || e == null)
      return null;
    if (t.length < e.length)
      return this.computeElementwiseOpOutputShape(e, t);
    if (e.length === 0)
      return t;
    const s = t.slice(0, t.length - e.length);
    for (let o = 0; o < e.length; ++o) {
      const r = t[t.length - e.length + o], i = e[o];
      if (r == null || i == null || r < 0 || i < 0)
        s.push(null);
      else if (r === 1)
        s.push(i);
      else if (i === 1)
        s.push(r);
      else {
        if (r !== i)
          throw new L("Operands could not be broadcast together with shapes " + JSON.stringify(t) + " " + JSON.stringify(e));
        s.push(r);
      }
    }
    return s;
  }
  build(t) {
    if (Array.isArray(t) && !Array.isArray(t[0]) && (t = [Et(t)]), t = t, t.length < 2)
      throw new L(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);
    let e = [];
    for (const r of t)
      r != null && r[0] !== null && e.push(r[0]);
    if (e = to(e), e.length > 1)
      throw new L(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);
    let s = t[0] == null ? null : t[0].slice(1);
    for (let r = 1; r < t.length; ++r) {
      const i = t[r] == null ? null : t[r].slice(1);
      s = this.computeElementwiseOpOutputShape(s, i);
    }
    const o = t.map((r) => r.length);
    t.indexOf(null) === -1 && to(o).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
  }
  call(t, e) {
    return z(() => {
      if (t = t, this.reshapeRequired) {
        const s = [], o = t.map((r) => r.rank);
        if (o.indexOf(null) === -1) {
          const r = lo(o);
          for (let i of t) {
            const a = i.rank;
            for (let l = 0; l < r - a; ++l)
              i = gl(i, 1);
            s.push(i);
          }
          return this.mergeFunction(s);
        } else {
          let r = !1;
          for (const l of t) {
            const c = l.rank;
            if (c == null) {
              const u = l.shape, d = u[0], h = u.slice(1).concat([d]);
              let p = M(l, [d].concat(eo(u.slice(1))));
              p = St(p, [1, 0]), p = M(p, h), s.push(p), r = !0;
            } else if (c > 1) {
              const u = qn(1, c).concat([0]);
              s.push(St(l, u)), r = !0;
            } else
              s.push(l);
          }
          let i = this.mergeFunction(s);
          const a = i.rank;
          if (r) {
            if (a == null) {
              const l = i.shape, c = l.length, u = l[c - 1], d = [u].concat(l.slice(0, l.length - 1));
              i = M(St(M(i, [-1, u]), [1, 0]), d);
            } else if (a > 1) {
              const l = [a - 1].concat(qn(0, a - 1));
              i = St(i, l);
            }
          }
          return i;
        }
      } else
        return this.mergeFunction(t);
    });
  }
  computeOutputShape(t) {
    t = t;
    let e;
    t[0] == null ? e = null : e = t[0].slice(1);
    for (let o = 1; o < t.length; ++o) {
      const r = t[o] == null ? null : t[o].slice(1);
      e = this.computeElementwiseOpOutputShape(e, r);
    }
    let s = [];
    for (const o of t)
      o != null && o[0] !== null && s.push(o[0]);
    return s = to(s), s.length === 1 ? e = s.concat(e) : e = [null].concat(e), e;
  }
  computeMask(t, e) {
    return z(() => {
      if (e == null)
        return null;
      if (!Array.isArray(e))
        throw new L("`mask` should be an Array");
      if (!Array.isArray(t))
        throw new L("`inputs` should be an Array");
      if (e.length !== t.length)
        throw new L(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);
      if (e.every((o) => o == null))
        return null;
      e = e.map((o) => o == null ? o : tn(o, 0));
      let s = e[0];
      for (let o = 1; o < e.length - 1; ++o)
        s = xs(s, e[o]);
      return s;
    });
  }
}
class eI extends pr {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return z(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = U(e, t[s]);
      return e;
    });
  }
}
eI.className = "Add";
H(eI);
class nI extends pr {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return z(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = G(e, t[s]);
      return e;
    });
  }
}
nI.className = "Multiply";
H(nI);
class sI extends pr {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return z(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = U(e, t[s]);
      return G(1 / t.length, e);
    });
  }
}
sI.className = "Average";
H(sI);
class oI extends pr {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return z(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = bo(e, t[s]);
      return e;
    });
  }
}
oI.className = "Maximum";
H(oI);
class rI extends pr {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return z(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = td(e, t[s]);
      return e;
    });
  }
}
rI.className = "Minimum";
H(rI);
class iI extends pr {
  constructor(t) {
    super(t), this.DEFAULT_AXIS = -1, t == null && (t = {}), this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])) || t.length === 1)
      throw new L("A `Concatenate` layer should be called on a list of at least 2 inputs");
    t = t;
    let e = !0;
    for (const o of t)
      if (o != null) {
        e = !1;
        break;
      }
    if (e)
      return;
    const s = [];
    for (let o = 0; o < t.length; ++o) {
      const r = t[o].slice();
      r.splice(this.axis, 1);
      let i = !1;
      for (const a of s)
        if ($t(a, r)) {
          i = !0;
          break;
        }
      i || s.push(r);
    }
    if (s.length > 1)
      throw new L("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(t));
  }
  mergeFunction(t) {
    return z(() => Km(t, this.axis));
  }
  computeOutputShape(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])))
      throw new L("A `Concatenate` layer should be called on a list of inputs.");
    const e = t, s = e[0].slice(), o = this.axis < 0 ? s.length + this.axis : this.axis;
    for (const r of e.slice(1)) {
      if (s[o] == null || r[o] == null) {
        s[o] = null;
        break;
      }
      s[o] += r[o];
    }
    return s;
  }
  computeMask(t, e) {
    if (e == null)
      return null;
    if (!Array.isArray(e))
      throw new L("`mask` should be an array for Concatenate");
    if (!Array.isArray(t))
      throw new L("`inputs` should be an array for Concatenate");
    if (e.length !== t.length)
      throw new L(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);
    return z(() => {
      let s = !0;
      if (e.forEach((i) => {
        if (i != null) {
          s = !1;
          return;
        }
      }), s)
        return null;
      const o = [];
      for (let i = 0; i < t.length; ++i)
        e[i] == null ? o.push(et(Vn(t[i]), "bool")) : e[i].rank < t[i].rank ? o.push(tn(e[i], -1)) : o.push(e[i]);
      const r = ze(o, this.axis);
      return s1(r, -1, !1);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
iI.className = "Concatenate";
H(iI);
function yi(n, t) {
  for (; n < 0; )
    n += t;
  return n;
}
function sM(n, t, e) {
  if (n.shape.length > 3 || t.shape.length > 3)
    throw new xt("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (k(n.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`), k(n.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`), typeof e == "number" && (e = [e, e]), n.dtype === "complex64" || t.dtype === "complex64")
    throw new xt("batchDot is not implemented for complex64-type Tensors yet.");
  const s = n.shape.length, o = t.shape.length;
  e == null && (e = [s - 1, o - 2]);
  const r = e;
  return z(() => {
    let i;
    if (s > o) {
      i = s - o;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      t = M(t, t.shape.concat(l));
    } else if (o > s) {
      i = o - s;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      n = M(n, n.shape.concat(l));
    } else
      i = 0;
    let a;
    if (n.shape.length === 2 && t.shape.length === 2)
      r[0] === r[1] ? a = at(G(n, t), r[0]) : a = at(G(St(n, [1, 0]), t), r[1]);
    else {
      const l = r[0] !== n.shape.length - 1, c = r[1] === t.shape.length - 1;
      a = Gt(n, t, l, c);
    }
    if (i > 0) {
      let l;
      s > o ? l = s + o - 3 : l = s - 1;
      const c = [];
      for (let u = l; u < l + i; ++u)
        c.push(u);
      a = ul(a, c);
    }
    return a.shape.length === 1 && (a = tn(a, 1)), a;
  });
}
class aI extends pr {
  constructor(t) {
    super(t), this.axes = t.axes, this.normalize = t.normalize == null ? !1 : t.normalize, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    k(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0], s = t[1];
    if (e.length > 3 || s.length > 3)
      throw new xt("Dot layer does not support tensors of 4D or higher rank yet.");
    const o = this.interpretAxes(e, s);
    if (e[o[0]] !== s[o[1]])
      throw new L(`Dimension incompatibility: ${e[o[0]]} !== ${s[o[1]]}`);
  }
  mergeFunction(t) {
    if (t.length !== 2)
      throw new L(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);
    let e = t[0], s = t[1], o;
    return Array.isArray(this.axes) ? o = this.axes.map((r, i) => yi(r, t[i].shape.length)) : o = [
      yi(this.axes, e.shape.length),
      yi(this.axes, s.shape.length)
    ], this.normalize && (e = Tc(e, o[0]), s = Tc(s, o[1])), sM(e, s, o);
  }
  interpretAxes(t, e) {
    let s;
    return Array.isArray(this.axes) ? s = this.axes : s = [
      yi(this.axes, t.length),
      yi(this.axes, e.length)
    ], s;
  }
  computeOutputShape(t) {
    k(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0].slice(), s = t[1].slice();
    if (e.length > 3 || s.length > 3)
      throw new xt("Dot layer does not support tensors of 4D or higher rank yet.");
    const o = this.interpretAxes(e, s);
    e.splice(o[0], 1), s.splice(o[1], 1), s.splice(0, 1);
    const r = e.concat(s);
    return r.length === 1 && r.push(1), r;
  }
  computeMask(t, e) {
    return null;
  }
  getConfig() {
    const t = {
      axes: this.axes,
      normalize: this.normalize
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
aI.className = "Dot";
H(aI);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class lI extends kt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.stddev = t.stddev;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { stddev: this.stddev };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      const s = mt(t);
      return xl(() => U(cd(s.shape, 0, this.stddev), s), () => s, e.training || !1);
    });
  }
}
lI.className = "GaussianNoise";
H(lI);
class cI extends kt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e);
      const s = mt(t);
      return this.rate > 0 && this.rate < 1 ? xl(() => {
        const r = Math.sqrt(this.rate / (1 - this.rate));
        return G(s, cd(s.shape, 1, r));
      }, () => s, e.training || !1) : s;
    });
  }
}
cI.className = "GaussianDropout";
H(cI);
class uI extends kt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate, this.noiseShape = t.noiseShape;
  }
  _getNoiseShape(t) {
    return this.noiseShape || mt(t).shape;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return z(() => {
      if (this.rate < 1 && this.rate > 0) {
        const s = this._getNoiseShape(t);
        return xl(() => {
          const r = mt(t), i = 1.6732632423543772, a = 1.0507009873554805, l = -i * a;
          let c = cr(ed(s), this.rate);
          c = fs(c, "float32");
          const u = ((1 - this.rate) * (1 + this.rate * l ** 2)) ** -0.5, d = -u * l * this.rate, h = U(G(r, c), G(U(c, -1), l));
          return U(G(h, u), d);
        }, () => mt(t), e.training || !1);
      }
      return t;
    });
  }
}
uI.className = "AlphaDropout";
H(uI);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Yi(n, t, e, s, o, r = 1e-3) {
  let i;
  if (n.rank === 2)
    i = US(n, t, e, s, o, r);
  else if (n.rank === 3)
    i = QS(n, t, e, s, o, r);
  else if (n.rank === 4)
    i = JS(n, t, e, s, o, r);
  else
    throw new xt(`batchNormalization is not implemented for array of rank ${n.rank} yet`);
  return i;
}
function oM(n, t, e, s, o = 1e-3) {
  return z(() => {
    const r = Qf(n, s), i = r.mean, a = r.variance;
    return [Yi(n, i, a, e, t, o), i, a];
  });
}
function rM(n, t, e, s, o = 1e-3) {
  return z(() => {
    const r = Qf(n, s), i = r.mean, a = r.variance, l = [];
    for (const f of qn(0, n.rank))
      s.indexOf(f) !== -1 ? l.push(1) : l.push(n.shape[f]);
    const c = M(i, l), u = M(a, l), d = t == null ? null : M(t, l), h = e == null ? null : M(e, l);
    return [Yi(n, c, u, h, d, o), i, a];
  });
}
function iM(n, t, e, s, o = 1e-3) {
  return $t(s.slice().sort(), qn(0, n.rank - 1)) ? oM(n, t, e, s, o) : rM(n, t, e, s, o);
}
class dI extends kt {
  constructor(t) {
    t == null && (t = {}), super(t), this.supportsMasking = !0, this.axis = t.axis == null ? -1 : t.axis, this.momentum = t.momentum == null ? 0.99 : t.momentum, this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = Qt(t.betaInitializer || "zeros"), this.gammaInitializer = Qt(t.gammaInitializer || "ones"), this.movingMeanInitializer = Qt(t.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = Qt(t.movingVarianceInitializer || "ones"), this.betaConstraint = ge(t.betaConstraint), this.gammaConstraint = ge(t.gammaConstraint), this.betaRegularizer = jt(t.betaRegularizer), this.gammaRegularizer = jt(t.gammaRegularizer);
  }
  build(t) {
    t = Et(t);
    const e = this.axis >= 0 ? this.axis : this.axis + t.length, s = t[e];
    if (s == null)
      throw new L(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);
    this.inputSpec = [new fe({ ndim: t.length, axes: { [e]: s } })];
    const o = [s];
    this.scale && (this.gamma = this.addWeight("gamma", o, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", o, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", o, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", o, null, this.movingVarianceInitializer, null, !1), this.built = !0;
  }
  call(t, e) {
    return z(() => {
      const s = e.training == null ? !1 : e.training, o = mt(t), r = o.shape, i = r.length, a = qn(0, i), l = this.axis >= 0 ? this.axis : this.axis + i;
      a.splice(l, 1);
      const c = tr(1, i);
      c[l] = r[l];
      const u = a.slice();
      u.sort();
      const d = !$t(u, qn(0, i).slice(0, i - 1)), h = () => {
        if (d) {
          const x = M(this.movingMean.read(), c), w = M(this.movingVariance.read(), c), y = this.center ? M(this.beta.read(), c) : null, I = this.scale ? M(this.gamma.read(), c) : null;
          return Yi(o, x, w, y, I, this.epsilon);
        } else
          return Yi(o, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!s)
        return h();
      const [p, f, m] = iM(o, this.gamma.read(), this.beta.read(), a, this.epsilon), g = (x, w, y) => {
        z(() => {
          const I = 1 - y, C = x.read(), v = G(lt(C, w), I);
          x.write(lt(C, v));
        });
      };
      return (() => {
        g(this.movingMean, f, this.momentum), g(this.movingVariance, m, this.momentum);
      })(), p;
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      momentum: this.momentum,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: te(this.betaInitializer),
      gammaInitializer: te(this.gammaInitializer),
      movingMeanInitializer: te(this.movingMeanInitializer),
      movingVarianceInitializer: te(this.movingVarianceInitializer),
      betaRegularizer: Vt(this.betaRegularizer),
      gammaRegularizer: Vt(this.gammaRegularizer),
      betaConstraint: me(this.betaConstraint),
      gammaConstraint: me(this.gammaConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
dI.className = "BatchNormalization";
H(dI);
class hI extends kt {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.axis = t.axis == null ? -1 : t.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (const e of this.axis)
        if (!Number.isInteger(e))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = Qt(t.betaInitializer || "zeros"), this.gammaInitializer = Qt(t.gammaInitializer || "ones"), this.betaRegularizer = jt(t.betaRegularizer), this.gammaRegularizer = jt(t.gammaRegularizer), this.supportsMasking = !0;
  }
  build(t) {
    t = Et(t);
    const e = t.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let r = 0; r < this.axis.length; ++r)
      this.axis[r] < 0 && (this.axis[r] += e);
    for (const r of this.axis)
      if (r < 0 || r >= e)
        throw new Error(`Invalid axis: ${r}`);
    if (this.axis.length !== to(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    const s = this.axis.map((r) => t[r]), o = !0;
    this.scale ? this.gamma = this.addWeight("gamma", s, "float32", this.gammaInitializer, this.gammaRegularizer, o) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", s, "float32", this.betaInitializer, this.betaRegularizer, o) : this.beta = null, this.built = !0;
  }
  call(t, e) {
    const s = mt(t), o = s.shape, r = o.length;
    return z(() => {
      let { mean: a, variance: l } = Qf(s, this.axis, !0);
      const c = tr(1, r);
      for (const m of this.axis)
        c[m] = o[m];
      const u = (m) => m != null && m.shape.length !== r ? M(m, c) : m;
      let d = this.scale ? u(this.gamma.read()) : null, h = this.center ? u(this.beta.read()) : null;
      const p = [], f = [];
      for (let m = 0; m < r; ++m)
        this.axis.indexOf(m) !== -1 ? (p.push(o[m]), f.push(1)) : (p.push(1), f.push(o[m]));
      return a = Un(a, p), l = Un(l, p), d != null && (d = Un(d, f)), h != null && (h = Un(h, f)), Yi(s, a, l, h, d, this.epsilon);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: te(this.betaInitializer),
      gammaInitializer: te(this.gammaInitializer),
      betaRegularizer: Vt(this.betaRegularizer),
      gammaRegularizer: Vt(this.gammaRegularizer)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
hI.className = "LayerNormalization";
H(hI);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function aM(n, t, e) {
  return z(() => {
    if (n.rank !== 4)
      throw new L(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);
    if (t == null && (t = [[1, 1], [1, 1]]), t.length !== 2 || t[0].length !== 2 || t[1].length !== 2)
      throw new L("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (e == null && (e = ts()), e !== "channelsLast" && e !== "channelsFirst")
      throw new L(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let s;
    return e === "channelsFirst" ? s = [[0, 0], [0, 0], t[0], t[1]] : s = [[0, 0], t[0], t[1], [0, 0]], jf(n, s);
  });
}
class pI extends kt {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.dataFormat = t.dataFormat == null ? ts() : t.dataFormat, t.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof t.padding == "number")
      this.padding = [[t.padding, t.padding], [t.padding, t.padding]];
    else {
      if (t.padding = t.padding, t.padding.length !== 2)
        throw new L(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);
      let e, s;
      if (typeof t.padding[0] == "number")
        e = [t.padding[0], t.padding[0]], s = [t.padding[1], t.padding[1]];
      else {
        if (t.padding = t.padding, t.padding[0].length !== 2)
          throw new L(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);
        if (e = t.padding[0], t.padding[1].length !== 2)
          throw new L(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);
        s = t.padding[1];
      }
      this.padding = [e, s];
    }
    this.inputSpec = [new fe({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = Et(t);
    let e, s;
    return this.dataFormat === "channelsFirst" ? (t[2] != null && t[2] >= 0 ? e = t[2] + this.padding[0][0] + this.padding[0][1] : e = null, t[3] != null && t[3] >= 0 ? s = t[3] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], t[1], e, s]) : (t[1] != null && t[1] >= 0 ? e = t[1] + this.padding[0][0] + this.padding[0][1] : e = null, t[2] != null && t[2] >= 0 ? s = t[2] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], e, s, t[3]]);
  }
  call(t, e) {
    return z(() => aM(mt(t), this.padding, this.dataFormat));
  }
  getConfig() {
    const t = {
      padding: this.padding,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
pI.className = "ZeroPadding2D";
H(pI);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function xd(n, t, e, s, o, r) {
  return z(() => {
    ue(o), Gy(r), vn(s), e == null && (e = [1, 1]), s == null && (s = "valid"), o == null && (o = ts()), r == null && (r = "max"), n = rg(n, o);
    let i;
    const a = s === "same" ? "same" : "valid";
    return r === "max" ? i = Yf(n, t, e, a) : i = Wf(
      // TODO(cais): Rank check?
      n,
      t,
      e,
      a
    ), o === "channelsFirst" && (i = St(i, [0, 3, 1, 2])), i;
  });
}
function fI(n, t, e, s, o, r) {
  return z(() => {
    ue(o), Gy(r), vn(s), e == null && (e = [1, 1, 1]), s == null && (s = "valid"), o == null && (o = ts()), r == null && (r = "max"), n = Gw(n, o);
    let i;
    const a = s === "same" ? "same" : "valid";
    return r === "max" ? i = FN(n, t, e, a) : i = VS(n, t, e, a), o === "channelsFirst" && (i = St(i, [0, 4, 1, 2, 3])), i;
  });
}
class mI extends kt {
  /**
   *
   * @param args Parameters for the Pooling layer.
   *
   * config.poolSize defaults to 2.
   */
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = 2), super(t), typeof t.poolSize == "number")
      this.poolSize = [t.poolSize];
    else if (Array.isArray(t.poolSize) && t.poolSize.length === 1 && typeof t.poolSize[0] == "number")
      this.poolSize = t.poolSize;
    else
      throw new L(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);
    if (we(this.poolSize, "poolSize"), t.strides == null)
      this.strides = this.poolSize;
    else if (typeof t.strides == "number")
      this.strides = [t.strides];
    else if (Array.isArray(t.strides) && t.strides.length === 1 && typeof t.strides[0] == "number")
      this.strides = t.strides;
    else
      throw new L(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);
    we(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, vn(this.padding), this.inputSpec = [new fe({ ndim: 3 })];
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = Jn(t[1], this.poolSize[0], this.padding, this.strides[0]);
    return [t[0], e, t[2]];
  }
  call(t, e) {
    return z(() => {
      this.invokeCallHook(t, e), t = gl(mt(t), 2);
      const s = this.poolingFunction(mt(t), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return ul(s, [2]);
    });
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class gI extends mI {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return ue(r), vn(o), xd(t, e, s, o, r, "max");
  }
}
gI.className = "MaxPooling1D";
H(gI);
class bI extends mI {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return ue(r), vn(o), xd(t, e, s, o, r, "avg");
  }
}
bI.className = "AveragePooling1D";
H(bI);
class xI extends kt {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 2)
        throw new L(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides];
    we(this.poolSize, "poolSize"), we(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, ue(this.dataFormat), vn(this.padding), this.inputSpec = [new fe({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = Et(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2];
    return e = Jn(e, this.poolSize[0], this.padding, this.strides[0]), s = Jn(s, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s] : [t[0], e, s, t[3]];
  }
  call(t, e) {
    return z(() => (this.invokeCallHook(t, e), this.poolingFunction(mt(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class yI extends xI {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return ue(r), vn(o), xd(t, e, s, o, r, "max");
  }
}
yI.className = "MaxPooling2D";
H(yI);
class wI extends xI {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return ue(r), vn(o), xd(t, e, s, o, r, "avg");
  }
}
wI.className = "AveragePooling2D";
H(wI);
class II extends kt {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 3)
        throw new L(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides, t.strides];
    we(this.poolSize, "poolSize"), we(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, ue(this.dataFormat), vn(this.padding), this.inputSpec = [new fe({ ndim: 5 })];
  }
  computeOutputShape(t) {
    t = Et(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], o = this.dataFormat === "channelsFirst" ? t[4] : t[3];
    return e = Jn(e, this.poolSize[0], this.padding, this.strides[0]), s = Jn(s, this.poolSize[1], this.padding, this.strides[1]), o = Jn(o, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s, o] : [t[0], e, s, o, t[4]];
  }
  call(t, e) {
    return z(() => (this.invokeCallHook(t, e), this.poolingFunction(mt(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class CI extends II {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return ue(r), vn(o), fI(t, e, s, o, r, "max");
  }
}
CI.className = "MaxPooling3D";
H(CI);
class vI extends II {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return ue(r), vn(o), fI(t, e, s, o, r, "avg");
  }
}
vI.className = "AveragePooling3D";
H(vI);
class kI extends kt {
  constructor(t) {
    super(t), this.inputSpec = [new fe({ ndim: 3 })];
  }
  computeOutputShape(t) {
    return [t[0], t[2]];
  }
  call(t, e) {
    throw new xt();
  }
}
class SI extends kI {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return z(() => {
      const s = mt(t);
      return ie(s, 1);
    });
  }
}
SI.className = "GlobalAveragePooling1D";
H(SI);
class TI extends kI {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return z(() => {
      const s = mt(t);
      return Qn(s, 1);
    });
  }
}
TI.className = "GlobalMaxPooling1D";
H(TI);
class NI extends kt {
  constructor(t) {
    super(t), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, ue(this.dataFormat), this.inputSpec = [new fe({ ndim: 4 })];
  }
  computeOutputShape(t) {
    return t = t, this.dataFormat === "channelsLast" ? [t[0], t[3]] : [t[0], t[1]];
  }
  call(t, e) {
    throw new xt();
  }
  getConfig() {
    const t = { dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class RI extends NI {
  call(t, e) {
    return z(() => {
      const s = mt(t);
      return this.dataFormat === "channelsLast" ? ie(s, [1, 2]) : ie(s, [2, 3]);
    });
  }
}
RI.className = "GlobalAveragePooling2D";
H(RI);
class $I extends NI {
  call(t, e) {
    return z(() => {
      const s = mt(t);
      return this.dataFormat === "channelsLast" ? Qn(s, [1, 2]) : Qn(s, [2, 3]);
    });
  }
}
$I.className = "GlobalMaxPooling2D";
H($I);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class EI extends kt {
  constructor(t) {
    super(t), this.layer = t.layer;
  }
  build(t) {
    this.built = !0;
  }
  // TODO(cais): Implement activityRegularizer getter.
  get trainable() {
    return this.layer != null ? this.layer.trainable : !1;
  }
  set trainable(t) {
    this.layer != null && (this.layer.trainable = t);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  // TODO(cais): Implement setter for trainableWeights.
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  // TODO(cais): Implement setter for nonTrainableWeights.
  get updates() {
    return this.layer._updates;
  }
  // TODO(cais): Implement getUpdatesFor().
  get losses() {
    return this.layer.losses;
  }
  // TODO(cais): Implement getLossesFor().
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(t) {
    this.layer.setWeights(t);
  }
  getConfig() {
    const t = {
      layer: {
        className: this.layer.getClassName(),
        config: this.layer.getConfig()
      }
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.layer != null && this.layer.setFastWeightInitDuringBuild(t);
  }
  /** @nocollapse */
  static fromConfig(t, e, s = {}) {
    const o = e.layer, r = jn(o, s);
    delete e.layer;
    const i = { layer: r };
    return Object.assign(i, e), new t(i);
  }
}
class GI extends EI {
  constructor(t) {
    super(t), this.supportsMasking = !0;
  }
  build(t) {
    if (t = Et(t), t.length < 3)
      throw new L(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);
    this.inputSpec = [{ shape: t }];
    const e = [t[0]].concat(t.slice(2));
    this.layer.built || (this.layer.build(e), this.layer.built = !0), super.build(t);
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = [t[0]].concat(t.slice(2)), s = this.layer.computeOutputShape(e), o = t[1];
    return [s[0], o].concat(s.slice(1));
  }
  call(t, e) {
    return z(() => (t = mt(t), Aw(
      (i, a) => [mt(this.layer.call(i, e)), []],
      t,
      [],
      !1,
      null,
      null,
      !1,
      !0
      /* needPerStepOutputs */
    )[1]));
  }
}
GI.className = "TimeDistributed";
H(GI);
function lM(n) {
  hr(GL, "BidirectionalMergeMode", n);
}
const cM = "concat";
class LI extends EI {
  constructor(t) {
    super(t);
    const e = t.layer.getConfig(), s = {};
    s.className = t.layer.getClassName(), s.config = e, this.forwardLayer = jn(s), e.goBackwards = e.goBackwards !== !0;
    const o = {};
    if (o.className = t.layer.getClassName(), o.config = e, this.backwardLayer = jn(o), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = t.mergeMode === void 0 ? cM : t.mergeMode, lM(this.mergeMode), t.weights)
      throw new xt("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = t.layer.stateful, this.returnSequences = t.layer.returnSequences, this.returnState = t.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = t.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(t) {
    this._trainable = t, this.forwardLayer != null && (this.forwardLayer.trainable = t), this.backwardLayer != null && (this.backwardLayer.trainable = t);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(t) {
    const e = t.length, s = Math.floor(e / 2);
    this.forwardLayer.setWeights(t.slice(0, s)), this.backwardLayer.setWeights(t.slice(s));
  }
  computeOutputShape(t) {
    let e = this.forwardLayer.computeOutputShape(t);
    Array.isArray(e) && Array.isArray(e[0]) || (e = [e]), e = e;
    let s, o, r;
    return this.returnState && (r = e.slice(1)), s = e[0], s = s, this.mergeMode === "concat" ? (s[s.length - 1] *= 2, o = [s]) : this.mergeMode == null ? o = [s, s.slice()] : o = [s], this.returnState ? this.mergeMode == null ? o.concat(r).concat(r.slice()) : [s].concat(r).concat(r.slice()) : Ke(o);
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, o = e == null ? null : e.constants;
    e == null && (e = {});
    const r = _w(t, s, o, this.numConstants);
    if (t = r.inputs, s = r.initialState, o = r.constants, Array.isArray(t) && (s = t.slice(1), t = t[0]), (s == null || s.length === 0) && o == null)
      return super.apply(t, e);
    const i = [], a = [];
    if (s != null) {
      const c = s.length;
      if (c % 2 > 0)
        throw new L("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      e.initialState = s, i.push(...s);
      const u = s.map((d) => new fe({ shape: d.shape }));
      this.forwardLayer.stateSpec = u.slice(0, c / 2), this.backwardLayer.stateSpec = u.slice(c / 2), a.push(...u);
    }
    if (o != null)
      throw new xt("Support for constants in Bidirectional layers is not implemented yet.");
    const l = i[0] instanceof ds;
    for (const c of i)
      if (c instanceof ds !== l)
        throw new L("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (l) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), d = this.inputSpec;
      this.inputSpec = u;
      const h = super.apply(c, e);
      return this.inputSpec = d, h;
    } else
      return super.apply(t, e);
  }
  call(t, e) {
    return z(() => {
      const s = e.initialState;
      let o, r;
      if (s == null)
        o = this.forwardLayer.call(t, e), r = this.backwardLayer.call(t, e);
      else {
        const l = s.slice(0, s.length / 2), c = s.slice(s.length / 2);
        o = this.forwardLayer.call(t, Object.assign(e, { initialState: l })), r = this.backwardLayer.call(t, Object.assign(e, { initialState: c }));
      }
      let i;
      this.returnState && (Array.isArray(o) && (i = o.slice(1).concat(r.slice(1))), o = o[0], r = r[0]), this.returnSequences && (r = jo(r, 1));
      let a;
      return this.mergeMode === "concat" ? a = Km([o, r]) : this.mergeMode === "sum" ? a = U(o, r) : this.mergeMode === "ave" ? a = G(0.5, U(o, r)) : this.mergeMode === "mul" ? a = G(o, r) : this.mergeMode == null && (a = [o, r]), this.returnState ? this.mergeMode == null ? a.concat(i) : [a].concat(i) : a;
    });
  }
  resetStates(t) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(t) {
    Ao(this.forwardLayer.name, () => {
      this.forwardLayer.build(t);
    }), Ao(this.backwardLayer.name, () => {
      this.backwardLayer.build(t);
    }), this.built = !0;
  }
  computeMask(t, e) {
    Array.isArray(e) && (e = e[0]);
    let s;
    if (this.returnSequences ? this.mergeMode == null ? s = [e, e] : s = e : this.mergeMode == null ? s = [null, null] : s = null, this.returnState) {
      const r = this.forwardLayer.states.map((i) => null);
      return Array.isArray(s) ? s.concat(r).concat(r) : [s].concat(r).concat(r);
    } else
      return s;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  // TODO(cais): Implement constraints().
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(t), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = {
      mergeMode: this.mergeMode
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    const s = jn(e.layer);
    if (delete e.layer, e.numConstants != null)
      throw new xt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const o = e;
    return o.layer = s, new t(o);
  }
}
LI.className = "Bidirectional";
H(LI);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class DI extends kt {
  constructor(t) {
    super(t), this.scale = t.scale, t.offset ? this.offset = t.offset : this.offset = 0;
  }
  getConfig() {
    const t = {
      scale: this.scale,
      offset: this.offset
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  call(t, e) {
    return z(() => (t = mt(t), t.dtype !== "float32" && (t = fs(t, "float32")), U(G(t, this.scale), this.offset)));
  }
}
DI.className = "Rescaling";
H(DI);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const { resizeBilinear: uM, cropAndResize: dM } = Mo;
class MI extends kt {
  constructor(t) {
    super(t), this.height = t.height, this.width = t.width;
  }
  centerCrop(t, e, s, o, r, i, a, l) {
    return z(() => {
      let c, u = !1;
      const d = e / i, h = s / a, p = (o + e) / i, f = (r + s) / a, m = [d, h, p, f], g = [];
      t.rank === 3 ? (u = !0, c = ys([t])) : c = t;
      for (let I = 0; I < c.shape[0]; I++)
        g.push(m);
      const b = De(g, [g.length, 4]), x = Zi(0, g.length, 1, "int32"), y = dM(c, b, x, [o, r], "nearest");
      return fs(u ? mt(Jo(y)) : y, l);
    });
  }
  upsize(t, e, s, o) {
    return z(() => {
      const r = uM(t, [e, s]);
      return fs(r, o);
    });
  }
  call(t, e) {
    return z(() => {
      const s = mt(t), o = s.dtype, r = s.shape, i = r[r.length - 3], a = r[r.length - 2];
      let l = 0;
      i !== this.height && (l = Math.floor((i - this.height) / 2));
      let c = 0;
      return a !== this.width && (c = Math.floor((a - this.width) / 2), c === 0 && (c = 1)), l >= 0 && c >= 0 ? this.centerCrop(s, l, c, this.height, this.width, i, a, o) : this.upsize(t, this.height, this.width, o);
    });
  }
  getConfig() {
    const t = {
      height: this.height,
      width: this.width
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = t.length - 3, s = t.length - 2;
    return t[e] = this.height, t[s] = this.width, t;
  }
}
MI.className = "CenterCrop";
H(MI);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function hM(n, t, e, s) {
  let o = mt(n);
  if (o.dtype !== "int32" && (o = fs(o, "int32")), t === "int")
    return o;
  const r = o.shape;
  if (o.rank === 0 && (o = tn(o, -1)), t === "oneHot" && o.shape[o.shape.length - 1] !== 1 && (o = tn(o, -1)), o.rank > 2)
    throw new L(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${r} which would result in output rank ${o.rank}.`);
  const i = ["multiHot", "oneHot"].includes(t), a = o;
  let l;
  if (typeof s < "u" && t === "count" ? l = jg(a, s, e, i) : l = jg(a, [], e, i), t !== "tfIdf")
    return l;
  if (s)
    return G(l, s);
  throw new L("When outputMode is 'tfIdf', weights must be provided.");
}
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class zI extends kt {
  constructor(t) {
    super(t), this.numTokens = t.numTokens, t.outputMode ? this.outputMode = t.outputMode : this.outputMode = "multiHot";
  }
  getConfig() {
    const t = {
      numTokens: this.numTokens,
      outputMode: this.outputMode
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  computeOutputShape(t) {
    return t = Et(t), t == null ? [this.numTokens] : this.outputMode === "oneHot" && t[t.length - 1] !== 1 ? (t.push(this.numTokens), t) : (t[t.length - 1] = this.numTokens, t);
  }
  call(t, e) {
    return z(() => {
      t = mt(t), t.dtype !== "int32" && (t = fs(t, "int32"));
      let s;
      if (typeof e.countWeights < "u") {
        if (this.outputMode !== "count")
          throw new L(`countWeights is not used when outputMode !== count.
              Received countWeights=${e.countWeights}`);
        s = mt(e.countWeights);
      }
      const o = Qn(t), r = xc(t), i = dn(this.numTokens, o).bufferSync().get(0), a = cr(r, 0).bufferSync().get(0);
      if (!(i && a))
        throw new L(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);
      return hM(t, this.outputMode, this.numTokens, s);
    });
  }
}
zI.className = "CategoryEncoding";
H(zI);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const pM = ["bilinear", "nearest"], L0 = new Set(pM);
class FI extends kt {
  constructor(t) {
    if (super(t), this.height = t.height, this.width = t.width, t.interpolation)
      if (L0.has(t.interpolation))
        this.interpolation = t.interpolation;
      else
        throw new L(`Invalid interpolation parameter: ${t.interpolation} is not implemented`);
    else
      this.interpolation = "bilinear";
    this.cropToAspectRatio = Boolean(t.cropToAspectRatio);
  }
  computeOutputShape(t) {
    t = Et(t);
    const e = t[2];
    return [this.height, this.width, e];
  }
  getConfig() {
    const t = {
      height: this.height,
      width: this.width,
      interpolation: this.interpolation,
      cropToAspectRatio: this.cropToAspectRatio
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  call(t, e) {
    return z(() => {
      const s = [this.height, this.width];
      if (this.interpolation === "bilinear")
        return Mo.resizeBilinear(t, s, !this.cropToAspectRatio);
      if (this.interpolation === "nearest")
        return Mo.resizeNearestNeighbor(t, s, !this.cropToAspectRatio);
      throw new Error(`Interpolation is ${this.interpolation} but only ${[...L0]} are supported`);
    });
  }
}
FI.className = "Resizing";
H(FI);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fM = V();
fM.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, (n) => {
  n && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var D0;
(function(n) {
  n[n.DT_INVALID = 0] = "DT_INVALID", n[n.DT_FLOAT = 1] = "DT_FLOAT", n[n.DT_DOUBLE = 2] = "DT_DOUBLE", n[n.DT_INT32 = 3] = "DT_INT32", n[n.DT_UINT8 = 4] = "DT_UINT8", n[n.DT_INT16 = 5] = "DT_INT16", n[n.DT_INT8 = 6] = "DT_INT8", n[n.DT_STRING = 7] = "DT_STRING", n[n.DT_COMPLEX64 = 8] = "DT_COMPLEX64", n[n.DT_INT64 = 9] = "DT_INT64", n[n.DT_BOOL = 10] = "DT_BOOL", n[n.DT_QINT8 = 11] = "DT_QINT8", n[n.DT_QUINT8 = 12] = "DT_QUINT8", n[n.DT_QINT32 = 13] = "DT_QINT32", n[n.DT_BFLOAT16 = 14] = "DT_BFLOAT16", n[n.DT_QINT16 = 15] = "DT_QINT16", n[n.DT_QUINT16 = 16] = "DT_QUINT16", n[n.DT_UINT16 = 17] = "DT_UINT16", n[n.DT_COMPLEX128 = 18] = "DT_COMPLEX128", n[n.DT_HALF = 19] = "DT_HALF", n[n.DT_RESOURCE = 20] = "DT_RESOURCE", n[n.DT_VARIANT = 21] = "DT_VARIANT", n[n.DT_UINT32 = 22] = "DT_UINT32", n[n.DT_UINT64 = 23] = "DT_UINT64", n[n.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", n[n.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", n[n.DT_INT32_REF = 103] = "DT_INT32_REF", n[n.DT_UINT8_REF = 104] = "DT_UINT8_REF", n[n.DT_INT16_REF = 105] = "DT_INT16_REF", n[n.DT_INT8_REF = 106] = "DT_INT8_REF", n[n.DT_STRING_REF = 107] = "DT_STRING_REF", n[n.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", n[n.DT_INT64_REF = 109] = "DT_INT64_REF", n[n.DT_BOOL_REF = 110] = "DT_BOOL_REF", n[n.DT_QINT8_REF = 111] = "DT_QINT8_REF", n[n.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", n[n.DT_QINT32_REF = 113] = "DT_QINT32_REF", n[n.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", n[n.DT_QINT16_REF = 115] = "DT_QINT16_REF", n[n.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", n[n.DT_UINT16_REF = 117] = "DT_UINT16_REF", n[n.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", n[n.DT_HALF_REF = 119] = "DT_HALF_REF", n[n.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", n[n.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", n[n.DT_UINT32_REF = 122] = "DT_UINT32_REF", n[n.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(D0 || (D0 = {}));
var M0;
(function(n) {
  (function(t) {
    t[t.LEGACY = 0] = "LEGACY", t[t.V1 = 1] = "V1", t[t.V2 = 2] = "V2";
  })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(M0 || (M0 = {}));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function mM(n, t) {
  return Gc(n, t);
}
function Gc(n, t, e = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set()) {
  if (n == null)
    return null;
  if (typeof Blob == "function" && n instanceof Blob)
    return n.slice();
  if (s.has(n))
    throw new Error("Circular references are not supported.");
  if (e.has(n))
    return e.get(n);
  const o = t(n);
  if (o.recurse && o.value !== null)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (o.recurse)
    if (Ar(n)) {
      const r = Array.isArray(n) ? [] : {};
      s.add(n);
      for (const i in n) {
        const a = n[i], l = Gc(a, t, e, s);
        r[i] = l;
      }
      return s.delete(n), n.__proto__ && (r.__proto__ = n.__proto__), r;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${n}`);
  else
    return e.set(n, o.value), o.value;
}
function gM(n, t = VI) {
  return WI(n, t);
}
function WI(n, t, e = /* @__PURE__ */ new Set()) {
  const s = n[0];
  if (e.has(s))
    throw new Error("Circular references are not supported.");
  const o = t(n);
  if (o.recurse && o.value !== null)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (o.recurse)
    if (Ar(s)) {
      const r = Array.isArray(s) ? [] : {};
      e.add(s);
      for (const i in s) {
        const a = n.map((c) => c[i]), l = WI(a, t, e);
        r[i] = l;
      }
      return e.delete(s), r;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${s}`);
  else
    return o.value;
}
function VI(n) {
  return n === null ? null : Ar(n[0]) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
async function _I(n, t) {
  const e = /* @__PURE__ */ new Map();
  Gc(n, t, e);
  for (const o of Array.from(e.keys())) {
    const r = e.get(o);
    if (la(r)) {
      const i = await r;
      e.set(o, i);
    }
  }
  return Gc(n, t, e);
}
function Ar(n) {
  let t = !1;
  if (V().get("IS_BROWSER"))
    t = n instanceof TextDecoder;
  else {
    const { StringDecoder: e } = require("string_decoder");
    t = n instanceof e;
  }
  return n != null && !ArrayBuffer.isView(n) && (Array.isArray(n) || typeof n == "object" && !(n instanceof Mt) && !(n instanceof Promise) && !t);
}
function bM(n) {
  return n == null || xM(n) || Array.isArray(n) || typeof n == "object" && n instanceof Mt || wn(n);
}
function xM(n) {
  return n === null || typeof n != "object" && typeof n != "function";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function yM(n) {
  return mM(n, wM);
}
function wM(n) {
  return n instanceof Mt ? { value: n.clone(), recurse: !1 } : Ar(n) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class AI {
  /**
   * Constructs a `RingBuffer`.
   * @param capacity The number of items that the buffer can accomodate.
   */
  constructor(t) {
    if (this.capacity = t, this.begin = 0, this.end = 0, t == null)
      throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (t < 1)
      throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(t), this.doubledCapacity = 2 * t;
  }
  /**
   * Map any index into the range 0 <= index < 2*capacity.
   */
  wrap(t) {
    for (; t < 0; )
      t += this.doubledCapacity;
    return t % this.doubledCapacity;
  }
  get(t) {
    if (t < 0)
      throw new RangeError("Can't get item at a negative index.");
    return this.data[t % this.capacity];
  }
  set(t, e) {
    if (t < 0)
      throw new RangeError("Can't set item at a negative index.");
    this.data[t % this.capacity] = e;
  }
  /**
   * Returns the current number of items in the buffer.
   */
  length() {
    let t = this.end - this.begin;
    return t < 0 && (t = this.doubledCapacity + t), t;
  }
  /**
   * Reports whether the buffer is full.
   * @returns true if the number of items in the buffer equals its capacity, and
   *   false otherwise.
   */
  isFull() {
    return this.length() === this.capacity;
  }
  /**
   * Reports whether the buffer is empty.
   * @returns true if the number of items in the buffer equals zero, and
   *   false otherwise.
   */
  isEmpty() {
    return this.length() === 0;
  }
  /**
   * Adds an item to the end of the buffer.
   */
  push(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.set(this.end, t), this.end = this.wrap(this.end + 1);
  }
  /**
   * Adds many items to the end of the buffer, in order.
   */
  pushAll(t) {
    for (const e of t)
      this.push(e);
  }
  /**
   * Removes and returns the last item in the buffer.
   */
  pop() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    const t = this.get(this.end);
    return this.set(this.end, void 0), t;
  }
  /**
   * Adds an item to the beginning of the buffer.
   */
  unshift(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, t);
  }
  /**
   * Removes and returns the first item in the buffer.
   */
  shift() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const t = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), t;
  }
  /**
   * Removes and returns a specific item in the buffer, and moves the last item
   * to the vacated slot.  This is useful for implementing a shuffling stream.
   * Note that this operation necessarily scrambles the original order.
   *
   * @param relativeIndex: the index of the item to remove, relative to the
   *   first item in the buffer (e.g., hiding the ring nature of the underlying
   *   storage).
   */
  shuffleExcise(t) {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const e = this.wrap(this.begin + t), s = this.get(e);
    return this.set(e, this.pop()), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class yd extends AI {
  /**
   * Constructs a `GrowingRingBuffer`.
   */
  constructor() {
    super(yd.INITIAL_CAPACITY);
  }
  isFull() {
    return !1;
  }
  push(t) {
    super.isFull() && this.expand(), super.push(t);
  }
  unshift(t) {
    super.isFull() && this.expand(), super.unshift(t);
  }
  /**
   * Doubles the capacity of the buffer.
   */
  expand() {
    const t = this.capacity * 2, e = new Array(t), s = this.length();
    for (let o = 0; o < s; o++)
      e[o] = this.get(this.wrap(this.begin + o));
    this.data = e, this.capacity = t, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = s;
  }
}
yd.INITIAL_CAPACITY = 32;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function OI(n) {
  return new kM(n);
}
function IM(n) {
  return new SM(n);
}
function CM(n, t) {
  return new XI(n, t);
}
function vM(n, t = Qs.FAIL) {
  return new zM(n, t);
}
class Ye {
  /**
   * Collect all remaining elements of a bounded stream into an array.
   * Obviously this will succeed only for small streams that fit in memory.
   * Useful for testing.
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  async toArray() {
    const t = [];
    let e = await this.next();
    for (; !e.done; )
      t.push(e.value), e = await this.next();
    return t;
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  async toArrayForTest() {
    const t = this.prefetch(100), e = [];
    let s = await t.next();
    for (; !s.done; )
      e.push(s.value), s = await t.next();
    return e;
  }
  /**
   * Draw items from the stream until it is exhausted.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  async resolveFully() {
    let t = await this.next();
    for (; !t.done; )
      t = await this.next();
  }
  /**
   * Draw items from the stream until it is exhausted, or a predicate fails.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  async resolveWhile(t) {
    let e = await this.next(), s = t(e.value);
    for (; !e.done && s; )
      e = await this.next(), s = t(e.value);
  }
  /**
   * Handles errors thrown on this stream using a provided handler function.
   *
   * @param handler A function that handles any `Error` thrown during a `next()`
   *   call and returns true if the stream should continue (dropping the failed
   *   call) or false if the stream should quietly terminate.  If the handler
   *   itself throws (or rethrows) an `Error`, that will be propagated.
   *
   * @returns A `LazyIterator` of elements passed through from upstream,
   *   possibly filtering or terminating on upstream `next()` calls that
   *   throw an `Error`.
   */
  handleErrors(t) {
    return new LM(this, t);
  }
  // TODO(soergel): Implement reduce() etc.
  /**
   * Filters this stream according to `predicate`.
   *
   * @param predicate A function mapping a stream element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `LazyIterator` of elements for which the predicate was true.
   */
  filter(t) {
    return new EM(this, t);
  }
  /**
   * Maps this stream through a 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  map(t) {
    return new GM(this, t);
  }
  /**
   * Maps this stream through an async 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a `Promise` for a
   *   transformed stream element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  mapAsync(t) {
    return new z0(this, t);
  }
  /**
   * Maps this stream through a 1-to-1 transform, forcing serial execution.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  serialMapAsync(t) {
    return new z0(this, t).serial();
  }
  /**
   * Maps this stream through a 1-to-many transform.
   *
   * @param transform A function mapping a stream element to an array of
   *   transformed elements.
   *
   * @returns A `DataStream` of transformed elements.
   */
  flatmap(t) {
    return new MM(this, t);
  }
  /**
   * Apply a function to every element of the stream.
   *
   * @param f A function to apply to each stream element.
   */
  async forEachAsync(t) {
    return this.map(t).resolveFully();
  }
  /**
   * Apply a function to every element of the stream, forcing serial execution.
   *
   * @param f A function to apply to each stream element.  Should return 'true'
   *   to indicate that the stream should continue, or 'false' to cause it to
   *   terminate.
   */
  async serialForEach(t) {
    return this.serialMapAsync(t).resolveWhile((e) => e === !0);
  }
  /**
   * Groups elements into batches, represented as arrays of elements.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "Row-major" means that the resulting batch is simply a collection of
   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major
   * form, which is needed for vectorized computation.
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `LazyIterator` of batches of elements, represented as arrays
   *   of the original element type.
   */
  rowMajorBatch(t, e = !0) {
    return new $M(this, t, e);
  }
  /**
   * Groups elements into batches, represented in column-major form.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "column-major" means that the resulting batch is a (potentially
   * nested) structure representing the columns.  Each column entry, then,
   * contains a collection of the values found in that column for a range of
   * input elements.  This representation allows for vectorized computation, in
   * contrast to the row-major form.
   *
   * The inputs should all have the same nested structure (i.e., of arrays and
   * dicts).  The result is a single object with the same nested structure,
   * where the leaves are arrays collecting the values of the inputs at that
   * location (or, optionally, the result of a custom function applied to those
   * arrays).
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @param zipFn: (optional) A function that expects an array of elements at a
   *   single node of the object tree, and returns a `DeepMapResult`.  The
   *   `DeepMapResult` either provides a result value for that node (i.e.,
   *   representing the subtree), or indicates that the node should be processed
   *   recursively.  The default zipFn recurses as far as possible and places
   *   arrays at the leaves.
   * @returns A `LazyIterator` of batches of elements, represented as an object
   *   with collections at the leaves.
   */
  columnMajorBatch(t, e = !0, s = VI) {
    return this.rowMajorBatch(t, e).map((r) => gM(r, s));
  }
  /**
   * Concatenate this `LazyIterator` with another.
   *
   * @param iterator A `LazyIterator` to be concatenated onto this one.
   * @param baseErrorHandler An optional function that can intercept `Error`s
   *   raised during a `next()` call on the base stream.  This function can
   *   decide whether the error should be propagated, whether the error should
   *   be ignored, or whether the base stream should be terminated.
   * @returns A `LazyIterator`.
   */
  concatenate(t, e) {
    return new XI(OI([this, t]), e);
  }
  /**
   * Limits this stream to return at most `count` items.
   *
   * @param count The maximum number of items to provide from the stream. If
   * a negative or undefined value is given, the entire stream is returned
   *   unaltered.
   */
  take(t) {
    return t < 0 || t == null ? this : new RM(this, t);
  }
  /**
   * Skips the first `count` items in this stream.
   *
   * @param count The number of items to skip.  If a negative or undefined
   * value is given, the entire stream is returned unaltered.
   */
  skip(t) {
    return t < 0 || t == null ? this : new NM(this, t);
  }
  /**
   * Prefetch the first `bufferSize` items in this stream.
   *
   * Note this prefetches Promises, but makes no guarantees about when those
   * Promises resolve.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   */
  prefetch(t) {
    return new PI(this, t);
  }
  // TODO(soergel): deep sharded shuffle, where supported
  /**
   * Randomly shuffles the elements of this stream.
   *
   * @param bufferSize: An integer specifying the number of elements from
   * this stream from which the new stream will sample.
   * @param seed: (Optional.) An integer specifying the random seed that
   * will be used to create the distribution.
   */
  shuffle(t, e) {
    return new FM(this, t, e);
  }
  /**
   * Force an iterator to execute serially: each next() call will await the
   * prior one, so that they cannot execute concurrently.
   */
  serial() {
    return new TM(this);
  }
}
class kM extends Ye {
  constructor(t) {
    super(), this.items = t, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length)
      return { value: null, done: !0 };
    const t = this.items[this.trav];
    return this.trav++, { value: yM(t), done: !1 };
  }
}
class SM extends Ye {
  constructor(t) {
    super(), this.nextFn = t;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (t) {
      throw t.message = `Error thrown while iterating through a dataset: ${t.message}`, t;
    }
  }
}
class TM extends Ye {
  constructor(t) {
    super(), this.upstream = t, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
}
class NM extends Ye {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      const t = await this.upstream.next();
      if (t.done)
        return t;
      yt(t.value);
    }
    return this.upstream.next();
  }
}
class RM extends Ye {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: !0 } : this.upstream.next();
  }
}
class $M extends Ye {
  constructor(t, e, s = !0) {
    super(), this.upstream = t, this.batchSize = e, this.enableSmallLastBatch = s, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    const t = [];
    for (; t.length < this.batchSize; ) {
      const e = await this.upstream.next();
      if (e.done)
        return this.enableSmallLastBatch && t.length > 0 ? { value: t, done: !1 } : { value: null, done: !0 };
      t.push(e.value);
    }
    return { value: t, done: !1 };
  }
}
class EM extends Ye {
  constructor(t, e) {
    super(), this.upstream = t, this.predicate = e, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      const t = await this.upstream.next();
      if (t.done || this.predicate(t.value))
        return t;
      yt(t.value);
    }
  }
}
class GM extends Ye {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = Ls(t.value), s = this.transform(t.value), o = Ls(s);
    for (const r of e)
      Uu(r, o) || r.dispose();
    return { value: s, done: !1 };
  }
}
class LM extends Ye {
  constructor(t, e) {
    super(), this.upstream = t, this.handler = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; )
      try {
        return await this.upstream.next();
      } catch (t) {
        if (!this.handler(t))
          return { value: null, done: !0 };
      }
  }
}
class z0 extends Ye {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = Ls(t.value), s = await this.transform(t.value), o = Ls(s);
    for (const r of e)
      Uu(r, o) || r.dispose();
    return { value: s, done: !1 };
  }
}
class DM extends Ye {
  constructor() {
    super(), this.outputQueue = new yd(), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; )
      if (!await this.pump())
        return { value: null, done: !0 };
    return { value: this.outputQueue.shift(), done: !1 };
  }
}
class MM extends DM {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    const t = await this.upstream.next();
    if (t.done)
      return !1;
    const e = Ls(t.value), s = this.transform(t.value), o = Ls(s);
    this.outputQueue.pushAll(s);
    for (const r of e)
      Uu(r, o) || r.dispose();
    return !0;
  }
}
class XI extends Ye {
  constructor(t, e) {
    super(), this.baseErrorHandler = e, this.lastRead = null, this.iterator = null, this.moreIterators = t;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(t) {
    if (await t, this.iterator == null) {
      const s = await this.moreIterators.next();
      if (s.done)
        return { value: null, done: !0 };
      this.iterator = s.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    const e = await this.iterator.next();
    return e.done ? (this.iterator = null, this.readFromChain(t)) : e;
  }
}
var Qs;
(function(n) {
  n[n.FAIL = 0] = "FAIL", n[n.SHORTEST = 1] = "SHORTEST", n[n.LONGEST = 2] = "LONGEST";
})(Qs || (Qs = {}));
class zM extends Ye {
  constructor(t, e = Qs.FAIL) {
    super(), this.iterators = t, this.mismatchMode = e, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(t) {
    await t;
    let e = 0, s = 0;
    function o(i) {
      return i instanceof Ye ? {
        value: i.next().then((l) => (e++, l.done && s++, l.value)),
        recurse: !1
      } : { value: null, recurse: !0 };
    }
    const r = await _I(this.iterators, o);
    if (e === s)
      return { value: null, done: !0 };
    if (s > 0)
      switch (this.mismatchMode) {
        case Qs.FAIL:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case Qs.SHORTEST:
          return { value: null, done: !0 };
        case Qs.LONGEST:
      }
    return this.count++, { value: r, done: !1 };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
}
class PI extends Ye {
  constructor(t, e) {
    super(), this.upstream = t, this.bufferSize = e, this.buffer = new AI(e);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  /**
   * Refill the prefetch buffer.  Returns only after the buffer is full, or
   * the upstream source is exhausted.
   */
  refill() {
    for (; !this.buffer.isFull(); ) {
      const t = this.upstream.next();
      this.buffer.push(t);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
}
class FM extends PI {
  constructor(t, e, s) {
    super(t, e), this.upstream = t, this.windowSize = e, this.upstreamExhausted = !1, this.random = ei.alea(s || Te().toString()), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(t) {
    return Math.floor(this.random() * t);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      const t = this.chooseIndex(), e = await this.buffer.shuffleExcise(t);
      if (e.done)
        this.upstreamExhausted = !0;
      else
        return this.refill(), e;
    }
    return { value: null, done: !0 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class dg {
  constructor() {
    this.size = null;
  }
  // TODO(soergel): Make Datasets report whether repeated iterator() calls
  // produce the same result (e.g., reading from a file) or different results
  // (e.g., from the webcam).  Currently we don't make this distinction but it
  // could be important for the user to know.
  // abstract isDeterministic(): boolean;
  /**
   * Groups elements into batches.
   *
   * It is assumed that each of the incoming dataset elements has the same
   * structure -- i.e. the same set of keys at each location in an object
   * hierarchy.  For each key, the resulting `Dataset` provides a batched
   * element collecting all of the incoming values for that key.
   *
   *  * Incoming primitives are grouped into a 1-D Tensor.
   *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is
   *    the batch dimension.
   *  * Incoming arrays are converted to Tensor and then batched.
   *  * A nested array is interpreted as an n-D Tensor, so the batched result
   *    has n+1 dimensions.
   *  * An array that cannot be converted to Tensor produces an error.
   *
   * If an array should not be batched as a unit, it should first be converted
   * to an object with integer keys.
   *
   * Here are a few examples:
   *
   * Batch a dataset of numbers:
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);
   * await a.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of arrays:
   * ```js
   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);
   * await b.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of objects:
   * ```js
   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},
   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},
   *   {a: 8, b: 18}]).batch(4);
   * await c.forEachAsync(e => {
   *   console.log('{');
   *   for(var key in e) {
   *     console.log(key+':');
   *     e[key].print();
   *   }
   *   console.log('}');
   * })
   * ```
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `Dataset`, from which a stream of batches can be obtained.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  batch(t, e = !0) {
    const s = this;
    k(t > 0, () => `batchSize needs to be positive, but it is
      ${t}`);
    let o;
    return this.size === 1 / 0 || this.size == null ? o = this.size : e ? o = Math.ceil(this.size / t) : o = Math.floor(this.size / t), Tn(async () => (await s.iterator()).columnMajorBatch(t, e, WM), o);
  }
  /**
   * Concatenates this `Dataset` with another.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * const b = tf.data.array([4, 5, 6]);
   * const c = a.concatenate(b);
   * await c.forEachAsync(e => console.log(e));
   * ```
   *
   * @param dataset A `Dataset` to be concatenated onto this one.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  concatenate(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 || t.size === 1 / 0 ? s = 1 / 0 : this.size != null && t.size != null ? s = this.size + t.size : s = null, Tn(async () => (await e.iterator()).concatenate(await t.iterator()), s);
  }
  /**
   * Filters this dataset according to `predicate`.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
   *   .filter(x => x%2 === 0);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param predicate A function mapping a dataset element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `Dataset` of elements for which the predicate was true.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  filter(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 ? s = 1 / 0 : s = null, Tn(async () => (await e.iterator()).filter((o) => z(() => t(o))), s);
  }
  /**
   * Apply a function to every element of the dataset.
   *
   * After the function is applied to a dataset element, any Tensors contained
   * within that element are disposed.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param f A function to apply to each dataset element.
   * @returns A `Promise` that resolves after all elements have been processed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  async forEachAsync(t) {
    return (await this.iterator()).forEachAsync(t);
  }
  /**
   * Maps this dataset through a 1-to-1 transform.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).map(x => x*x);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param transform A function mapping a dataset element to a transformed
   *   dataset element.
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  map(t) {
    const e = this;
    return Tn(async () => (await e.iterator()).map((s) => z(() => t(s))), this.size);
  }
  /**
   * Maps this dataset through an async 1-to-1 transform.
   *
   * ```js
   * const a =
   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){
   *    setTimeout(() => {
   *      resolve(x * x);
   *    }, Math.random()*1000 + 500);
   *  }));
   * console.log(await a.toArray());
   * ```
   *
   * @param transform A function mapping a dataset element to a `Promise` for a
   *   transformed dataset element.  This transform is responsible for disposing
   *   any intermediate `Tensor`s, i.e. by wrapping its computation in
   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous
   *   `map()` case).
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  mapAsync(t) {
    const e = this;
    return Tn(async () => (await e.iterator()).mapAsync(t), this.size);
  }
  /**
   *  Creates a `Dataset` that prefetches elements from this dataset.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  prefetch(t) {
    if (t == null)
      throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    const e = this;
    return Tn(async () => (await e.iterator()).prefetch(t), this.size);
  }
  /**
   * Repeats this dataset `count` times.
   *
   * NOTE: If this dataset is a function of global state (e.g. a random number
   * generator), then different repetitions may produce different elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).repeat(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: (Optional) An integer, representing the number of times
   *   the dataset should be repeated. The default behavior (if `count` is
   *   `undefined` or negative) is for the dataset be repeated indefinitely.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  repeat(t) {
    const e = this;
    let s;
    return this.size != null && t > 0 ? s = this.size * t : t === 0 ? s = 0 : this.size != null && (t === void 0 || t < 0) ? s = 1 / 0 : s = null, Tn(async () => {
      const o = IM(async () => ({ value: await e.iterator(), done: !1 }));
      return CM(o.take(t));
    }, s);
  }
  /**
   * Creates a `Dataset` that skips `count` initial elements from this dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be skipped
   *   to form the new dataset.  If `count` is greater than the size of this
   *   dataset, the new dataset will contain no elements.  If `count`
   *   is `undefined` or negative, skips the entire dataset.
   *
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  skip(t) {
    const e = this;
    let s;
    return this.size != null && t >= 0 && this.size >= t ? s = this.size - t : this.size != null && (this.size < t || t === void 0 || t < 0) ? s = 0 : s = null, Tn(async () => (await e.iterator()).skip(t), s);
  }
  /**
   * Pseudorandomly shuffles the elements of this dataset. This is done in a
   * streaming manner, by sampling from a given number of prefetched elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param bufferSize: An integer specifying the number of elements from this
   *   dataset from which the new dataset will sample.
   * @param seed: (Optional) An integer specifying the random seed that will
   *   be used to create the distribution.
   * @param reshuffleEachIteration: (Optional) A boolean, which if true
   *   indicates that the dataset should be pseudorandomly reshuffled each time
   *   it is iterated over. If false, elements will be returned in the same
   *   shuffled order on each iteration. (Defaults to `true`.)
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  shuffle(t, e, s = !0) {
    if (t == null || t < 0)
      throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    const o = this, r = ei.alea(e || Te().toString());
    return Tn(async () => {
      let i = r.int32();
      return s && (i += r.int32()), (await o.iterator()).shuffle(t, i.toString());
    }, this.size);
  }
  /**
   * Creates a `Dataset` with at most `count` initial elements from this
   * dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be taken
   *   to form the new dataset.  If `count` is `undefined` or negative, or if
   *   `count` is greater than the size of this dataset, the new dataset will
   *   contain all elements of this dataset.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  take(t) {
    const e = this;
    let s;
    return this.size != null && this.size > t ? s = t : this.size != null && this.size <= t ? s = this.size : s = null, Tn(async () => (await e.iterator()).take(t), s);
  }
  /**
   * Collect all elements of this dataset into an array.
   *
   * Obviously this will succeed only for small datasets that fit in memory.
   * Useful for testing and generally should be avoided if possible.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);
   * console.log(await a.toArray());
   * ```
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  async toArray() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   */
  async toArrayForTest() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
}
dg.MAX_BUFFER_SIZE = 1e4;
function Tn(n, t = null) {
  return new class extends dg {
    constructor() {
      super(...arguments), this.size = t;
    }
    /*
     * Provide a new stream of elements.  Note this will also start new streams
     * from any underlying `Dataset`s.
     */
    async iterator() {
      return n();
    }
  }();
}
function f6(n) {
  return Tn(async () => OI(n), n.length);
}
function m6(n) {
  if (!Ar(n))
    throw new Error("The argument to zip() must be an object or array.");
  let t;
  if (Array.isArray(n))
    for (let e = 0; e < n.length; e++)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  else if (n instanceof Object)
    for (const e in n)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  return Tn(async () => {
    const e = await _I(n, (s) => {
      if (s instanceof dg)
        return { value: s.iterator(), recurse: !1 };
      if (Ar(s))
        return { value: null, recurse: !0 };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return vM(e, Qs.SHORTEST);
  }, t);
}
function WM(n) {
  if (n === null)
    return null;
  const t = n[0];
  return bM(t) ? { value: VM(n), recurse: !1 } : { value: null, recurse: !0 };
}
function VM(n) {
  if (n.length === 0)
    throw new Error("Can't make a batch of zero elements.");
  return n[0] instanceof Mt ? ys(n) : De(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function it(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && k(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the CPU backend.`);
  });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _M = $1;
class wd extends Ep {
  constructor() {
    super(), this.blockSize = 48, this.firstUse = !0, this.data = new dx(this, Ot());
  }
  nextDataId() {
    return wd.nextDataId++;
  }
  write(t, e, s) {
    this.firstUse && (this.firstUse = !1, V().get("IS_NODE") && fn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    const o = { id: this.nextDataId() };
    return this.data.set(o, { values: t, dtype: s, refCount: 1 }), o;
  }
  /**
   * Create a data bucket in cpu backend.
   * @param shape Shape of the `TensorInfo`.
   * @param dtype DType of the `TensorInfo`.
   * @param values The value of the `TensorInfo` stored as a flattened array.
   */
  makeTensorInfo(t, e, s) {
    let o;
    if (e === "string" && s != null && s.length > 0 && Qr(s[0])) {
      const r = s.map((i) => Es(i));
      o = this.write(r, t, e);
    } else
      o = this.write(s, t, e);
    return { dataId: o, shape: t, dtype: e };
  }
  /** Return refCount of a `TensorData`. */
  refCount(t) {
    return this.data.has(t) ? this.data.get(t).refCount : 0;
  }
  /** Increase refCount of a `TensorData`. */
  incRef(t) {
    const e = this.data.get(t);
    e.refCount++;
  }
  /** Decrease refCount of a `TensorData`. */
  decRef(t) {
    if (this.data.has(t)) {
      const e = this.data.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, o, r) {
    this.data.set(t, { values: e, dtype: o, refCount: r });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(t) {
    return this.readSync(t);
  }
  readSync(t) {
    const { dtype: e, complexTensorInfos: s } = this.data.get(t);
    if (e === "complex64") {
      const o = this.readSync(s.real.dataId), r = this.readSync(s.imag.dataId);
      return Ds(o, r);
    }
    return xx(this.data.get(t).values, e);
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((o) => Gs(o));
        return vt(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return vt(t.shape, t.dtype, e);
  }
  makeOutput(t, e, s) {
    return Ot().makeTensorFromTensorInfo(this.makeTensorInfo(e, s, t), this);
  }
  /**
   * Dispose the memory if the dataId has 0 refCount. Return true if the memory
   * is released or memory is not managed in this backend, false if memory is
   * not cleared.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(t, e = !1) {
    if (this.data.has(t)) {
      if (this.data.get(t).refCount--, !e && this.data.get(t).refCount > 0)
        return !1;
      const { complexTensorInfos: s } = this.data.get(t);
      s != null && (this.disposeData(s.real.dataId, !0), this.disposeData(s.imag.dataId, !0)), this.data.delete(t);
    }
    return !0;
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  async time(t) {
    const e = Te();
    return t(), { kernelMs: Te() - e };
  }
  memory() {
    return {
      // Unreliable due to automatic gc. The numbers above are cumulative.
      unreliable: !0,
      reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]
    };
  }
  where(t) {
    it([t], "where");
    const e = this.readSync(t.dataId);
    return _M(t.shape, e);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return super.epsilon();
  }
}
wd.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZI(n) {
  const t = new Float32Array(n.length);
  for (let e = 0; e < n.length; ++e)
    t[e] = Math.abs(n[e]);
  return t;
}
const AM = (n) => {
  const { x: t } = n.inputs, e = n.backend;
  it(t, "abs");
  let s = new Float32Array(X(t.shape));
  const o = e.data.get(t.dataId).values;
  return s = ZI(o), e.makeOutput(s, t.shape, t.dtype);
}, OM = {
  kernelName: Uc,
  backendName: "cpu",
  kernelFunc: AM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function he(n) {
  return (t, e, s, o, r) => {
    const i = bt(t, e), a = i.length, l = dt(i), c = X(i), u = Ie(r, c), d = t.length, h = e.length, p = dt(t), f = dt(e), m = Yo(t, i), g = Yo(e, i);
    if (m.length + g.length === 0)
      for (let b = 0; b < u.length; ++b)
        u[b] = n(s[b % s.length], o[b % o.length]);
    else
      for (let b = 0; b < u.length; ++b) {
        const x = ar(b, a, l), w = x.slice(-d);
        m.forEach((v) => w[v] = 0);
        const y = Yn(w, d, p), I = x.slice(-h);
        g.forEach((v) => I[v] = 0);
        const C = Yn(I, h, f);
        u[b] = n(s[y], o[C]);
      }
    return [u, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function en(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: o } = t, r = e.data.get(s.dataId).values, i = e.data.get(o.dataId).values, a = e.makeTensorInfo(s.shape, "complex64"), l = e.data.get(a.dataId);
  return l.complexTensorInfos = {
    real: e.makeTensorInfo(s.shape, "float32", r),
    imag: e.makeTensorInfo(o.shape, "float32", i)
  }, a;
}
const XM = {
  kernelName: Xp,
  backendName: "cpu",
  kernelFunc: en
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lc(n, t, e = "float32") {
  if (e === "complex64") {
    const o = Lc(n, t, "float32"), r = Lc(n, t, "float32");
    return en({ inputs: { real: o, imag: r }, backend: n });
  }
  const s = Re(X(t), e);
  return n.makeTensorInfo(t, e, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ws(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const PM = {
  kernelName: $a,
  backendName: "cpu",
  kernelFunc: ws
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function er(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.data.get(s.dataId).complexTensorInfos.real, r = e.data.get(o.dataId).values;
  return e.makeTensorInfo(o.shape, o.dtype, r);
}
const ZM = {
  kernelName: hf,
  backendName: "cpu",
  kernelFunc: er
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KI(n, t, e, s) {
  if (s === "int32") {
    const o = Int32Array.from(n);
    return [t, "int32", o];
  }
  if (s === "bool") {
    const o = fo([0], e), [r, i] = he((a, l) => a !== l ? 1 : 0)(t, [], n, o, "bool");
    return [i, "bool", r];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
function po(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dtype: r } = s;
  if (r === "complex64") {
    if (o.dtype === "complex64")
      return ws({ inputs: { x: o }, backend: e });
    const u = Lc(e, o.shape, o.dtype), d = po({ inputs: { x: o }, backend: e, attrs: { dtype: "float32" } }), h = en({ inputs: { real: d, imag: u }, backend: e });
    return e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(d), h;
  }
  if (o.dtype === "complex64") {
    const u = er({ inputs: { input: o }, backend: e }), d = po({ inputs: { x: u }, backend: e, attrs: { dtype: r } });
    return e.disposeIntermediateTensorInfo(u), d;
  }
  if (!Dp(o.dtype, r)) {
    const u = ws({ inputs: { x: o }, backend: e });
    return { dataId: u.dataId, shape: u.shape, dtype: r };
  }
  const i = e.data.get(o.dataId).values, [a, l, c] = KI(i, o.shape, o.dtype, r);
  return e.makeTensorInfo(a, l, c);
}
const KM = {
  kernelName: ga,
  backendName: "cpu",
  kernelFunc: po
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ve(n, t, e, s) {
  return e == null ? ({ inputs: o, backend: r }) => {
    const { a: i, b: a } = o, l = r;
    it([i, a], n);
    const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, d = i.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      qo(c)
    ) : c, h = i.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      qo(u)
    ) : u, p = s || i.dtype, [f, m] = t(i.shape, a.shape, d, h, p);
    return l.makeTensorInfo(m, p, f);
  } : ({ inputs: o, backend: r }) => {
    const { a: i, b: a } = o, l = r;
    if (i.dtype === "complex64" || a.dtype === "complex64") {
      const c = po({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), u = l.data.get(c.dataId), d = u.complexTensorInfos.real, h = u.complexTensorInfos.imag, p = l.data.get(d.dataId).values, f = l.data.get(h.dataId).values, m = po({ inputs: { x: a }, backend: l, attrs: { dtype: "complex64" } }), g = l.data.get(m.dataId), b = g.complexTensorInfos.real, x = g.complexTensorInfos.imag, w = l.data.get(b.dataId).values, y = l.data.get(x.dataId).values, [I, C, v] = e(i.shape, a.shape, p, f, w, y), S = l.makeTensorInfo(v, "float32", I), N = l.makeTensorInfo(v, "float32", C), R = en({ inputs: { real: S, imag: N }, backend: l });
      return l.disposeIntermediateTensorInfo(c), l.disposeIntermediateTensorInfo(m), l.disposeIntermediateTensorInfo(S), l.disposeIntermediateTensorInfo(N), R;
    } else {
      const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, d = s || i.dtype, [h, p] = t(i.shape, a.shape, c, u, d);
      return l.makeTensorInfo(p, d, h);
    }
  };
}
function hg(n) {
  return (t, e, s, o, r, i) => {
    const a = bt(t, e), l = X(a), c = a.length, u = dt(a), d = Ie("float32", l), h = Ie("float32", l), p = Yo(t, a), f = Yo(e, a), m = Ds(s, o), g = Ds(r, i), b = t.length, x = dt(t), w = e.length, y = dt(e);
    if (p.length + f.length === 0)
      for (let I = 0; I < d.length; I++) {
        const C = I % m.length, v = I % g.length, S = n(m[C * 2], m[C * 2 + 1], g[v * 2], g[v * 2 + 1]);
        d[I] = S.real, h[I] = S.imag;
      }
    else
      for (let I = 0; I < d.length; I++) {
        const C = ar(I, c, u), v = C.slice(-b);
        p.forEach((F) => v[F] = 0);
        const S = Yn(v, b, x), N = C.slice(-w);
        f.forEach((F) => N[F] = 0);
        const R = Yn(N, w, y), $ = n(m[S * 2], m[S * 2 + 1], g[R * 2], g[R * 2 + 1]);
        d[I] = $.real, h[I] = $.imag;
      }
    return [d, h, a];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BI = he((n, t) => n + t), BM = hg((n, t, e, s) => ({ real: n + e, imag: t + s })), Or = ve(Jr, BI, BM), HM = {
  kernelName: Jr,
  backendName: "cpu",
  kernelFunc: Or
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pg(n, t, e, s, o) {
  const r = X(s), i = Re(o, e);
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= o || (r > 0 ? i[l] += t[a] : i[l] += 1);
  }
  return i;
}
function HI(n, t, e, s = !1) {
  const o = n.shape[0], r = n.shape[1], i = vt([o, e], t.dtype);
  for (let a = 0; a < o; a++)
    for (let l = 0; l < r; l++) {
      const c = n.get(a, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= e || (s ? i.set(1, a, c) : t.size > 0 ? i.set(i.get(a, c) + t.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
  return i;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Io(n) {
  return (t, e, s) => {
    const o = Ie(e, t.length);
    for (let r = 0; r < t.length; ++r)
      o[r] = n(t[r], s);
    return o;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zt(n, t, e) {
  return ({ inputs: s, attrs: o, backend: r }) => {
    const { x: i } = s;
    if (it(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = r, l = a.data.get(i.dataId).values, c = X(i.shape), u = e || i.dtype, d = ae(u, c);
    for (let h = 0; h < c; ++h)
      d[h] = t(l[h], o);
    return a.makeTensorInfo(i.shape, u, d);
  };
}
function ri(n, t, e) {
  return ({ inputs: s, attrs: o, backend: r }) => {
    const { x: i } = s;
    if (it(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = r, l = a.data.get(i.dataId).values, c = e || i.dtype, u = t(l, c, o);
    return a.makeTensorInfo(i.shape, c, u);
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UI = Io((n) => Math.ceil(n)), UM = ri(ba, UI), YM = {
  kernelName: ba,
  backendName: "cpu",
  kernelFunc: UM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YI(n, t, e, s) {
  const o = ae(e, X(t));
  if (s && e !== "string") {
    let r = 0;
    n.forEach((i) => {
      const a = X(i.shape);
      o.set(i.vals, r), r += a;
    });
  } else {
    let r = 0;
    n.forEach((i) => {
      const a = e === "string" ? qo(i.vals) : i.vals;
      let l = 0;
      for (let c = 0; c < i.shape[0]; ++c) {
        const u = c * t[1] + r;
        for (let d = 0; d < i.shape[1]; ++d)
          o[u + d] = a[l++];
      }
      r += i.shape[1];
    });
  }
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QI = he((n, t) => n === t ? 1 : 0), jI = ve(cu, QI, null, "bool"), QM = {
  kernelName: cu,
  backendName: "cpu",
  kernelFunc: jI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JI = Io((n) => Math.exp(n)), qI = ri(ka, JI, "float32"), jM = {
  kernelName: ka,
  backendName: "cpu",
  kernelFunc: qI
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t2 = Io((n) => Math.expm1(n)), JM = ri(Sa, t2), qM = {
  kernelName: Sa,
  backendName: "cpu",
  kernelFunc: JM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const e2 = Io((n) => Math.floor(n)), tz = ri(Ta, e2), ez = {
  kernelName: Ta,
  backendName: "cpu",
  kernelFunc: tz
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n2(n, t, e, s, o, r, i, a, l) {
  const c = vt([s, r], e);
  for (let u = 0; u < s; u++) {
    const d = [];
    let h = 0;
    for (let p = 0; p < o; p++) {
      const f = n[u * o + p];
      h += f * i[p], d.push(f);
    }
    if (h < 0 || h >= l / r)
      throw new Error(`Invalid indices: ${d} does not index into ${a}`);
    for (let p = 0; p < r; p++)
      c.values[u * r + p] = t.get(...t.indexToLoc(h * r + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s2(n, t, e) {
  const s = vt(e, n.dtype);
  for (let o = 0; o < s.size; ++o) {
    const i = s.indexToLoc(o).slice(), a = i[0], l = i[2], c = t.locToIndex([a, l]);
    i[2] = t.values[c];
    const u = n.locToIndex(i);
    0 <= u && u < n.values.length && (s.values[o] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o2 = he((n, t) => n > t ? 1 : 0), nz = ve(pu, o2, null, "bool"), sz = {
  kernelName: pu,
  backendName: "cpu",
  kernelFunc: nz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const r2 = he((n, t) => n >= t ? 1 : 0), oz = ve(Ra, r2, null, "bool"), rz = {
  kernelName: Ra,
  backendName: "cpu",
  kernelFunc: oz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const i2 = he((n, t) => n < t ? 1 : 0), iz = ve(mu, i2, null, "bool"), az = {
  kernelName: mu,
  backendName: "cpu",
  kernelFunc: iz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a2 = he((n, t) => n <= t ? 1 : 0), lz = ve(gu, a2, null, "bool"), cz = {
  kernelName: gu,
  backendName: "cpu",
  kernelFunc: lz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l2(n, t, e) {
  const s = (t - n) / (e - 1), o = Re(e, "float32");
  o[0] = n;
  for (let r = 1; r < o.length; r++)
    o[r] = o[r - 1] + s;
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c2 = Io((n) => Math.log(n)), uz = ri(Da, c2), dz = {
  kernelName: Da,
  backendName: "cpu",
  kernelFunc: uz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u2(n, t, e, s) {
  const o = Ie(s, X(e));
  for (let r = 0; r < o.length; ++r) {
    const i = r * t;
    let a = n[i];
    for (let l = 0; l < t; ++l) {
      const c = n[i + l];
      (Number.isNaN(c) || c > a) && (a = c);
    }
    o[r] = a;
  }
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d2 = he((n, t) => Math.max(n, t)), hz = ve(za, d2), pz = {
  kernelName: za,
  backendName: "cpu",
  kernelFunc: hz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const h2 = he((n, t) => Math.min(n, t)), fz = ve(Fa, h2), mz = {
  kernelName: Fa,
  backendName: "cpu",
  kernelFunc: fz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fg = he((n, t) => n * t), gz = hg((n, t, e, s) => ({
  real: n * e - t * s,
  imag: n * s + t * e
})), Id = ve(Va, fg, gz), bz = {
  kernelName: Va,
  backendName: "cpu",
  kernelFunc: Id
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p2(n, t, e) {
  const s = zs(-1, e);
  return fg([], t, s, n, e);
}
function xz(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  it(s, "neg");
  const o = e.data.get(s.dataId).values, [r, i] = p2(o, s.shape, s.dtype);
  return e.makeTensorInfo(i, s.dtype, r);
}
const yz = {
  kernelName: Nu,
  backendName: "cpu",
  kernelFunc: xz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f2 = he((n, t) => n !== t ? 1 : 0), wz = ve(Ru, f2, null, "bool"), Iz = {
  kernelName: Ru,
  backendName: "cpu",
  kernelFunc: wz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mg(n, t, e, s, o) {
  const r = t.length, i = X(t), a = dt(t), l = dt(o), c = Ie(e, X(o));
  for (let u = 0; u < i; ++u) {
    const d = ar(u, r, a), h = new Array(d.length);
    for (let f = 0; f < h.length; f++)
      h[f] = d[s[f]];
    const p = Yn(h, r, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qe(n) {
  const { inputs: t, attrs: e, backend: s } = n, { x: o } = t, { perm: r } = e;
  it(o, "transpose");
  const i = o.shape.length, a = new Array(i);
  for (let d = 0; d < a.length; d++)
    a[d] = o.shape[r[d]];
  const l = s.data.get(o.dataId).values, c = mg(l, o.shape, o.dtype, r, a);
  return { dataId: s.write(c, a, o.dtype), shape: a, dtype: o.dtype };
}
const Cz = {
  kernelName: Rr,
  backendName: "cpu",
  kernelFunc: Qe
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m2(n, t, e, s) {
  const [o, r] = Ce(n, s), i = rn(t, "int32"), a = Re(X(o), i), l = X(r);
  for (let c = 0; c < a.length; ++c) {
    const u = c * l;
    let d = 1;
    for (let h = 0; h < l; ++h)
      d *= e[u + h];
    a[c] = d;
  }
  return { outVals: a, outShape: o, outDtype: i };
}
function vz(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  it(o, "prod");
  const a = o.shape.length, l = Ct(r, o.shape), c = ne(l, a);
  let u = l, d = o;
  const h = [];
  c != null && (d = Qe({ inputs: { x: o }, backend: e, attrs: { perm: c } }), h.push(d), u = ce(u.length, a));
  const p = e.data.get(d.dataId).values, { outVals: f, outShape: m, outDtype: g } = m2(d.shape, d.dtype, p, u);
  let b = m;
  return i && (b = le(m, l)), h.forEach((x) => e.disposeIntermediateTensorInfo(x)), e.makeTensorInfo(b, g, f);
}
const kz = {
  kernelName: Mu,
  backendName: "cpu",
  kernelFunc: vz
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sz(n, t, e) {
  n.forEach((s, o) => {
    if (s < 0 || s >= e) {
      const r = ar(o, t.length, dt(t)).join(",");
      throw new Error(`indices[${r}] = ${s} is not in [0, ${e})`);
    }
  });
}
function Tz(n, t) {
  for (let e = 0; e < n.length; ++e) {
    const s = n[e], o = e === n.length - 1 ? t : n[e + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > o)
      throw new Error("Ragged splits must not point past values");
    for (let r = 1; r < s.length; ++r)
      if (s[r - 1] > s[r])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function Nz(n, t, e, s) {
  const o = [];
  let r = 0;
  const i = t.length - 1 + e.length, a = new Array(i).fill(null).map(() => [0]);
  Tz(e, s);
  let l = 1;
  for (let c = 0; c < t.length - 1; ++c) {
    l *= t[c];
    const u = t[c + 1];
    for (let d = 1; d < l + 1; ++d)
      a[c].push(d * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], d = n[c] + 1;
    for (let h = 0; h < e.length; ++h) {
      const p = e[h], f = h + t.length - 1;
      if (f >= 0) {
        const m = a[f], g = m[m.length - 1] - p[u];
        for (let b = u; b < d; ++b)
          a[f].push(p[b + 1] + g);
      }
      u = p[u], d = p[d];
    }
    d !== u && (o.push([u, d]), r += d - u);
  }
  return { outSplits: a, valueSlices: o, numValues: r };
}
function Rz(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e) {
    const s = n[e].length, o = ae("int32", s);
    t.push(o), n[e].forEach((r, i) => o[i] = r);
  }
  return t;
}
function F0(n, t) {
  const e = n.slice(0, t);
  for (; e.length < t; )
    e.push(1);
  for (let s = t; s < n.length; s++)
    e[t - 1] *= n[s];
  return e;
}
function $z(n, t, e, s, o, r) {
  const i = F0(t, 2)[1], a = F0(r, 2)[1];
  let l = 0;
  for (const c of e)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let d = 0; d < s; ++d)
        o[l * a + d] = n[u * i + d];
      ++l;
    }
}
function Ez(n, t, e, s, o) {
  const r = t.slice();
  r[0] = o;
  const i = ae(e, X(r)), a = n.length, l = a === 0 ? 0 : a / t[0];
  return $z(n, t, s, l, i, r), [i, r];
}
function g2(n, t, e, s, o, r, i, a) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = t[0][0] - 1;
  if (Sz(r, i, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: d, numValues: h } = Nz(r, i, n, c), p = Rz(u), f = Ez(e, s, o, d, h);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W0 = 2147483647;
function b2(n, t, e, s, o, r, i) {
  if (t.length > 1)
    throw new Error("starts must be a scalar or vector");
  if (o.length > 1)
    throw new Error("limits must be a scalar or vector");
  if (i.length > 1)
    throw new Error("deltas must be a scalar or vector");
  const a = t.length === 0, l = o.length === 0, c = i.length === 0, u = [];
  a || u.push(t[0]), l || u.push(o[0]), c || u.push(i[0]);
  for (let g = 1; g < u.length; ++g)
    if (u[g] !== u[g - 1])
      throw new Error("starts, limits, and deltas must have the same shape");
  const d = u.length === 0 ? 1 : u[0], h = ae("int32", d + 1);
  h[0] = 0;
  for (let g = 0; g < d; ++g) {
    const b = a ? n[0] : n[g], x = l ? s[0] : s[g], w = c ? r[0] : r[g];
    if (w === 0)
      throw new Error("Requires delta != 0");
    let y;
    if (w > 0 && x < b || w < 0 && x > b)
      y = 0;
    else if (y = Math.ceil(Math.abs((x - b) / w)), y > W0)
      throw new Error(`Requires ((limit - start) / delta) <= ${W0}`);
    h[g + 1] = h[g] + y;
  }
  const p = h[d], f = ae(e, p);
  let m = 0;
  for (let g = 0; g < d; ++g) {
    const b = h[g + 1] - h[g];
    let x = a ? n[0] : n[g];
    const w = c ? r[0] : r[g];
    for (let y = 0; y < b; ++y)
      f[m++] = x, x += w;
  }
  return [h, f];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Sn = Hn;
class Dc {
  constructor(t, e, s, o, r, i, a, l, c, u) {
    this.shape = t, this.shapeShape = e, this.values = s, this.valuesShape = o, this.valuesDType = r, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = ny(u), this.raggedRank = sy(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === Sn.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  // Returns the relationship between dimension and dimension + 1.
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === Sn.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    const e = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case Sn.VALUE_ROWIDS:
        return Dc.getMaxWidthValueRowID(e);
      case Sn.ROW_SPLITS:
        return Dc.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${Sn[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    const e = t.length;
    if (e === 0 || e === 1)
      return 0;
    let s = 0;
    for (let o = 0; o < e - 1; ++o) {
      const r = t[o + 1] - t[o];
      r > s && (s = r);
    }
    return s;
  }
  static getMaxWidthValueRowID(t) {
    const e = t.length;
    if (e === 0)
      return 0;
    let s = 0, o = t[0], r = 0;
    for (let i = 1; i < e; ++i) {
      const a = t[i];
      a !== o && (o = a, r = Math.max(i - s, r), s = i);
    }
    return Math.max(e - s, r);
  }
  tensorShapeFromTensor(t, e, s = !0) {
    if (e.length === 0) {
      if (t[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return _0(t, s);
  }
  calculateOutputSize(t) {
    const e = this.valuesShape, s = this.defaultValueShape;
    oy(s, e);
    const o = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = ey(this.raggedRank, o, e);
    i[0] < 0 && (i[0] = t);
    for (let a = 1; a <= this.raggedRank; ++a)
      i[a] < 0 && (i[a] = this.getMaxWidth(a));
    return i;
  }
  /**
   * The outputIndex represents the index in the output tensor
   * where the first element of a particular dimension would be written.
   * If it is -1, it indicates that the index is out of scope.
   * Example, given firstDimension = 10, firstDimensionOutput = 6,
   * and outputIndexMultiplier = 100:
   * result = [0 100 200 300 400 500 -1 -1 -1 -1]
   * If firstDimensionOutput = 11 instead, then:
   * result = [0 100 200 300 400 500 600 700 800 900]
   */
  calculateFirstParentOutputIndex(t, e, s) {
    const o = Math.min(t, s), r = [];
    let i = 0;
    for (let a = 0; a < o; ++a, i += e)
      r.push(i);
    for (let a = o; a < t; ++a)
      r.push(-1);
    return k(r.length === t, () => "Final length of result must be equal to firstDimension."), r;
  }
  calculateOutputIndexRowSplit(t, e, s, o) {
    const r = t.length, i = [];
    for (let a = 0; a < r - 1; ++a) {
      const l = t[a + 1] - t[a];
      let c = Math.min(o, l), u = e[a];
      u === -1 && (c = 0);
      for (let d = 0; d < c; ++d)
        i.push(u), u += s;
      for (let d = 0; d < l - c; ++d)
        i.push(-1);
    }
    if (r > 0 && i.length !== t[r - 1])
      throw new Error("Invalid row split size.");
    return i;
  }
  // Calculate the output index of the first element of a list.
  // The parentOutputIndex is the same computation for the previous list.
  // -1 indicates an element or list that is out of range.
  // The outputIndexMultiplier is the number of output indices one moves
  // forward for each column.
  // E.g., given:
  // valueRowIds:[0 1 2 2 2 3 5 5 6]
  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
  // outputIndexMultiplier: 10
  // outputSize: 2
  // You get:
  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
  // result[0] = parentOutputIndex[valueRowIds[0]]
  // result[1] = parentOutputIndex[valueRowIds[1]]
  // result[2] = parentOutputIndex[valueRowIds[2]]
  // result[3] = parentOutputIndex[valueRowIds[2] + 10]
  // result[4] = -1 because it is the third element the size is 2.
  // result[5] = parentOutputIndex[valueRowIds[3]]
  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[8] = parentOutputIndex[valueRowIds[7]]
  calculateOutputIndexValueRowID(t, e, s, o) {
    const r = t.length, i = [];
    if (r === 0)
      return [];
    let a = 0, l = t[0];
    if (l >= e.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);
    let c = e[l];
    i.push(c);
    for (let u = 1; u < r; ++u) {
      const d = t[u];
      if (d === l)
        c >= 0 && (++a, a < o ? c += s : c = -1);
      else {
        if (a = 0, l = d, d >= e.length)
          throw new Error(`Got nextValueRowId=${d} which is not less than ${e.length}`);
        c = e[d];
      }
      i.push(c);
    }
    if (i.length !== t.length)
      throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, e, s, o) {
    const r = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case Sn.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(r, e, s, o);
      case Sn.ROW_SPLITS:
        if (r.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${r.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(r, e, s, o);
      default:
        throw new Error(`Unsupported partition type: ${Sn[i]}`);
    }
  }
  getFirstDimensionSize() {
    const t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const e = this.rowPartitionTypes[0];
    switch (e) {
      case Sn.FIRST_DIM_SIZE:
        return t[0];
      case Sn.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case Sn.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${Sn[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const e = this.getFirstDimensionSize(), s = this.calculateOutputSize(e), o = new Array(this.raggedRank + 1);
    o[o.length - 1] = 1;
    for (let l = o.length - 2; l >= 0; --l)
      o[l] = o[l + 1] * s[l + 1];
    const r = _0(s, !1), i = ae(this.valuesDType, X(r));
    if (o[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(e, o[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, o[c], s[c]);
      this.setOutput(this.raggedRank, l, i, r);
    }
    return [r, i];
  }
  setOutput(t, e, s, o) {
    if (s.length === 0)
      return;
    const r = this.values, i = s;
    let a = o.slice();
    a = a.slice(t + 1);
    const l = X(a), c = e.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      z(() => {
        const m = M(u, f);
        u = Li(m, a).dataSync();
      });
    }
    let d = 0, h = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let m = f < c ? e[f] : -1;
      if (m === p) {
        ++p;
        continue;
      }
      if (h < p) {
        const g = r.subarray(d * l), b = i.subarray(h * l), x = (p - h) * l;
        V0(b, g, x);
      }
      if (f >= c) {
        const g = s.length;
        m = Math.floor(g / l);
      }
      if (m > p)
        if (this.defaultValue.length === 1)
          i.subarray(p * l, m * l).fill(this.defaultValue[0]), p = m;
        else
          for (; m > p; ) {
            const g = i.slice(p * l);
            V0(g, u, l), ++p;
          }
      m < 0 ? (d = f + 1, h = p) : (d = f, h = p, p = h + 1);
    }
  }
}
function V0(n, t, e) {
  for (let s = 0; s < e; s++)
    n[s] = t[s];
}
function _0(n, t) {
  const e = [];
  for (let s of n) {
    if (s < 0) {
      if (!t)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    e.push(s);
  }
  return e;
}
function x2(n, t, e, s, o, r, i, a, l, c) {
  return new Dc(n, t, e, s, o, r, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y2(n, t, e, s) {
  const o = n === t, r = n < t && e < 0, i = t < n && e > 1;
  if (o || r || i)
    return Re(0, s);
  const a = Math.abs(Math.ceil((t - n) / e)), l = Re(a, s);
  t < n && e === 1 && (e = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + e;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const w2 = Io((n) => 1 / Math.sqrt(n)), Gz = ri(Za, w2), Lz = {
  kernelName: Za,
  backendName: "cpu",
  kernelFunc: Gz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nr(n, t, e, s, o, r, i, a, l, c) {
  const u = [s / o, o], d = n.values, h = t.values;
  if (s === 0)
    return vt(e, t.dtype);
  const p = vt(u, t.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < r; f++) {
    const m = [];
    let g = 0;
    for (let b = 0; b < i; b++) {
      const x = d[f * i + b];
      m.push(x), g += x * a[b];
    }
    if (g < 0 || g >= s / o)
      throw new Error(`Invalid indices: ${m} does not index into ${e}`);
    for (let b = 0; b < o; b++)
      c ? p.values[g * o + b] += h[f * o + b] : p.values[g * o + b] = t.rank === 0 ? h[0] : h[f * o + b];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Dz = Io((n) => 1 / (1 + Math.exp(-n))), I2 = zt(Ya, (n) => 1 / (1 + Math.exp(-n))), Mz = {
  kernelName: Ya,
  backendName: "cpu",
  kernelFunc: I2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C2(n, t, e, s, o) {
  const r = wm(s, t, e), i = X(e), a = dt(s);
  if (r) {
    const d = Im(t, a);
    return o === "string" ? n.slice(d, d + i) : n.subarray(d, d + i);
  }
  const l = o === "string" ? qo(n) : n, c = vt(s, o, l), u = vt(e, o);
  for (let d = 0; d < u.size; ++d) {
    const h = u.indexToLoc(d), p = h.map((f, m) => f + t[m]);
    u.set(c.get(...p), ...h);
  }
  return o === "string" ? ky(u.values) : u.values;
}
function nr(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, size: i } = s;
  it(o, "slice");
  const [a, l] = sd(o, r, i);
  xm(o, a, l);
  const c = e.data.get(o.dataId).values, u = C2(c, a, l, o.shape, o.dtype);
  return e.makeTensorInfo(l, o.dtype, u);
}
const zz = {
  kernelName: Au,
  backendName: "cpu",
  kernelFunc: nr
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v2(n, t, e, s, o, r, i) {
  const a = t[0], l = r[0], c = new Array(l), u = new Array(a), d = t[1];
  if (l === 0) {
    if (a !== 0)
      throw new Error(dy(a));
    const g = ae(e, 0), b = ae(o, 0);
    return [
      g,
      [0, d],
      b,
      c,
      u
    ];
  }
  let h = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let g = 0; g < a; ++g) {
    const b = n[g * d];
    if (b < 0)
      throw new Error(hy(g, b));
    if (b >= l)
      throw new Error(py(g, b, l));
    ++f[b], h = h && b >= p, p = b;
  }
  let m = !0;
  for (let g = 0; g < l; ++g) {
    const b = f[g] === 0;
    c[g] = b, m = m && !b, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (m && h) {
    const g = n, b = s;
    for (let x = 0; x < a; ++x)
      u[x] = x;
    return [
      g,
      [a, d],
      b,
      c,
      u
    ];
  } else {
    const g = f[l - 1], b = ae(e, g * d), x = ae(o, g), w = new Array(l).fill(0);
    for (let y = 0; y < a; ++y) {
      const I = n[y * d], C = w[I], v = (I === 0 ? 0 : f[I - 1]) + C;
      w[I]++;
      for (let S = 0; S < d; ++S)
        b[v * d + S] = n[y * d + S];
      x[v] = s[y], u[y] = v;
    }
    for (let y = 0; y < l; ++y)
      if (w[y] === 0) {
        const C = y === 0 ? 0 : f[y - 1];
        b[C * d + 0] = y;
        for (let v = 1; v < d; ++v)
          b[C * d + v] = 0;
        x[C] = i;
      }
    return [
      b,
      [g, d],
      x,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k2(n, t, e, s, o) {
  const r = X(s), i = t[0], a = o.length, l = [];
  let c = 1, u = -1;
  for (let g = 0; g < a; ++g) {
    const b = o[g];
    if (b === -1) {
      if (u !== -1)
        throw new Error(fy(u, g));
      u = g, l.push(1);
    } else {
      if (b < 0)
        throw new Error(my(g, b));
      c *= b, l.push(b);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(gy());
    const g = Math.trunc(r / c);
    if (c * g !== r)
      throw new Error(by(s, l));
    l[u] = g;
  }
  if (X(l) !== r)
    throw new Error(xy(s, l));
  const h = s.length, p = [];
  if (h > 0) {
    p[h - 1] = 1;
    for (let g = h - 2; g >= 0; --g)
      p[g] = p[g + 1] * s[g + 1];
  }
  const f = [];
  if (a > 0) {
    f[a - 1] = 1;
    for (let g = a - 2; g >= 0; --g)
      f[g] = f[g + 1] * l[g + 1];
  }
  const m = ae(e, i * a);
  for (let g = 0; g < i; ++g) {
    let b = 0;
    for (let x = 0; x < h; ++x)
      b += n[g * h + x] * p[x];
    for (let x = 0; x < a; ++x)
      m[g * a + x] = Math.trunc(b / f[x]), b %= f[x];
  }
  return [m, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gg(n, t, e, s, o, r = !1, i = 0) {
  const a = s.length, l = [t[0], n.length / t[0]], c = l[1], d = a > 0 ? o[a - 1] + 1 : 0;
  if (d < 0)
    throw new Error(sp());
  const h = t.slice();
  h[0] = d;
  const p = h.reduce((w, y) => w * y, 1), f = ae(e, p);
  if (a === 0)
    return d > 0 && f.fill(i), [f, h];
  if (d <= 0)
    throw new Error(sp());
  let m = 0, g = 1, b = 0, x = o[m];
  for (; ; ) {
    let w = 0;
    if (g < a) {
      if (w = o[g], x === w) {
        ++g;
        continue;
      }
      if (x >= w)
        throw new Error(yy());
    }
    if (x < 0 || x >= d)
      throw new Error(wy(x, d));
    x > b && f.fill(i, b * c, x * c);
    for (let y = m; y < g; ++y) {
      const I = s[y];
      if (I < 0 || I >= l[0])
        throw new Error(Iy(y, s[y], l[0]));
      for (let C = 0; C < c; C++)
        f[x * c + C] += n[I * c + C];
    }
    if (r)
      for (let y = 0; y < c; y++)
        f[x * c + y] /= g - m;
    if (m = g, ++g, b = x + 1, x = w, g > a)
      break;
  }
  return b < d && f.fill(i, b * c, d * c), [f, h];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Fz = Io((n) => Math.sqrt(n)), Wz = zt(ja, (n) => Math.sqrt(n)), Vz = {
  kernelName: ja,
  backendName: "cpu",
  kernelFunc: Wz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const S2 = he((n, t) => {
  const e = n - t;
  return e * e;
}), _z = ve(Ja, S2), Az = {
  kernelName: Ja,
  backendName: "cpu",
  kernelFunc: _z
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function T2(n, t, e, s) {
  const o = vt(n, t.dtype);
  for (let r = 0; r < o.size; r++) {
    const i = o.indexToLoc(r), a = new Array(i.length);
    for (let l = 0; l < a.length; l++)
      a[l] = i[l] * e[l] + s[l];
    o.set(t.get(...a), ...i);
  }
  return o;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Oz {
  constructor(t, e, s, o, r, i) {
    this.separator = Es(t), this.nGramWidths = e, this.leftPad = Es(s), this.rightPad = Es(o), this.padWidth = r, this.preserveShort = i;
  }
  getPadWidth(t) {
    return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
  }
  getNumNGrams(t, e) {
    const s = this.getPadWidth(e);
    return Math.max(0, t + 2 * s - e + 1);
  }
  createNGrams(t, e, s, o, r, i) {
    for (let a = 0; a < r; ++a) {
      const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (r - (a + 1))), d = i - (c + u), h = e + (c > 0 ? 0 : a - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let x = 0; x < d; ++x)
        p += t[h + x].length;
      p += u * this.rightPad.length;
      const f = c + u + d - 1;
      p += f * this.separator.length, s[o + a] = new Uint8Array(p);
      const m = s[o + a];
      let g = 0;
      const b = (x) => x.forEach((w) => m[g++] = w);
      for (let x = 0; x < c; ++x)
        b(this.leftPad), b(this.separator);
      for (let x = 0; x < d - 1; ++x)
        b(t[h + x]), b(this.separator);
      if (d > 0) {
        b(t[h + d - 1]);
        for (let x = 0; x < u; ++x)
          b(this.separator), b(this.rightPad);
      } else {
        for (let x = 0; x < u - 1; ++x)
          b(this.rightPad), b(this.separator);
        b(this.rightPad);
      }
    }
  }
  // Data and splits together form the definition of the ragged tensor,
  // where data is 1 dimensional and contains the values of the tensor
  // and splits denotes the indices at which each row starts.
  compute(t, e) {
    const s = t.length, o = e.length;
    if (o > 0) {
      let l = e[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < o; ++c) {
        let u = e[c] >= l;
        if (u = u && e[c] <= s, !u)
          throw new Error(`Invalid split value ${e[c]}, must be in [${l}, ${s}]`);
        l = e[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const r = o - 1, i = ae("int32", o);
    if (s === 0 || o === 0) {
      const l = new Array(s);
      for (let c = 0; c <= r; ++c)
        i[c] = 0;
      return [l, i];
    }
    i[0] = 0;
    for (let l = 1; l <= r; ++l) {
      const c = e[l] - e[l - 1];
      let u = 0;
      this.nGramWidths.forEach((d) => {
        u += this.getNumNGrams(c, d);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
    }
    const a = new Array(i[r]);
    for (let l = 0; l < r; ++l) {
      const c = e[l];
      let u = i[l];
      if (this.nGramWidths.forEach((d) => {
        const h = e[l + 1] - e[l], p = this.getNumNGrams(h, d);
        this.createNGrams(t, c, a, u, p, d), u += p;
      }), this.preserveShort && u === i[l]) {
        const d = e[l + 1] - e[l];
        if (d === 0)
          continue;
        const h = d + 2 * this.padWidth, p = 1;
        this.createNGrams(t, c, a, u, p, h);
      }
    }
    return [a, i];
  }
}
function N2(n, t, e, s, o, r, i, a) {
  return new Oz(e, s, o, r, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xz(n, t, e, s) {
  if (!n.length)
    return;
  if (t.length === 0) {
    for (let r = 0; r < n.length; ++r)
      s.push(n.subarray(r, r + 1));
    return;
  }
  if (t.length === 1) {
    const r = t[0];
    let i = n.indexOf(r);
    for (; i !== -1; ) {
      const a = n.subarray(0, i);
      (!e || a.length !== 0) && s.push(a), n = n.subarray(i + 1), i = n.indexOf(r);
    }
    (!e || n.length !== 0) && s.push(n);
    return;
  }
  let o = 0;
  for (let r = 0; r < n.length + 1; r++)
    if (r === n.length || t.indexOf(n[r]) !== -1) {
      const i = n.subarray(o, r);
      (!e || i.length !== 0) && s.push(i), o = r + 1;
    }
}
function R2(n, t, e) {
  const s = n.length, o = [];
  let r = 0, i = 0;
  const a = new Array(s);
  for (let h = 0; h < s; ++h) {
    const p = o.length;
    Xz(n[h], t, e, o);
    const f = o.length - p;
    a[h] = f, r += f, i = Math.max(i, f);
  }
  const l = ae("int32", r * 2), c = new Array(r), u = [s, i];
  let d = 0;
  for (let h = 0; h < s; ++h)
    for (let p = 0; p < a[h]; ++p)
      l[d * 2] = h, l[d * 2 + 1] = p, c[d] = o[d], ++d;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $2(n, t) {
  const e = ae("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    e[s] = Ox(n[s]).modulo(t).getLowBitsUnsigned();
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E2 = he((n, t) => n - t), Pz = hg((n, t, e, s) => ({ real: n - e, imag: t - s })), bg = ve(qa, E2, Pz), Zz = {
  kernelName: qa,
  backendName: "cpu",
  kernelFunc: bg
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function G2(n, t) {
  const e = new Array(n.rank);
  for (let o = 0; o < e.length; o++)
    e[o] = n.shape[o] * t[o];
  const s = vt(e, n.dtype);
  for (let o = 0; o < s.values.length; ++o) {
    const r = s.indexToLoc(o), i = new Array(n.rank);
    for (let l = 0; l < i.length; l++)
      i[l] = r[l] % n.shape[l];
    const a = n.locToIndex(i);
    s.values[o] = n.values[a];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ni = (n, t) => {
  const e = t.value - n.value;
  return e === 0 ? n.index - t.index : e;
};
function L2(n, t, e = 0, s = n.length - 1) {
  for (; s > e; ) {
    if (s - e > 600) {
      const a = s - e + 1, l = t - e + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), d = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), h = Math.max(e, Math.floor(t - l * u / a + d)), p = Math.min(s, Math.floor(t + (a - l) * u / a + d));
      L2(n, t, h, p);
    }
    const o = n[t];
    let r = e, i = s;
    for (Rs(n, e, t), Ni(n[s], o) > 0 && Rs(n, e, s); r < i; ) {
      for (Rs(n, r, i), r++, i--; Ni(n[r], o) < 0; )
        r = r + 1;
      for (; Ni(n[i], o) > 0; )
        i = i - 1;
    }
    Ni(n[e], o) === 0 ? Rs(n, e, i) : (i = i + 1, Rs(n, i, s)), i <= t && (e = i + 1), t <= i && (s = i - 1);
  }
}
function D2(n, t, e, s, o) {
  const r = t[t.length - 1], [i, a] = [n.length / r, r], l = Ie(e, i * s), c = Ie("int32", i * s);
  for (let d = 0; d < i; d++) {
    const h = d * a, p = n.subarray(h, h + a);
    let f = new Array(p.length);
    p.forEach((x, w) => f[w] = { value: x, index: w }), s < f.length && (L2(f, s), f = f.slice(0, s)), o && f.sort(Ni);
    const m = d * s, g = l.subarray(m, m + s), b = c.subarray(m, m + s);
    for (let x = 0; x < s; x++)
      g[x] = f[x].value, b[x] = f[x].index;
  }
  const u = t.slice();
  return u[u.length - 1] = s, [
    vt(u, e, l),
    vt(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function M2(n, t, e, s) {
  const o = Ct(t, e)[0], r = [1, e[0], 1];
  for (let f = 0; f < o; f++)
    r[0] *= e[f];
  r[1] = e[o];
  for (let f = o + 1; f < e.length; f++)
    r[2] *= e[f];
  const i = {}, a = new Int32Array(e[o]), l = new Me(r, s, n), c = [], u = r[0] === 1 && r[2] === 1;
  for (let f = 0; f < e[o]; f++) {
    let m;
    if (u)
      m = n[f].toString();
    else {
      const g = [];
      for (let b = 0; b < r[0]; b++)
        for (let x = 0; x < r[2]; x++)
          g.push(l.get(b, f, x));
      m = g.join(",");
    }
    if (i[m] !== void 0)
      a[f] = i[m];
    else {
      const g = Object.keys(i).length;
      i[m] = g, a[f] = g, c.push(f);
    }
  }
  const d = r.slice();
  d[1] = Object.keys(i).length;
  const h = new Me(d, s);
  c.forEach((f, m) => {
    for (let g = 0; g < r[0]; g++)
      for (let b = 0; b < r[2]; b++)
        h.set(l.get(g, f, b), g, m, b);
  });
  const p = e.slice();
  return p[o] = d[1], {
    outputValues: h.values,
    outputShape: p,
    indices: a
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  addImpl: BI,
  bincountImpl: pg,
  bincountReduceImpl: HI,
  castImpl: KI,
  ceilImpl: UI,
  concatImpl: YI,
  equalImpl: QI,
  expImpl: JI,
  expm1Impl: t2,
  floorImpl: e2,
  gatherNdImpl: n2,
  gatherV2Impl: s2,
  greaterEqualImpl: r2,
  greaterImpl: o2,
  lessEqualImpl: a2,
  lessImpl: i2,
  linSpaceImpl: l2,
  logImpl: c2,
  maxImpl: u2,
  maximumImpl: d2,
  minimumImpl: h2,
  multiplyImpl: fg,
  negImpl: p2,
  notEqualImpl: f2,
  prodImpl: m2,
  raggedGatherImpl: g2,
  raggedRangeImpl: b2,
  raggedTensorToTensorImpl: x2,
  rangeImpl: y2,
  rsqrtImpl: w2,
  scatterImpl: Nr,
  sigmoidImpl: Dz,
  simpleAbsImpl: ZI,
  sliceImpl: C2,
  sparseFillEmptyRowsImpl: v2,
  sparseReshapeImpl: k2,
  sparseSegmentReductionImpl: gg,
  sqrtImpl: Fz,
  squaredDifferenceImpl: S2,
  stridedSliceImpl: T2,
  stringNGramsImpl: N2,
  stringSplitImpl: R2,
  stringToHashBucketFastImpl: $2,
  subImpl: E2,
  tileImpl: G2,
  topKImpl: D2,
  transposeImpl: mg,
  uniqueImpl: M2
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
e1(
  "cpu",
  () => new wd(),
  1
  /* priority */
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const z2 = zt(Ca, (n) => n >= 0 ? n : Math.exp(n) - 1), Bz = {
  kernelName: Ca,
  backendName: "cpu",
  kernelFunc: z2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function F2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { alpha: r } = s;
  it([o], "leakyRelu");
  const i = X(o.shape), a = e.data.get(o.dataId).values, l = Ie("float32", i);
  for (let c = 0; c < a.length; c++)
    l[c] = a[c] < 0 ? r * a[c] : a[c];
  return e.makeTensorInfo(o.shape, "float32", l);
}
const Hz = {
  kernelName: fu,
  backendName: "cpu",
  kernelFunc: F2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Uz = he((n, t) => n < 0 ? t * n : n);
function W2(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: o } = t;
  it([s, o], "prelu");
  const r = e.data.get(s.dataId).values, i = e.data.get(o.dataId).values, [a, l] = Uz(s.shape, o.shape, r, i, "float32");
  return e.makeTensorInfo(l, "float32", a);
}
const Yz = {
  kernelName: Du,
  backendName: "cpu",
  kernelFunc: W2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const V2 = zt(Oa, (n) => Math.max(0, n)), Qz = {
  kernelName: Oa,
  backendName: "cpu",
  kernelFunc: V2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _2 = zt(Xa, (n) => Math.min(Math.max(0, n), 6)), jz = {
  kernelName: Xa,
  backendName: "cpu",
  kernelFunc: _2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mc(n, t, e, s, o) {
  if (e === "linear")
    return ws({ inputs: { x: t }, backend: n });
  if (e === "relu")
    return V2({ inputs: { x: t }, backend: n });
  if (e === "elu")
    return z2({ inputs: { x: t }, backend: n });
  if (e === "relu6")
    return _2({ inputs: { x: t }, backend: n });
  if (e === "prelu")
    return W2({ inputs: { x: t, alpha: s }, backend: n });
  if (e === "leakyrelu")
    return F2({ inputs: { x: t }, backend: n, attrs: { alpha: o } });
  if (e === "sigmoid")
    return I2({ inputs: { x: t }, backend: n });
  throw new Error(`Activation ${e} has not been implemented for the CPU backend.`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Zt(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { shape: r } = s, i = X(o.shape), a = Lp(r, i), l = X(a);
  k(i === l, () => `The new shape (${a}) has ${l} elements and the old shape (${o.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), e.incRef(o.dataId);
  const c = e.data.get(o.dataId);
  if (c.complexTensorInfos != null) {
    const u = c.complexTensorInfos.real, d = c.complexTensorInfos.imag;
    u.shape = a, d.shape = a;
  }
  return { dataId: o.dataId, shape: a, dtype: o.dtype };
}
const Jz = {
  kernelName: zu,
  backendName: "cpu",
  kernelFunc: Zt
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r } = t, { transposeA: i, transposeB: a } = s;
  it([o, r], "matMul");
  const l = o.shape.length, c = r.shape.length, u = i ? o.shape[l - 2] : o.shape[l - 1], d = a ? r.shape[c - 1] : r.shape[c - 2], h = i ? o.shape[l - 1] : o.shape[l - 2], p = a ? r.shape[c - 2] : r.shape[c - 1], f = o.shape.slice(0, -2), m = r.shape.slice(0, -2), g = X(f), b = X(m), w = bt(o.shape.slice(0, -2), r.shape.slice(0, -2)).concat([h, p]);
  k(u === d, () => `Error in matMul: inner shapes (${u}) and (${d}) of Tensors with shapes ${o.shape} and ${r.shape} and transposeA=${i} and transposeB=${a} must match.`);
  const y = i ? [g, u, h] : [g, h, u], I = a ? [b, p, d] : [b, d, p], C = Zt({ inputs: { x: o }, backend: e, attrs: { shape: y } }), v = Zt({ inputs: { x: r }, backend: e, attrs: { shape: I } }), S = i ? C.shape[1] : C.shape[2], N = i ? C.shape[2] : C.shape[1], R = a ? v.shape[1] : v.shape[2], $ = Math.max(g, b), F = e.data.get(C.dataId).values, W = e.data.get(v.dataId).values, _ = dt(C.shape), A = dt(v.shape), [O, K, Z] = i ? [_[0], 1, _[1]] : [_[0], _[1], 1], [B, Y, Q] = a ? [1, A[1], A[0]] : [A[1], 1, A[0]], J = N * R, j = vt([$, N, R], C.dtype), nt = j.values, q = e.blockSize;
  for (let rt = 0; rt < $; rt++) {
    const ht = rt % g, ft = rt % b;
    for (let pt = 0; pt < N; pt += q) {
      const wt = Math.min(pt + q, N);
      for (let It = 0; It < R; It += q) {
        const Dt = Math.min(It + q, R);
        for (let _t = 0; _t < S; _t += q) {
          const se = Math.min(_t + q, S);
          for (let At = pt; At < wt; At++)
            for (let Ft = It; Ft < Dt; Ft++) {
              let Jt = 0;
              for (let Yt = _t; Yt < se; Yt++) {
                const Cs = (
                  // tslint:disable-next-line: max-line-length
                  F[ht * O + At * K + Yt * Z]
                ), ke = (
                  // tslint:disable-next-line: max-line-length
                  W[Yt * B + Ft * Y + ft * Q]
                );
                Jt += Cs * ke;
              }
              nt[rt * J + (At * R + Ft)] += Jt;
            }
        }
      }
    }
  }
  return e.disposeIntermediateTensorInfo(C), e.disposeIntermediateTensorInfo(v), e.makeTensorInfo(w, j.dtype, j.values);
}
const qz = {
  kernelName: qc,
  backendName: "cpu",
  kernelFunc: A2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: d } = s;
  let h, p, f;
  const m = [];
  h = A2({ inputs: { a: o, b: r }, attrs: { transposeA: l, transposeB: c }, backend: e }), i && (p = Or({ inputs: { a: h, b: i }, backend: e }), m.push(h), h = p), u && (f = Mc(e, h, u, a, d), m.push(h), h = f);
  for (const b of m)
    e.disposeIntermediateTensorInfo(b);
  return h;
}
const eF = {
  kernelName: hc,
  backendName: "cpu",
  kernelFunc: tF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nF = zt(ca, (n) => Math.acos(n)), sF = {
  kernelName: ca,
  backendName: "cpu",
  kernelFunc: nF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oF = zt(ua, (n) => Math.acosh(n)), rF = {
  kernelName: ua,
  backendName: "cpu",
  kernelFunc: oF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iF(n) {
  const { inputs: t, backend: e } = n, s = t;
  it(t, "addN");
  const o = s.map((a) => e.data.get(a.dataId).values), r = vt(s[0].shape, s[0].dtype), i = r.values;
  for (let a = 0; a < s.length; a++) {
    const l = o[a];
    for (let c = 0; c < i.length; c++)
      i[c] += l[c];
  }
  return e.makeTensorInfo(r.shape, r.dtype, r.values);
}
const aF = {
  kernelName: Fp,
  backendName: "cpu",
  kernelFunc: iF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  it(o, "all");
  const a = Ct(r, o.shape);
  let l = a;
  const c = ne(l, o.shape.length);
  let u = o;
  c != null && (u = Qe({ inputs: { x: o }, backend: e, attrs: { perm: c } }), l = ce(l.length, o.shape.length)), Ee("all", l, u.shape.length);
  const [d, h] = Ce(u.shape, l), p = X(h), f = Re(X(d), u.dtype), m = e.data.get(u.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    const x = b * p;
    let w = m[x];
    for (let y = 0; y < p; ++y) {
      const I = m[x + y];
      w = w && I;
    }
    f[b] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(d, u.dtype, f);
  if (i) {
    const b = le(d, a), x = Zt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
    return e.disposeIntermediateTensorInfo(g), x;
  }
  return g;
}
const cF = {
  kernelName: Wp,
  backendName: "cpu",
  kernelFunc: lF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  it(o, "any");
  const a = Ct(r, o.shape);
  let l = a;
  const c = ne(l, o.shape.length);
  let u = o;
  c != null && (u = Qe({ inputs: { x: o }, backend: e, attrs: { perm: c } }), l = ce(l.length, o.shape.length)), Ee("any", l, u.shape.length);
  const [d, h] = Ce(u.shape, l), p = X(h), f = Re(X(d), u.dtype), m = e.data.get(u.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    const x = b * p;
    let w = m[x];
    for (let y = 0; y < p; ++y) {
      const I = m[x + y];
      w = w || I;
    }
    f[b] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(d, u.dtype, f);
  if (i) {
    const b = le(d, a), x = Zt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
    return e.disposeIntermediateTensorInfo(g), x;
  }
  return g;
}
const dF = {
  kernelName: Vp,
  backendName: "cpu",
  kernelFunc: uF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  it(o, "argMax");
  let i = Ct(r, o.shape);
  const a = ne(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = Qe({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = ce(i.length, l.shape.length)), i = [i[0]], Ee("argMax", i, l.shape.length);
  const [u, d] = Ce(l.shape, i), h = X(u), p = Re(h, "int32"), f = X(d), m = e.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const b = g * f;
    let x = m[b], w = 0;
    for (let y = 0; y < f; ++y) {
      const I = m[b + y];
      I > x && (x = I, w = y);
    }
    p[g] = w;
  }
  return c.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(u, "int32", p);
}
const pF = {
  kernelName: Yc,
  backendName: "cpu",
  kernelFunc: hF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  it(o, "argMin");
  let i = Ct(r, o.shape);
  const a = ne(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = Qe({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = ce(i.length, l.shape.length)), i = [i[0]], Ee("argMin", i, l.shape.length);
  const [u, d] = Ce(l.shape, i), h = X(u), p = Re(h, "int32"), f = X(d), m = e.data.get(l.dataId).values;
  for (let g = 0; g < p.length; ++g) {
    const b = g * f;
    let x = m[b], w = 0;
    for (let y = 0; y < f; ++y) {
      const I = m[b + y];
      I < x && (x = I, w = y);
    }
    p[g] = w;
  }
  return c.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(u, "int32", p);
}
const mF = {
  kernelName: Qc,
  backendName: "cpu",
  kernelFunc: fF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gF = zt(da, (n) => Math.asin(n)), bF = {
  kernelName: da,
  backendName: "cpu",
  kernelFunc: gF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xF = zt(ha, (n) => Math.asinh(n)), yF = {
  kernelName: ha,
  backendName: "cpu",
  kernelFunc: xF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wF = zt(pa, (n) => Math.atan(n)), IF = {
  kernelName: pa,
  backendName: "cpu",
  kernelFunc: wF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CF = he((n, t) => Math.atan2(n, t)), vF = ve(ma, CF), kF = {
  kernelName: ma,
  backendName: "cpu",
  kernelFunc: vF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SF = zt(fa, (n) => Math.atanh(n)), TF = {
  kernelName: fa,
  backendName: "cpu",
  kernelFunc: SF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xg(n, t, e, s, o, r) {
  const i = o.strideHeight, a = o.strideWidth, l = o.dilationHeight, c = o.dilationWidth, u = o.effectiveFilterHeight, d = o.effectiveFilterWidth, h = o.padInfo.top, p = o.padInfo.left, f = r === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m = vt(o.outShape, e), g = m.values, b = o.outShape[1] * o.outShape[2] * o.outShape[3], x = o.outShape[2] * o.outShape[3], w = o.outShape[3];
  for (let y = 0; y < o.batchSize; ++y) {
    const I = y * b, C = y * s[0];
    for (let v = 0; v < o.inChannels; ++v)
      for (let S = 0; S < o.outHeight; ++S) {
        const N = S * i - h, R = Math.max(0, N), $ = Math.min(o.inHeight, u + N), F = I + S * x;
        for (let W = 0; W < o.outWidth; ++W) {
          const _ = W * a - p, A = Math.max(0, _), O = Math.min(o.inWidth, d + _);
          let K = f, Z = 0, B = 0;
          for (let Q = R; Q < $; Q += l) {
            const J = C + Q * s[1];
            for (let j = A; j < O; j += c) {
              const nt = J + j * s[2], q = n[nt + v];
              r === "max" && q > K ? K = q : r === "avg" && (Z += q, B++);
            }
            if (isNaN(K))
              break;
          }
          const Y = F + W * w + v;
          g[Y] = r === "avg" ? Z / B : K;
        }
      }
  }
  return m;
}
function O2(n, t, e, s, o = !1, r = !1) {
  const i = vt(s.outShape, "int32"), a = s.strideHeight, l = s.strideWidth, c = s.dilationHeight, u = s.dilationWidth, d = s.effectiveFilterHeight, h = s.effectiveFilterWidth, p = s.padInfo.top, f = s.padInfo.left, m = vt(t, e, n);
  for (let g = 0; g < s.batchSize; ++g)
    for (let b = 0; b < s.inChannels; ++b)
      for (let x = 0; x < s.outHeight; ++x) {
        const w = x * a - p;
        let y = w;
        for (; y < 0; )
          y += c;
        const I = Math.min(s.inHeight, d + w);
        for (let C = 0; C < s.outWidth; ++C) {
          const v = C * l - f;
          let S = v;
          for (; S < 0; )
            S += u;
          const N = Math.min(s.inWidth, h + v);
          let R = Number.NEGATIVE_INFINITY, $ = -1;
          for (let F = y; F < I; F += c) {
            const W = F - w;
            for (let _ = S; _ < N; _ += u) {
              const A = _ - v, O = m.get(g, F, _, b);
              O > R && (R = O, o ? $ = r ? ((g * s.inHeight + F) * s.inWidth + _) * s.inChannels + b : (F * s.inWidth + _) * s.inChannels + b : $ = W * h + A);
            }
          }
          i.set($, g, x, C, b);
        }
      }
  return i;
}
function X2(n, t, e, s, o, r) {
  const i = o.strideDepth, a = o.strideHeight, l = o.strideWidth, c = o.dilationDepth, u = o.dilationHeight, d = o.dilationWidth, h = o.effectiveFilterDepth, p = o.effectiveFilterHeight, f = o.effectiveFilterWidth, m = o.padInfo.front, g = o.padInfo.top, b = o.padInfo.left, x = r === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, w = vt(o.outShape, e), y = w.values, I = o.outShape[1] * o.outShape[2] * o.outShape[3] * o.outShape[4], C = o.outShape[2] * o.outShape[3] * o.outShape[4], v = o.outShape[3] * o.outShape[4], S = o.outShape[4];
  for (let N = 0; N < o.batchSize; ++N) {
    const R = N * I, $ = N * s[0];
    for (let F = 0; F < o.inChannels; ++F)
      for (let W = 0; W < o.outDepth; ++W) {
        const _ = W * i - m;
        let A = _;
        for (; A < 0; )
          A += c;
        const O = Math.min(o.inDepth, h + _), K = R + W * C;
        for (let Z = 0; Z < o.outHeight; ++Z) {
          const B = Z * a - g;
          let Y = B;
          for (; Y < 0; )
            Y += u;
          const Q = Math.min(o.inHeight, p + B), J = K + Z * v;
          for (let j = 0; j < o.outWidth; ++j) {
            const nt = j * l - b;
            let q = nt;
            for (; q < 0; )
              q += d;
            const rt = Math.min(o.inWidth, f + nt), ht = J + j * S;
            let ft = x, pt = 0, wt = 0;
            for (let Dt = A; Dt < O; Dt += c) {
              const _t = $ + Dt * s[1];
              for (let se = Y; se < Q; se += u) {
                const At = _t + se * s[2];
                for (let Ft = q; Ft < rt; Ft += d) {
                  const Jt = At + Ft * s[3], Yt = n[Jt + F];
                  if (r === "max" && Yt > ft ? ft = Yt : r === "avg" && (pt += Yt, wt++), isNaN(ft))
                    break;
                }
                if (isNaN(ft))
                  break;
              }
              if (isNaN(ft))
                break;
            }
            const It = ht + F;
            y[It] = r === "avg" ? pt / Math.max(wt, 1) : ft;
          }
        }
      }
  }
  return w;
}
function NF(n, t) {
  const e = vt(t.outShape, "int32"), s = t.strideDepth, o = t.strideHeight, r = t.strideWidth, i = t.dilationDepth, a = t.dilationHeight, l = t.dilationWidth, c = t.effectiveFilterDepth, u = t.effectiveFilterHeight, d = t.effectiveFilterWidth, h = t.padInfo.front, p = t.padInfo.top, f = t.padInfo.left;
  for (let m = 0; m < t.batchSize; ++m)
    for (let g = 0; g < t.inChannels; ++g)
      for (let b = 0; b < t.outDepth; ++b) {
        const x = b * s - h;
        let w = x;
        for (; w < 0; )
          w += i;
        const y = Math.min(t.inDepth, c + x);
        for (let I = 0; I < t.outHeight; ++I) {
          const C = I * o - p;
          let v = C;
          for (; v < 0; )
            v += a;
          const S = Math.min(t.inHeight, u + C);
          for (let N = 0; N < t.outWidth; ++N) {
            const R = N * r - f;
            let $ = R;
            for (; $ < 0; )
              $ += l;
            const F = Math.min(t.inWidth, d + R);
            let W = Number.NEGATIVE_INFINITY, _ = -1;
            for (let A = w; A < y; A += i) {
              const O = A - x;
              for (let K = v; K < S; K += a) {
                const Z = K - C;
                for (let B = $; B < F; B += l) {
                  const Y = B - R, Q = n.get(m, A, K, B, g);
                  Q >= W && (W = Q, _ = O * u * d + Z * u + Y);
                }
              }
            }
            e.set(_, m, b, I, N, g);
          }
        }
      }
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  it(o, "avgPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(Fe(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = An(o.shape, r, i, c, a, l);
  let d;
  if (u.filterWidth === 1 && u.filterHeight === 1 && $t(u.inShape, u.outShape))
    d = ws({ inputs: { x: o }, backend: e });
  else {
    const h = e.data.get(o.dataId).values, p = dt(o.shape), f = xg(h, o.shape, o.dtype, p, u, "avg");
    d = e.makeTensorInfo(u.outShape, o.dtype, f.values);
  }
  return d;
}
const $F = {
  kernelName: jc,
  backendName: "cpu",
  kernelFunc: RF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  it(o, "avgPool3d");
  const u = Fs(o.shape, r, i, 1, a, l, c), d = e.data.get(o.dataId).values, h = X2(d, o.shape, o.dtype, dt(o.shape), u, "avg");
  return e.makeTensorInfo(h.shape, "float32", h.values);
}
const GF = {
  kernelName: Jc,
  backendName: "cpu",
  kernelFunc: EF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  it([o, r], "avgPool3DGrad");
  const u = Fs(r.shape, i, a, 1, l, c), d = u.strideDepth, h = u.strideHeight, p = u.strideWidth, f = u.filterDepth, m = u.filterHeight, g = u.filterWidth, b = u.dilationDepth, x = u.dilationHeight, w = u.dilationWidth, y = u.effectiveFilterDepth, I = u.effectiveFilterHeight, C = u.effectiveFilterWidth, v = y - 1 - u.padInfo.front, S = C - 1 - u.padInfo.left, N = I - 1 - u.padInfo.top, R = vt(r.shape, "float32"), $ = 1 / (f * m * g), F = e.bufferSync(o);
  for (let W = 0; W < u.batchSize; ++W)
    for (let _ = 0; _ < u.inChannels; ++_)
      for (let A = 0; A < u.inDepth; ++A)
        for (let O = 0; O < u.inHeight; ++O)
          for (let K = 0; K < u.inWidth; ++K) {
            const Z = A - v, B = O - N, Y = K - S;
            let Q = 0;
            for (let J = 0; J < y; J += b) {
              const j = (Z + J) / d;
              if (!(j < 0 || j >= u.outDepth || Math.floor(j) !== j))
                for (let nt = 0; nt < I; nt += x) {
                  const q = (B + nt) / h;
                  if (!(q < 0 || q >= u.outHeight || Math.floor(q) !== q))
                    for (let rt = 0; rt < C; rt += w) {
                      const ht = (Y + rt) / p;
                      if (ht < 0 || ht >= u.outWidth || Math.floor(ht) !== ht)
                        continue;
                      const ft = F.get(W, j, q, ht, _);
                      Q += ft;
                    }
                }
            }
            R.set(Q * $, W, A, O, K, _);
          }
  return e.makeTensorInfo(R.shape, R.dtype, R.values);
}
const DF = {
  kernelName: Ap,
  backendName: "cpu",
  kernelFunc: LF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r;
  it([o, r], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = An(i.shape, a, l, 1, c), d = u.strideHeight, h = u.strideWidth, p = u.filterHeight, f = u.filterWidth, m = u.dilationHeight, g = u.dilationWidth, b = u.effectiveFilterHeight, x = u.effectiveFilterWidth, w = x - 1 - u.padInfo.left, y = b - 1 - u.padInfo.top, I = vt(i.shape, "float32"), C = 1 / (p * f), v = e.data.get(o.dataId).values, S = vt(o.shape, "float32", v);
  for (let N = 0; N < u.batchSize; ++N)
    for (let R = 0; R < u.inChannels; ++R)
      for (let $ = 0; $ < u.inHeight; ++$)
        for (let F = 0; F < u.inWidth; ++F) {
          const W = $ - y, _ = F - w;
          let A = 0;
          for (let O = 0; O < b; O += m) {
            const K = (W + O) / d;
            if (!(K < 0 || K >= u.outHeight || Math.floor(K) !== K))
              for (let Z = 0; Z < x; Z += g) {
                const B = (_ + Z) / h;
                if (B < 0 || B >= u.outWidth || Math.floor(B) !== B)
                  continue;
                const Y = S.get(N, K, B, R);
                A += Y;
              }
          }
          I.set(A * C, N, $, F, R);
        }
  return e.makeTensorInfo(I.shape, I.dtype, I.values);
}
const zF = {
  kernelName: _p,
  backendName: "cpu",
  kernelFunc: MF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, scale: r, offset: i, mean: a, variance: l } = t;
  k(a.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), k(i == null || a.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), k(r == null || a.shape.length === r.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), it([o, a, l, r, i], "batchNorm");
  let { varianceEpsilon: c } = s;
  c == null && (c = 1e-3);
  const u = e.data.get(o.dataId).values, d = e.data.get(a.dataId).values, h = e.data.get(l.dataId).values, p = r ? e.data.get(r.dataId).values : new Float32Array([1]), f = i ? e.data.get(i.dataId).values : new Float32Array([0]), m = new Float32Array(u.length), g = f.length, b = p.length, x = h.length, w = d.length;
  let y = 0, I = 0, C = 0, v = 0;
  for (let S = 0; S < u.length; ++S)
    m[S] = f[y++] + (u[S] - d[I++]) * p[C++] / Math.sqrt(h[v++] + c), y >= g && (y = 0), I >= w && (I = 0), C >= b && (C = 0), v >= x && (v = 0);
  return e.makeTensorInfo(o.shape, o.dtype, m);
}
const WF = {
  kernelName: du,
  backendName: "cpu",
  kernelFunc: FF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, crops: i } = s;
  it([o], "batchToSpaceND");
  const a = r.reduce((b, x) => b * x), l = hl(o.shape, r, a), c = pl(l.length, r.length), u = fl(o.shape, r, a), d = Tm(i, r.length), h = Nm(u, i, r.length), p = Zt({ inputs: { x: o }, backend: e, attrs: { shape: l } }), f = Qe({ inputs: { x: p }, backend: e, attrs: { perm: c } }), m = Zt({ inputs: { x: f }, backend: e, attrs: { shape: u } }), g = nr({
    inputs: { x: m },
    backend: e,
    attrs: { begin: d, size: h }
  });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), g;
}
const _F = {
  kernelName: tu,
  backendName: "cpu",
  kernelFunc: VF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i } = s, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, c = pg(a, l, r.dtype, r.shape, i);
  return e.makeTensorInfo([i], r.dtype, c);
}
const OF = {
  kernelName: Op,
  backendName: "cpu",
  kernelFunc: AF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XF(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: o } = t, r = e.data.get(s.dataId).values, i = e.data.get(o.dataId).values, a = bt(Array.from(r), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const PF = {
  kernelName: Ix,
  backendName: "cpu",
  kernelFunc: XF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZF = zt(xa, (n, t) => {
  const e = t;
  return n > e.clipValueMax ? e.clipValueMax : n < e.clipValueMin ? e.clipValueMin : n;
}), KF = {
  kernelName: xa,
  backendName: "cpu",
  kernelFunc: ZF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BF = (n) => {
  const { x: t } = n.inputs, e = n.backend, s = new Float32Array(X(t.shape)), o = e.data.get(t.dataId), r = o.complexTensorInfos.real, i = o.complexTensorInfos.imag, a = e.data.get(r.dataId).values, l = e.data.get(i.dataId).values;
  for (let c = 0; c < a.length; c++) {
    const u = a[c], d = l[c];
    s[c] = Math.hypot(u, d);
  }
  return e.makeOutput(s, t.shape, "float32");
}, HF = {
  kernelName: eu,
  backendName: "cpu",
  kernelFunc: BF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xr(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.data.get(s.dataId).complexTensorInfos.imag, r = e.data.get(o.dataId).values;
  return e.makeTensorInfo(o.shape, o.dtype, r);
}
const UF = {
  kernelName: sf,
  backendName: "cpu",
  kernelFunc: Xr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pr(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s, r = Ct(o, t[0].shape)[0], i = t.map((m) => m.shape);
  vm(i, r);
  let a = ps(t.map((m) => m.shape), r);
  if (X(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((m) => X(m.shape) > 0);
  if (l.length === 1)
    return ws({ inputs: { x: l[0] }, backend: e });
  if (l[0].dtype === "complex64") {
    const m = l.map((y) => er({ inputs: { input: y }, backend: e })), g = l.map((y) => Xr({ inputs: { input: y }, backend: e })), b = Pr({ inputs: m, backend: e, attrs: { axis: r } }), x = Pr({ inputs: g, backend: e, attrs: { axis: r } }), w = en({ inputs: { real: b, imag: x }, backend: e });
    return m.forEach((y) => e.disposeIntermediateTensorInfo(y)), g.forEach((y) => e.disposeIntermediateTensorInfo(y)), e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(x), w;
  }
  const c = l.map((m) => {
    const b = [-1, X(m.shape.slice(r))];
    return Zt({ inputs: { x: m }, backend: e, attrs: { shape: b } });
  }), u = c.map((m) => ({ vals: e.data.get(m.dataId).values, shape: m.shape }));
  a = ps(
    c.map((m) => m.shape),
    1
    /* axis */
  );
  const d = c[0].shape[0] === 1, h = YI(u, a, t[0].dtype, d), p = ps(l.map((m) => m.shape), r), f = e.makeTensorInfo(p, t[0].dtype, h);
  return c.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const YF = {
  kernelName: nu,
  backendName: "cpu",
  kernelFunc: Pr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function P2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s;
  it([o, r], "conv2d");
  const d = Ws(l), h = $e(o.shape, r.shape, i, c, a, u, !1, d), p = h.filterHeight, f = h.filterWidth, m = h.dilationHeight, g = h.dilationWidth, b = h.padInfo.left, x = h.padInfo.top, w = h.dataFormat === "channelsLast", y = new Me(h.outShape, o.dtype), I = dt(o.shape), C = dt(r.shape), v = I[0], S = w ? I[1] : I[2], N = w ? I[2] : 1, R = w ? 1 : I[1], $ = y.strides[0], F = w ? y.strides[1] : y.strides[2], W = w ? y.strides[2] : 1, _ = w ? 1 : y.strides[1], A = e.data.get(o.dataId).values, O = e.data.get(r.dataId).values, K = y.values;
  for (let Z = 0; Z < h.batchSize; ++Z) {
    const B = Z * v, Y = Z * $;
    for (let Q = 0; Q < h.outHeight; ++Q) {
      const J = Y + Q * F, j = Q * h.strideHeight - x;
      for (let nt = 0; nt < p; ++nt) {
        const q = j + nt * m;
        if (q < 0 || q >= h.inHeight)
          continue;
        const rt = nt * C[0], ht = B + q * S;
        for (let ft = 0; ft < h.outWidth; ++ft) {
          const pt = J + ft * W, wt = ft * h.strideWidth - b;
          for (let It = 0; It < f; ++It) {
            const Dt = wt + It * g;
            if (Dt < 0 || Dt >= h.inWidth)
              continue;
            const _t = rt + It * C[1], se = ht + Dt * N;
            let At = _t;
            for (let Ft = 0; Ft < h.inChannels; ++Ft) {
              const Jt = A[se + Ft * R];
              for (let Yt = 0; Yt < h.outChannels; ++Yt)
                K[pt + Yt * _] += Jt * O[At + Yt];
              At += h.outChannels;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(y.shape, y.dtype, K);
}
const QF = {
  kernelName: su,
  backendName: "cpu",
  kernelFunc: P2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s;
  it([o, r], "conv2dBackpropFilter");
  const d = Ws(l), h = $e(o.shape, u, i, 1, a, c, !1, d), { strideHeight: p, strideWidth: f, filterHeight: m, filterWidth: g } = h, b = h.dataFormat === "channelsLast", x = new Me(h.filterShape, "float32"), w = h.padInfo.left, y = h.padInfo.top, I = e.data.get(o.dataId).values, C = e.data.get(r.dataId).values, v = new Me(o.shape, o.dtype, I), S = new Me(r.shape, r.dtype, C);
  for (let N = 0; N < m; ++N) {
    const R = Math.max(0, Math.ceil((y - N) / p)), $ = Math.min(h.outHeight, (h.inHeight + y - N) / p);
    for (let F = 0; F < g; ++F) {
      const W = Math.max(0, Math.ceil((w - F) / f)), _ = Math.min(h.outWidth, (h.inWidth + w - F) / f);
      for (let A = 0; A < h.inChannels; ++A)
        for (let O = 0; O < h.outChannels; ++O) {
          let K = 0;
          for (let Z = 0; Z < h.batchSize; ++Z)
            for (let B = R; B < $; ++B) {
              const Y = N + B * p - y;
              for (let Q = W; Q < _; ++Q) {
                const J = F + Q * f - w;
                b ? K += v.get(Z, Y, J, A) * S.get(Z, B, Q, O) : K += v.get(Z, A, Y, J) * S.get(Z, O, B, Q);
              }
            }
          x.set(K, N, F, A, O);
        }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const JF = {
  kernelName: Pp,
  backendName: "cpu",
  kernelFunc: jF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s;
  it([o, r], "conv2dBackpropInput");
  const d = dt(r.shape), h = dt(o.shape);
  let p = Ws(c);
  const f = $e(i, r.shape, a, 1, l, u, !1, p), m = new Me(f.inShape, "float32"), g = m.values, b = e.data.get(o.dataId).values, x = e.data.get(r.dataId).values, [w, y, I] = d, { batchSize: C, filterHeight: v, filterWidth: S, inChannels: N, inHeight: R, inWidth: $, outChannels: F, outHeight: W, outWidth: _, strideHeight: A, strideWidth: O } = f;
  p = f.dataFormat;
  const K = v - 1 - f.padInfo.top, Z = S - 1 - f.padInfo.left, B = p === "channelsLast", Y = m.strides[0], Q = B ? m.strides[1] : m.strides[2], J = B ? m.strides[2] : 1, j = B ? 1 : m.strides[1], nt = h[0], q = B ? h[1] : h[2], rt = B ? h[2] : 1, ht = B ? 1 : h[1];
  for (let ft = 0; ft < C; ++ft)
    for (let pt = 0; pt < N; ++pt)
      for (let wt = 0; wt < R; ++wt) {
        const It = wt - K, Dt = Math.max(0, Math.ceil(It / A)), _t = Math.min(W, (v + It) / A);
        for (let se = 0; se < $; ++se) {
          const At = se - Z, Ft = Math.max(0, Math.ceil(At / O)), Jt = Math.min(_, (S + At) / O);
          let Yt = 0;
          for (let ke = Dt; ke < _t; ++ke) {
            const Os = ke * A - It;
            for (let hn = Ft; hn < Jt; ++hn) {
              const vo = hn * O - At, Pn = nt * ft + q * ke + rt * hn, vs = w * (v - 1 - Os) + y * (S - 1 - vo) + I * pt;
              for (let Xs = 0; Xs < F; ++Xs) {
                const Ps = b[Pn + ht * Xs], Zs = x[vs + Xs];
                Yt += Ps * Zs;
              }
            }
          }
          const Cs = Y * ft + Q * wt + J * se + j * pt;
          g[Cs] = Yt;
        }
      }
  return e.makeTensorInfo(m.shape, m.dtype, m.values);
}
const tW = {
  kernelName: ou,
  backendName: "cpu",
  kernelFunc: qF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l } = s;
  it([o, r], "conv3d");
  const c = mo(o.shape, r.shape, i, l, a), { filterDepth: u, filterHeight: d, filterWidth: h, dilationDepth: p, dilationHeight: f, dilationWidth: m, padInfo: g } = c, b = g.front, x = g.left, w = g.top, y = new Me(c.outShape, o.dtype), I = e.data.get(o.dataId).values, C = e.data.get(r.dataId).values, v = y.values, S = dt(o.shape), N = dt(r.shape);
  for (let R = 0; R < c.batchSize; ++R) {
    const $ = R * S[0], F = R * y.strides[0];
    for (let W = 0; W < c.outDepth; ++W) {
      const _ = F + W * y.strides[1], A = W * c.strideDepth - b;
      for (let O = 0; O < u; ++O) {
        const K = A + O * p;
        if (K < 0 || K >= c.inDepth)
          continue;
        const Z = O * N[0], B = $ + K * S[1];
        for (let Y = 0; Y < c.outHeight; ++Y) {
          const Q = _ + Y * y.strides[2], J = Y * c.strideHeight - w;
          for (let j = 0; j < d; ++j) {
            const nt = J + j * f;
            if (nt < 0 || nt >= c.inHeight)
              continue;
            const q = Z + j * N[1], rt = B + nt * S[2];
            for (let ht = 0; ht < c.outWidth; ++ht) {
              const ft = Q + ht * c.outChannels, pt = ht * c.strideWidth - x;
              for (let wt = 0; wt < h; ++wt) {
                const It = pt + wt * m;
                if (It < 0 || It >= c.inWidth)
                  continue;
                const Dt = q + wt * N[2], _t = rt + It * c.inChannels;
                let se = Dt;
                for (let At = 0; At < c.inChannels; ++At) {
                  const Ft = I[_t + At];
                  for (let Jt = 0; Jt < c.outChannels; ++Jt)
                    v[ft + Jt] += Ft * C[se + Jt];
                  se += c.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(y.shape, y.dtype, y.values);
}
const nW = {
  kernelName: ru,
  backendName: "cpu",
  kernelFunc: eW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, filterShape: l } = s;
  it([o, r], "conv3dBackpropFilterV2");
  const c = dt(o.shape), u = dt(r.shape), d = mo(o.shape, l, i, 1, a), h = d.strideDepth, p = d.strideHeight, f = d.strideWidth, m = d.filterDepth, g = d.filterHeight, b = d.filterWidth, x = new Me(d.filterShape, "float32"), w = x.values, [y, I, C, v] = x.strides, S = e.data.get(r.dataId).values, [N, R, $, F] = u, W = e.data.get(o.dataId).values, [_, A, O, K] = c, Z = d.padInfo.front, B = d.padInfo.left, Y = d.padInfo.top;
  for (let Q = 0; Q < m; ++Q) {
    const J = Math.max(0, Math.ceil((Z - Q) / h)), j = Math.min(d.outDepth, (d.inDepth + Z - Q) / h), nt = Q * y;
    for (let q = 0; q < g; ++q) {
      const rt = Math.max(0, Math.ceil((Y - q) / p)), ht = Math.min(d.outHeight, (d.inHeight + Y - q) / p), ft = q * I + nt;
      for (let pt = 0; pt < b; ++pt) {
        const wt = Math.max(0, Math.ceil((B - pt) / f)), It = Math.min(d.outWidth, (d.inWidth + B - pt) / f), Dt = pt * C + ft;
        for (let _t = 0; _t < d.inChannels; ++_t) {
          const se = _t * v + Dt;
          for (let At = 0; At < d.outChannels; ++At) {
            let Ft = 0;
            for (let Jt = 0; Jt < d.batchSize; ++Jt) {
              const Yt = Jt * _, Cs = Jt * N;
              for (let ke = J; ke < j; ++ke) {
                const hn = (Q + ke * h - Z) * A + Yt, vo = ke * R + Cs;
                for (let Pn = rt; Pn < ht; ++Pn) {
                  const Xs = (q + Pn * p - Y) * O + hn, Ps = Pn * $ + vo;
                  for (let Zs = wt; Zs < It; ++Zs) {
                    const Gd = (pt + Zs * f - B) * K + Xs, Ld = Zs * F + Ps;
                    Ft += W[Gd + _t] * S[Ld + At];
                  }
                }
              }
            }
            w[se + At] = Ft;
          }
        }
      }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const oW = {
  kernelName: Zp,
  backendName: "cpu",
  kernelFunc: sW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { pad: i, strides: a, inputShape: l } = s;
  it([o], "conv3dBackpropInputV2");
  const c = dt(o.shape), u = dt(r.shape), d = mo(l, r.shape, a, 1, i), h = new Me(d.inShape, "float32"), p = h.values, [f, m, g, b] = h.strides, x = e.data.get(o.dataId).values, [w, y, I, C] = c, v = e.data.get(r.dataId).values, [S, N, R, $] = u, { batchSize: F, filterDepth: W, filterHeight: _, filterWidth: A, inChannels: O, inDepth: K, inHeight: Z, inWidth: B, outChannels: Y, outDepth: Q, outHeight: J, outWidth: j, strideDepth: nt, strideHeight: q, strideWidth: rt } = d, ht = W - 1 - d.padInfo.front, ft = _ - 1 - d.padInfo.top, pt = A - 1 - d.padInfo.left;
  for (let wt = 0; wt < F; ++wt)
    for (let It = 0; It < O; ++It)
      for (let Dt = 0; Dt < K; ++Dt) {
        const _t = Dt - ht, se = Math.max(0, Math.ceil(_t / nt)), At = Math.min(Q, (W + _t) / nt);
        for (let Ft = 0; Ft < Z; ++Ft) {
          const Jt = Ft - ft, Yt = Math.max(0, Math.ceil(Jt / q)), Cs = Math.min(J, (_ + Jt) / q);
          for (let ke = 0; ke < B; ++ke) {
            const Os = ke - pt, hn = Math.max(0, Math.ceil(Os / rt)), vo = Math.min(j, (A + Os) / rt);
            let Pn = 0;
            for (let vs = se; vs < At; ++vs) {
              const Xs = vs * nt - _t;
              for (let Ps = Yt; Ps < Cs; ++Ps) {
                const Zs = Ps * q - Jt;
                for (let gi = hn; gi < vo; ++gi) {
                  const Gd = gi * rt - Os, Ld = w * wt + y * vs + I * Ps + C * gi, Mv = S * (W - 1 - Xs) + N * (_ - 1 - Zs) + R * (A - 1 - Gd) + $ * It;
                  for (let zl = 0; zl < Y; ++zl) {
                    const zv = x[Ld + zl], Fv = v[Mv + zl];
                    Pn += zv * Fv;
                  }
                }
              }
            }
            p[f * wt + m * Dt + g * Ft + b * ke + It] = Pn;
          }
        }
      }
  return e.makeTensorInfo(h.shape, h.dtype, h.values);
}
const iW = {
  kernelName: Kp,
  backendName: "cpu",
  kernelFunc: rW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aW = zt(ya, (n) => Math.cos(n)), lW = {
  kernelName: ya,
  backendName: "cpu",
  kernelFunc: aW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cW = zt(wa, (n) => Math.cosh(n)), uW = {
  kernelName: wa,
  backendName: "cpu",
  kernelFunc: cW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: o, boxes: r, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, [u, d, h, p] = o.shape, f = r.shape[0], [m, g] = a, b = vt([f, m, g, p], "float32"), x = e.data.get(r.dataId).values, w = e.data.get(i.dataId).values, y = e.data.get(o.dataId).values, I = dt(o.shape), C = dt(b.shape);
  for (let v = 0; v < f; v++) {
    const S = v * 4, N = x[S], R = x[S + 1], $ = x[S + 2], F = x[S + 3], W = w[v];
    if (W >= u)
      continue;
    const _ = m > 1 ? ($ - N) * (d - 1) / (m - 1) : 0, A = g > 1 ? (F - R) * (h - 1) / (g - 1) : 0;
    for (let O = 0; O < m; O++) {
      const K = m > 1 ? N * (d - 1) + O * _ : 0.5 * (N + $) * (d - 1);
      if (K < 0 || K > d - 1) {
        for (let Z = 0; Z < g; Z++)
          for (let B = 0; B < p; B++) {
            const Y = B + Z * C[2] + O * C[1] + v * C[0];
            b.values[Y] = c;
          }
        continue;
      }
      if (l === "bilinear") {
        const Z = Math.floor(K), B = Math.ceil(K), Y = K - Z;
        for (let Q = 0; Q < g; Q++) {
          const J = g > 1 ? R * (h - 1) + Q * A : 0.5 * (R + F) * (h - 1);
          if (J < 0 || J > h - 1) {
            for (let rt = 0; rt < p; rt++) {
              const ht = rt + Q * C[2] + O * C[1] + v * C[0];
              b.values[ht] = c;
            }
            continue;
          }
          const j = Math.floor(J), nt = Math.ceil(J), q = J - j;
          for (let rt = 0; rt < p; rt++) {
            let ht = rt + j * I[2] + Z * I[1] + W * I[0];
            const ft = y[ht];
            ht = rt + nt * I[2] + Z * I[1] + W * I[0];
            const pt = y[ht];
            ht = rt + j * I[2] + B * I[1] + W * I[0];
            const wt = y[ht];
            ht = rt + nt * I[2] + B * I[1] + W * I[0];
            const It = y[ht], Dt = ft + (pt - ft) * q, _t = wt + (It - wt) * q;
            ht = rt + Q * C[2] + O * C[1] + v * C[0], b.values[ht] = Dt + (_t - Dt) * Y;
          }
        }
      } else
        for (let Z = 0; Z < g; ++Z) {
          const B = g > 1 ? R * (h - 1) + Z * A : 0.5 * (R + F) * (h - 1);
          if (B < 0 || B > h - 1) {
            for (let J = 0; J < p; J++) {
              const j = J + Z * C[2] + O * C[1] + v * C[0];
              b.values[j] = c;
            }
            continue;
          }
          const Y = Math.round(B), Q = Math.round(K);
          for (let J = 0; J < p; J++) {
            const j = J + Y * I[2] + Q * I[1] + W * I[0], nt = J + Z * C[2] + O * C[1] + v * C[0];
            b.values[nt] = y[j];
          }
        }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const hW = {
  kernelName: Hp,
  backendName: "cpu",
  kernelFunc: dW
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  it(o, "cumprod");
  const l = ne([r], o.shape.length);
  let c = o;
  l != null && (c = Qe({ inputs: { x: o }, backend: e, attrs: { perm: l } }));
  const u = ce(1, o.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const d = rn(c.dtype, "int32"), h = Hc(X(c.shape), d), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (b, x) => b + f - x - 1 : (b, x) => b + x;
  for (let b = 0; b < p.length; b += f)
    for (let x = 0; x < f; x++) {
      const w = m(b, x);
      if (x === 0)
        h[w] = i ? 1 : p[w];
      else {
        const y = m(b, x - 1);
        h[w] = i ? p[y] * h[y] : p[w] * h[y];
      }
    }
  const g = e.makeTensorInfo(c.shape, d, h);
  if (l != null) {
    const b = go(l), x = Qe({ inputs: { x: g }, backend: e, attrs: { perm: b } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(c), x;
  }
  return g;
}
const fW = {
  kernelName: Bp,
  backendName: "cpu",
  kernelFunc: pW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  it(o, "cumsum");
  const l = ne([r], o.shape.length);
  let c = o;
  l != null && (c = Qe({ inputs: { x: o }, backend: e, attrs: { perm: l } }));
  const u = ce(1, o.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const d = rn(c.dtype, "int32"), h = Re(X(c.shape), d), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], m = a ? (b, x) => b + f - x - 1 : (b, x) => b + x;
  for (let b = 0; b < p.length; b += f)
    for (let x = 0; x < f; x++) {
      const w = m(b, x);
      if (x === 0)
        h[w] = i ? 0 : p[w];
      else {
        const y = m(b, x - 1);
        h[w] = i ? p[y] + h[y] : p[w] + h[y];
      }
    }
  const g = e.makeTensorInfo(c.shape, d, h);
  if (l != null) {
    const b = go(l), x = Qe({ inputs: { x: g }, backend: e, attrs: { perm: b } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(c), x;
  }
  return g;
}
const gW = {
  kernelName: iu,
  backendName: "cpu",
  kernelFunc: mW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i, binaryOutput: a } = s;
  if (o.shape.length === 1) {
    const l = e.data.get(o.dataId).values, c = e.data.get(r.dataId).values, u = pg(l, c, r.dtype, r.shape, i);
    return e.makeTensorInfo([i], r.dtype, u);
  } else if (o.shape.length === 2) {
    const l = e.bufferSync(o), c = e.bufferSync(r), u = HI(l, c, i, a);
    return e.makeTensorInfo(u.shape, r.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`);
}
const xW = {
  kernelName: Up,
  backendName: "cpu",
  kernelFunc: bW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockSize: r, dataFormat: i } = s;
  k(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);
  const a = o.shape[0], l = o.shape[1], c = o.shape[2], u = o.shape[3], d = l * r, h = c * r, p = u / (r * r), f = e.data.get(o.dataId).values, m = new Float32Array(a * d * h * p);
  let g = 0;
  for (let b = 0; b < a; ++b)
    for (let x = 0; x < d; ++x) {
      const w = Math.floor(x / r), y = x % r;
      for (let I = 0; I < h; ++I) {
        const C = Math.floor(I / r), v = I % r, S = (y * r + v) * p;
        for (let N = 0; N < p; ++N) {
          const $ = N + S + u * (C + c * (w + l * b));
          m[g++] = f[$];
        }
      }
    }
  return e.makeTensorInfo([a, d, h, p], o.dtype, m);
}
const wW = {
  kernelName: Yp,
  backendName: "cpu",
  kernelFunc: yW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  it([o, r], "depthwiseConv2DNative");
  const u = dt(o.shape), d = dt(r.shape);
  let h = l;
  h == null && (h = [1, 1]), k(Fe(i, h), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${h}'`);
  const p = $e(
    o.shape,
    r.shape,
    i,
    h,
    a,
    c,
    !0
    /* depthwise */
  ), { filterHeight: f, filterWidth: m, dilationHeight: g, dilationWidth: b, padInfo: x } = p, w = x.left, y = x.top, I = p.outChannels / p.inChannels, C = new Me(p.outShape, o.dtype), v = e.data.get(o.dataId).values, S = e.data.get(r.dataId).values, N = C.values;
  for (let R = 0; R < p.batchSize; ++R) {
    const $ = R * u[0], F = R * C.strides[0];
    for (let W = 0; W < p.outHeight; ++W) {
      const _ = F + W * C.strides[1], A = W * p.strideHeight - y;
      for (let O = 0; O < f; ++O) {
        const K = A + O * g;
        if (K < 0 || K >= p.inHeight)
          continue;
        const Z = O * d[0], B = $ + K * u[1];
        for (let Y = 0; Y < p.outWidth; ++Y) {
          const Q = _ + Y * C.strides[2], J = Y * p.strideWidth - w;
          for (let j = 0; j < m; ++j) {
            const nt = J + j * b;
            if (nt < 0 || nt >= p.inWidth)
              continue;
            const q = Z + j * d[1], rt = B + nt * p.inChannels;
            let ht = Q, ft = q;
            for (let pt = 0; pt < p.inChannels; ++pt) {
              const wt = v[rt + pt];
              for (let It = 0; It < I; ++It)
                N[ht + It] += wt * S[ft + It];
              ht += I, ft += I;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(C.shape, C.dtype, C.values);
}
const IW = {
  kernelName: au,
  backendName: "cpu",
  kernelFunc: Z2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s;
  it([o, r], "depthwiseConv2dNativeBackpropFilter");
  const d = $e(
    o.shape,
    u,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), { strideHeight: h, strideWidth: p, filterHeight: f, filterWidth: m } = d, g = new Me(d.filterShape, "float32"), b = d.padInfo.left, x = d.padInfo.top, w = d.outChannels / d.inChannels, y = e.data.get(o.dataId).values, I = new Me(o.shape, o.dtype, y), C = e.data.get(r.dataId).values, v = new Me(r.shape, r.dtype, C);
  for (let S = 0; S < f; ++S) {
    const N = Math.max(0, Math.ceil((x - S) / h)), R = Math.min(d.outHeight, (d.inHeight + x - S) / h);
    for (let $ = 0; $ < m; ++$) {
      const F = Math.max(0, Math.ceil((b - $) / p)), W = Math.min(d.outWidth, (d.inWidth + b - $) / p);
      for (let _ = 0; _ < d.outChannels; ++_) {
        const A = Math.trunc(_ / w), O = _ % w;
        let K = 0;
        for (let Z = 0; Z < d.batchSize; ++Z)
          for (let B = N; B < R; ++B) {
            const Y = S + B * h - x;
            for (let Q = F; Q < W; ++Q) {
              const J = $ + Q * p - b;
              K += I.get(Z, Y, J, A) * v.get(Z, B, Q, _);
            }
          }
        g.set(K, S, $, A, O);
      }
    }
  }
  return e.makeTensorInfo(g.shape, g.dtype, g.values);
}
const vW = {
  kernelName: Qp,
  backendName: "cpu",
  kernelFunc: CW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s;
  it([o, r], "depthwiseConv2DNativeBackpropInput");
  const d = dt(o.shape), h = dt(r.shape), p = $e(
    u,
    r.shape,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), f = new Me(p.inShape, "float32"), m = f.values, [g, b, x] = f.strides, w = e.data.get(o.dataId).values, [y, I, C] = d, v = e.data.get(r.dataId).values, [S, N, R] = h, { batchSize: $, filterHeight: F, filterWidth: W, inChannels: _, inHeight: A, inWidth: O, outChannels: K, outHeight: Z, outWidth: B, strideHeight: Y, strideWidth: Q } = p, J = F - 1 - p.padInfo.top, j = W - 1 - p.padInfo.left, nt = K / _;
  for (let q = 0; q < $; ++q)
    for (let rt = 0; rt < _; ++rt)
      for (let ht = 0; ht < A; ++ht) {
        const ft = ht - J, pt = Math.max(0, Math.ceil(ft / Y)), wt = Math.min(Z, (F + ft) / Y);
        for (let It = 0; It < O; ++It) {
          const Dt = It - j, _t = Math.max(0, Math.ceil(Dt / Q)), se = Math.min(B, (W + Dt) / Q);
          let At = 0;
          for (let Ft = pt; Ft < wt; ++Ft) {
            const Jt = Ft * Y - ft;
            for (let Yt = _t; Yt < se; ++Yt) {
              const Cs = Yt * Q - Dt, ke = y * q + I * Ft + C * Yt, Os = S * (F - 1 - Jt) + N * (W - 1 - Cs) + R * rt;
              for (let hn = 0; hn < nt; ++hn) {
                const vo = rt * nt + hn, Pn = w[ke + vo], vs = v[Os + hn];
                At += Pn * vs;
              }
            }
          }
          m[g * q + b * ht + x * It + rt] = At;
        }
      }
  return e.makeTensorInfo(f.shape, f.dtype, f.values);
}
const SW = {
  kernelName: jp,
  backendName: "cpu",
  kernelFunc: kW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TW(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, o = X(s.shape), r = e.data.get(s.dataId).values, i = vt([o, o], s.dtype), a = i.values;
  for (let c = 0; c < r.length; c++)
    a[c * o + c] = r[c];
  const l = [...s.shape, ...s.shape];
  return e.makeTensorInfo(l, i.dtype, i.values);
}
const NW = {
  kernelName: Cx,
  backendName: "cpu",
  kernelFunc: TW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RW = {
  kernelName: lu,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: o } = n, { strides: r, pad: i, dilations: a } = e, l = t, c = l.data.get(s.dataId).values, u = s.shape.length, d = l.data.get(o.dataId).values, h = o.shape.length, { batchSize: p, inHeight: f, inWidth: m, inChannels: g, outHeight: b, outWidth: x, padInfo: w, strideHeight: y, strideWidth: I, filterHeight: C, filterWidth: v, dilationHeight: S, dilationWidth: N, outShape: R } = al(s.shape, o.shape, r, i, "NHWC", a), $ = X(R), F = R.length, W = ae(s.dtype, $);
    for (let A = 0; A < p; ++A)
      for (let O = 0; O < b; ++O) {
        const K = O * y - w.top;
        for (let Z = 0; Z < x; ++Z) {
          const B = Z * I - w.left;
          for (let Y = 0; Y < g; ++Y) {
            let Q = Number.MIN_SAFE_INTEGER;
            for (let j = 0; j < C; ++j) {
              const nt = K + j * S;
              if (nt >= 0 && nt < f)
                for (let q = 0; q < v; ++q) {
                  const rt = B + q * N;
                  if (rt >= 0 && rt < m) {
                    const ht = Yn([A, nt, rt, Y], u, dt(s.shape)), ft = Yn([j, q, Y], h, dt(o.shape)), pt = c[ht] + d[ft];
                    pt > Q && (Q = pt);
                  }
                }
            }
            const J = Yn([A, O, Z, Y], F, dt(R));
            W[J] = Q;
          }
        }
      }
    return { dataId: l.write(fo(W, s.dtype), R, s.dtype), shape: R, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $W = {
  kernelName: Eh,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: o, dy: r } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = Mn(s.shape, c.data.get(s.dataId).values), d = Mn(o.shape, c.data.get(o.dataId).values), { batchSize: h, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: b, padInfo: x, strideHeight: w, strideWidth: y, filterHeight: I, filterWidth: C, dilationHeight: v, dilationWidth: S, outShape: N } = al(s.shape, o.shape, i, a, "NHWC", l);
    k(r.rank === N.length, () => `Error in ${Eh}, dy must have the same rank as output ${N.length}, but got ${r.rank}`);
    const R = Mn(N, c.data.get(r.dataId).values), $ = Mp(o.shape, o.dtype);
    for (let W = 0; W < h; ++W)
      for (let _ = 0; _ < g; ++_) {
        const A = _ * w - x.top;
        for (let O = 0; O < b; ++O) {
          const K = O * y - x.left;
          for (let Z = 0; Z < m; ++Z) {
            let B = Number.MIN_SAFE_INTEGER, Y = 0, Q = 0;
            for (let J = 0; J < I; ++J) {
              const j = A + J * v;
              if (j >= 0 && j < p)
                for (let nt = 0; nt < C; ++nt) {
                  const q = K + nt * S;
                  if (q >= 0 && q < f) {
                    const rt = u[W][j][q][Z] + d[J][nt][Z];
                    rt > B && (B = rt, Y = J, Q = nt);
                  }
                }
            }
            $[Y][Q][Z] += R[W][_][O][Z];
          }
        }
      }
    return { dataId: c.write(fo($, s.dtype), o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EW = {
  kernelName: $h,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: o, dy: r } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = Mn(s.shape, c.data.get(s.dataId).values), d = Mn(o.shape, c.data.get(o.dataId).values), { batchSize: h, inHeight: p, inWidth: f, inChannels: m, outHeight: g, outWidth: b, padInfo: x, strideHeight: w, strideWidth: y, filterHeight: I, filterWidth: C, dilationHeight: v, dilationWidth: S, outShape: N } = al(s.shape, o.shape, i, a, "NHWC", l);
    k(r.rank === N.length, () => `Error in ${$h}, dy must have the same rank as output ${N.length}, but got ${r.rank}`);
    const R = Mn(N, c.data.get(r.dataId).values), $ = Mp(s.shape, s.dtype);
    for (let W = 0; W < h; ++W)
      for (let _ = 0; _ < g; ++_) {
        const A = _ * w - x.top;
        for (let O = 0; O < b; ++O) {
          const K = O * y - x.left;
          for (let Z = 0; Z < m; ++Z) {
            let B = Number.MIN_SAFE_INTEGER, Y = A < 0 ? 0 : A, Q = K < 0 ? 0 : K;
            for (let J = 0; J < I; ++J) {
              const j = A + J * v;
              if (j >= 0 && j < p)
                for (let nt = 0; nt < C; ++nt) {
                  const q = K + nt * S;
                  if (q >= 0 && q < f) {
                    const rt = u[W][j][q][Z] + d[J][nt][Z];
                    rt > B && (B = rt, Y = j, Q = q);
                  }
                }
            }
            $[W][Y][Q][Z] += R[W][_][O][Z];
          }
        }
      }
    return { dataId: c.write(fo($, s.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vl(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  it(o, "sum");
  let a;
  o.dtype === "bool" ? a = po({ inputs: { x: o }, backend: e, attrs: { dtype: "int32" } }) : a = ws({ inputs: { x: o }, backend: e });
  const l = a.shape.length, c = Ct(r, a.shape), u = ne(c, l);
  let d = c, h = a;
  u != null && (h = Qe({ inputs: { x: a }, backend: e, attrs: { perm: u } }), d = ce(d.length, l)), Ee("sum", d, h.shape.length);
  const [p, f] = Ce(h.shape, d), m = rn(h.dtype, "int32");
  let g = Lc(e, p, m);
  const b = X(f), x = e.data.get(g.dataId).values, w = e.data.get(h.dataId).values;
  for (let y = 0; y < x.length; ++y) {
    const I = y * b;
    let C = 0;
    for (let v = 0; v < b; ++v)
      C += w[I + v];
    x[y] = C;
  }
  if (i) {
    const y = le(g.shape, c), I = g;
    g = Zt({ inputs: { x: g }, backend: e, attrs: { shape: y } }), e.disposeIntermediateTensorInfo(I);
  }
  return e.disposeIntermediateTensorInfo(a), u != null && e.disposeIntermediateTensorInfo(h), g;
}
const GW = {
  kernelName: Ou,
  backendName: "cpu",
  kernelFunc: vl
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: o } = s, r = t, { allDims: i, summedDims: a, idDims: l } = zm(o, r.length);
  Wm(i.length, l, r);
  const { path: c, steps: u } = Vm(a, l), d = u.length;
  let h = null, p = i.length;
  const f = [];
  for (let m = 0; m < d; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: b, expandDims: x } = Fm(p, l[g]);
      let w;
      _m(b) ? w = r[g] : (w = Qe({ inputs: { x: r[g] }, backend: e, attrs: { perm: b } }), f.push(w));
      const y = w.shape.slice();
      for (let I = 0; I < x.length; ++I)
        y.splice(x[I], 0, 1);
      $t(w.shape, y) || (w = Zt({ inputs: { x: w }, backend: e, attrs: { shape: y } }), f.push(w)), h === null ? h = w : (h = Id({ inputs: { a: w, b: h }, backend: e }), f.push(h));
    }
    m < d - 1 && (c[m] >= 0 && (h = vl({
      inputs: { x: h },
      backend: e,
      attrs: {
        axis: c[m] - (i.length - p),
        keepDims: !1
      }
    }), f.push(h)), p--);
  }
  for (const m of f)
    m !== h && e.disposeIntermediateTensorInfo(m);
  return h;
}
const DW = {
  kernelName: vx,
  backendName: "cpu",
  kernelFunc: LW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MW(n) {
  const { inputs: t, backend: e } = n, { dy: s, y: o } = t;
  it([s, o], "eluGrad");
  const r = new Float32Array(X(o.shape)), i = e.data.get(o.dataId).values, a = e.data.get(s.dataId).values;
  for (let l = 0; l < i.length; ++l) {
    const c = i[l];
    c >= 1 ? r[l] = a[l] : r[l] = a[l] * (c + 1);
  }
  return e.makeTensorInfo(o.shape, "float32", r);
}
const zW = {
  kernelName: Jp,
  backendName: "cpu",
  kernelFunc: MW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FW = Rm, WW = $m, VW = Em, _W = Gm, AW = Lm, OW = Dm, XW = zt(va, (n) => {
  const t = Math.sign(n), e = Math.abs(n), s = 1 / (1 + FW * e);
  return t * (1 - ((((OW * s + AW) * s + _W) * s + VW) * s + WW) * s * Math.exp(-e * e));
}), PW = {
  kernelName: va,
  backendName: "cpu",
  kernelFunc: XW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zc(n) {
  const { inputs: t, backend: e, attrs: s } = n, { input: o } = t, { dim: r } = s, i = o.shape.length, a = o.shape.slice();
  let l = r;
  return r < 0 && (k(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + r + 1), a.splice(l, 0, 1), Zt({ inputs: { x: o }, backend: e, attrs: { shape: a } });
}
const ZW = {
  kernelName: uu,
  backendName: "cpu",
  kernelFunc: zc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KW = he((n, t) => n / t), yg = ve(Ia, KW), pp = {
  kernelName: Ia,
  backendName: "cpu",
  kernelFunc: yg
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K2(n, t, e) {
  const s = n.shape, o = s[0], r = s[1], i = e.data.get(n.dataId), a = i.complexTensorInfos.real, l = i.complexTensorInfos.imag, c = [o, r], u = X(c), d = Ie("float32", u), h = Ie("float32", u);
  for (let g = 0; g < o; g++) {
    const b = nr({
      inputs: { x: a },
      backend: e,
      attrs: { begin: [g, 0], size: [1, r] }
    }), x = nr({
      inputs: { x: l },
      backend: e,
      attrs: { begin: [g, 0], size: [1, r] }
    }), w = en({ inputs: { real: b, imag: x }, backend: e }), { real: y, imag: I } = BW(w, t, e), C = Ds(y, I);
    for (let v = 0; v < r; v++) {
      const S = Mm(C, v);
      d[g * r + v] = S.real, h[g * r + v] = S.imag;
    }
    e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(x), e.disposeIntermediateTensorInfo(w);
  }
  const p = e.makeTensorInfo(c, "float32", d), f = e.makeTensorInfo(c, "float32", h), m = en({ inputs: { real: p, imag: f }, backend: e });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), m;
}
function BW(n, t, e) {
  const s = X(n.shape), o = e.data.get(n.dataId), r = e.data.get(o.complexTensorInfos.real.dataId).values, i = e.data.get(o.complexTensorInfos.imag.dataId).values;
  if (HW(s)) {
    const a = fp(r, i, s, t, e), l = [n.shape[0], n.shape[1]];
    if (t) {
      const c = e.makeTensorInfo(l, "float32", a.real), u = e.makeTensorInfo(l, "float32", a.imag), d = e.makeTensorInfo([], "float32", zs(s, "float32")), h = ws({ inputs: { x: d }, backend: e }), p = pp.kernelFunc({ inputs: { a: c, b: d }, backend: e }), f = pp.kernelFunc({ inputs: { a: u, b: h }, backend: e }), m = e.data.get(p.dataId).values, g = e.data.get(f.dataId).values;
      return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), { real: m, imag: g };
    }
    return a;
  } else {
    const a = Ds(r, i), l = UW(a, s, t);
    return ry(l);
  }
}
function HW(n) {
  return (n & n - 1) === 0;
}
function fp(n, t, e, s, o) {
  if (e === 1)
    return { real: n, imag: t };
  const r = Ds(n, t), i = e / 2, a = iy(r), l = a.real, c = a.imag, u = [l.length], d = o.makeTensorInfo(u, "float32", l), h = o.makeTensorInfo(u, "float32", c), p = en({ inputs: { real: d, imag: h }, backend: o }), f = ay(r), m = f.real, g = f.imag, b = [m.length], x = o.makeTensorInfo(b, "float32", m), w = o.makeTensorInfo(b, "float32", g), y = en({ inputs: { real: x, imag: w }, backend: o }), I = fp(l, c, i, s, o), C = I.real, v = I.imag, S = [C.length], N = o.makeTensorInfo(S, "float32", C), R = o.makeTensorInfo(S, "float32", v), $ = en({
    inputs: { real: N, imag: R },
    backend: o
  }), F = fp(m, g, i, s, o), W = F.real, _ = F.imag, A = [W.length], O = o.makeTensorInfo(A, "float32", W), K = o.makeTensorInfo(A, "float32", _), Z = en({ inputs: { real: O, imag: K }, backend: o }), B = cy(e, s), Y = [B.real.length], Q = o.makeTensorInfo(Y, "float32", B.real), J = o.makeTensorInfo(Y, "float32", B.imag), j = en({ inputs: { real: Q, imag: J }, backend: o }), nt = Id({ inputs: { a: j, b: Z }, backend: o }), q = Or({
    inputs: { a: $, b: nt },
    backend: o
  }), rt = bg({
    inputs: { a: $, b: nt },
    backend: o
  }), ht = er({ inputs: { input: q }, backend: o }), ft = er({ inputs: { input: rt }, backend: o }), pt = Xr({ inputs: { input: q }, backend: o }), wt = Xr({ inputs: { input: rt }, backend: o }), It = Pr({
    inputs: [ht, ft],
    backend: o,
    attrs: { axis: 0 }
  }), Dt = Pr({
    inputs: [pt, wt],
    backend: o,
    attrs: { axis: 0 }
  }), _t = o.data.get(It.dataId).values, se = o.data.get(Dt.dataId).values;
  return o.disposeIntermediateTensorInfo(d), o.disposeIntermediateTensorInfo(h), o.disposeIntermediateTensorInfo(p), o.disposeIntermediateTensorInfo(x), o.disposeIntermediateTensorInfo(w), o.disposeIntermediateTensorInfo(y), o.disposeIntermediateTensorInfo(N), o.disposeIntermediateTensorInfo(R), o.disposeIntermediateTensorInfo($), o.disposeIntermediateTensorInfo(O), o.disposeIntermediateTensorInfo(K), o.disposeIntermediateTensorInfo(Z), o.disposeIntermediateTensorInfo(Q), o.disposeIntermediateTensorInfo(J), o.disposeIntermediateTensorInfo(j), o.disposeIntermediateTensorInfo(nt), o.disposeIntermediateTensorInfo(q), o.disposeIntermediateTensorInfo(rt), o.disposeIntermediateTensorInfo(ht), o.disposeIntermediateTensorInfo(pt), o.disposeIntermediateTensorInfo(ft), o.disposeIntermediateTensorInfo(wt), o.disposeIntermediateTensorInfo(It), o.disposeIntermediateTensorInfo(Dt), { real: _t, imag: se };
}
function UW(n, t, e) {
  const s = new Float32Array(t * 2);
  for (let o = 0; o < t; o++) {
    let r = 0, i = 0;
    for (let a = 0; a < t; a++) {
      const l = uy(o * a, t, e), c = Mm(n, a);
      r += c.real * l.real - c.imag * l.imag, i += c.real * l.imag + c.imag * l.real;
    }
    e && (r /= t, i /= t), ly(s, r, i, o);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YW(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = X(s.shape), r = s.shape[s.shape.length - 1], i = o / r, a = Zt({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, r] }
  }), l = K2(a, !1, e), c = Zt({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const QW = {
  kernelName: qp,
  backendName: "cpu",
  kernelFunc: YW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wg(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: o, dtype: r } = e, i = r || jr(o), a = ae(i, X(s));
  return JW(a, o, i), t.makeTensorInfo(s, i, a);
}
const jW = {
  kernelName: tf,
  backendName: "cpu",
  kernelFunc: wg
};
function JW(n, t, e) {
  n.fill(t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qW = {
  kernelName: ef,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, o = e, r = Ie(s.dtype, X(s.shape)), [i, a, l, c] = s.shape, u = o.data.get(s.dataId).values;
    for (let h = 0; h < i; h++) {
      const p = h * l * a * c;
      for (let f = 0; f < a; f++) {
        const m = f * (l * c);
        for (let g = 0; g < l; g++) {
          const b = g * c;
          for (let x = 0; x < c; x++) {
            const w = Math.round(l - g - 1), y = p + m + b + x;
            let I = u[y];
            if (w >= 0 && w < l) {
              const C = w * c, v = p + m + C + x;
              I = u[v];
            }
            r[y] = I;
          }
        }
      }
    }
    return { dataId: o.write(r, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tV = he((n, t) => Math.floor(n / t)), eV = ve(Na, tV, null, "int32"), nV = {
  kernelName: Na,
  backendName: "cpu",
  kernelFunc: eV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = s;
  let m = P2({
    inputs: { x: o, filter: r },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: d, dimRoundingMode: h }
  });
  if (i) {
    const g = m;
    if (u === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) {
      const b = Zt({ inputs: { x: i }, backend: e, attrs: { shape: [i.shape[0], 1, 1] } });
      m = Or({ inputs: { a: m, b }, backend: e }), e.disposeIntermediateTensorInfo(b);
    } else
      m = Or({ inputs: { a: m, b: i }, backend: e });
    e.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    if (u === "NCHW" && p === "prelu" && a.shape.length === 1 && a.shape[0] !== 1) {
      const b = Zt({
        inputs: { x: a },
        backend: e,
        attrs: { shape: [a.shape[0], 1, 1] }
      });
      m = Mc(e, m, p, b, f), e.disposeIntermediateTensorInfo(b);
    } else
      m = Mc(e, m, p, a, f);
    e.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const oV = {
  kernelName: pc,
  backendName: "cpu",
  kernelFunc: sV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = s;
  let m = Z2({
    inputs: { x: o, filter: r },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: d, dimRoundingMode: h }
  });
  if (i) {
    const g = m;
    m = Or({ inputs: { a: m, b: i }, backend: e }), e.disposeIntermediateTensorInfo(g);
  }
  if (p) {
    const g = m;
    m = Mc(e, m, p, a, f), e.disposeIntermediateTensorInfo(g);
  }
  return m;
}
const iV = {
  kernelName: Mx,
  backendName: "cpu",
  kernelFunc: rV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aV(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: o } = t, r = X(s.shape), i = o.shape, a = i[i.length - 1], [l, c, u, d] = nd(s, o);
  if (c === 0)
    return e.makeTensorInfo(l, s.dtype, []);
  const h = e.data.get(o.dataId).values, p = e.bufferSync(s), f = n2(h, p, s.dtype, c, a, u, d, s.shape, r);
  return e.makeTensorInfo(l, s.dtype, f.values);
}
const lV = {
  kernelName: kx,
  backendName: "cpu",
  kernelFunc: aV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, indices: r } = t, { axis: i, batchDims: a } = s;
  it([o, r], "gatherV2");
  const l = Ct(i, o.shape)[0], c = e.data.get(r.dataId).values, u = o.shape[l];
  for (let y = 0; y < c.length; ++y) {
    const I = c[y];
    k(I <= u - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${u - 1}]`);
  }
  let d = a;
  a == null && (d = 0);
  const h = X(r.shape), p = Om(o, r, l, d), f = Zt({
    inputs: { x: o },
    backend: e,
    attrs: {
      shape: [
        p.batchSize,
        p.outerSize,
        p.dimSize,
        p.sliceSize
      ]
    }
  }), m = Zt({
    inputs: { x: r },
    backend: e,
    attrs: { shape: [p.batchSize, h / p.batchSize] }
  }), g = [
    p.batchSize,
    p.outerSize,
    h / p.batchSize,
    p.sliceSize
  ], b = e.bufferSync(m), x = e.bufferSync(f), w = s2(x, b, g);
  return e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), e.makeTensorInfo(p.outputShape, w.dtype, w.values);
}
const uV = {
  kernelName: hu,
  backendName: "cpu",
  kernelFunc: cV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dV(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = X(s.shape), r = s.shape[s.shape.length - 1], i = o / r, a = Zt({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, r] }
  }), l = K2(a, !0, e), c = Zt({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const hV = {
  kernelName: nf,
  backendName: "cpu",
  kernelFunc: dV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pV = zt(Ea, (n) => Number.isFinite(n) ? 1 : 0, "bool"), fV = {
  kernelName: Ea,
  backendName: "cpu",
  kernelFunc: pV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mV = zt(Ga, (n) => Math.abs(n) === 1 / 0 ? 1 : 0, "bool"), gV = {
  kernelName: Ga,
  backendName: "cpu",
  kernelFunc: mV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bV = zt(La, (n) => Number.isNaN(n) ? 1 : 0, "bool"), xV = {
  kernelName: La,
  backendName: "cpu",
  kernelFunc: bV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yV(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: o, num: r } = e, i = l2(s, o, r);
  return t.makeTensorInfo([i.length], "float32", i);
}
const wV = {
  kernelName: Sx,
  backendName: "cpu",
  kernelFunc: yV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IV = zt(Ma, (n) => Math.log1p(n)), CV = {
  kernelName: Ma,
  backendName: "cpu",
  kernelFunc: IV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vV = he((n, t) => n && t), kV = ve(bu, vV, null, "bool"), SV = {
  kernelName: bu,
  backendName: "cpu",
  kernelFunc: kV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TV = zt(xu, (n) => n ? 0 : 1, "bool"), NV = {
  kernelName: xu,
  backendName: "cpu",
  kernelFunc: TV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RV = he((n, t) => n || t), $V = ve(yu, RV, null, "bool"), EV = {
  kernelName: yu,
  backendName: "cpu",
  kernelFunc: $V
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { depthRadius: r, bias: i, alpha: a, beta: l } = s;
  it(o, "LRN");
  const c = o.shape[3], u = c - 1, d = e.data.get(o.dataId).values, h = X(o.shape), p = new Float32Array(h);
  function f(m) {
    const g = m % c;
    let b = m - g + Math.max(0, g - r);
    const x = m - g + Math.min(g + r, u);
    let w = 0;
    for (; b <= x; b++) {
      const y = d[b];
      w += y * y;
    }
    return w;
  }
  for (let m = 0; m < h; m++) {
    const g = f(m), b = d[m] * Math.pow(i + a * g, -l);
    p[m] = b;
  }
  return e.makeTensorInfo(o.shape, o.dtype, p);
}
const LV = {
  kernelName: wu,
  backendName: "cpu",
  kernelFunc: GV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, y: r, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s;
  it(i, "LRNGrad");
  const d = X(i.shape), h = i.shape[3], p = e.data.get(i.dataId).values, f = e.data.get(o.dataId).values, m = e.data.get(r.dataId).values, g = new Float32Array(d), b = d;
  for (let x = 0; x < b; x++) {
    const w = x % h, y = x - w + Math.max(0, w - a), I = x - w + Math.min(h, w + a + 1);
    let C = 0;
    for (let v = y; v < I; v++)
      C += Math.pow(f[v], 2);
    C = c * C + l;
    for (let v = y; v < I; v++) {
      let S = -2 * c * u * f[v] * m[x] / C;
      x === v && (S += Math.pow(C, -u)), S *= p[x], g[v] += S;
    }
  }
  return e.makeTensorInfo(i.shape, o.dtype, g);
}
const MV = {
  kernelName: of,
  backendName: "cpu",
  kernelFunc: DV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reductionIndices: r, keepDims: i } = s, a = e;
  let l = o.shape;
  const c = l.length, u = Ct(r, l);
  let d = u;
  const h = ne(d, c);
  let p = a.data.get(o.dataId).values;
  if (h != null) {
    const y = new Array(c);
    for (let I = 0; I < y.length; I++)
      y[I] = l[h[I]];
    p = mg(p, l, o.dtype, h, y), d = ce(d.length, c), l = y;
  }
  it(o, "max"), Ee("max", d, c);
  const [f, m] = Ce(l, d), g = X(m), b = u2(p, g, f, o.dtype), x = a.write(b, f, o.dtype);
  let w = f;
  return i && (w = le(f, u)), { dataId: x, shape: w, dtype: o.dtype };
}
const zV = {
  kernelName: Iu,
  backendName: "cpu",
  kernelFunc: B2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  it(o, "maxPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(Fe(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = An(o.shape, r, i, c, a, l);
  let d;
  if (u.filterWidth === 1 && u.filterHeight === 1 && $t(u.inShape, u.outShape))
    d = ws({ inputs: { x: o }, backend: e });
  else {
    const h = e.data.get(o.dataId).values, p = dt(o.shape), f = xg(h, o.shape, o.dtype, p, u, "max");
    d = e.makeTensorInfo(u.outShape, o.dtype, f.values);
  }
  return d;
}
const WV = {
  kernelName: Cu,
  backendName: "cpu",
  kernelFunc: FV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  it(o, "maxPool3d");
  const u = Fs(o.shape, r, i, 1, a, l, c), d = e.data.get(o.dataId).values, h = X2(d, o.shape, o.dtype, dt(o.shape), u, "max");
  return e.makeTensorInfo(h.shape, "float32", h.values);
}
const _V = {
  kernelName: vu,
  backendName: "cpu",
  kernelFunc: VV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  it([o, r], "maxPool3DGrad");
  const u = Fs(r.shape, i, a, 1, l, c), d = e.bufferSync(r), h = NF(d, u), p = u.strideDepth, f = u.strideHeight, m = u.strideWidth, g = u.dilationDepth, b = u.dilationHeight, x = u.dilationWidth, w = u.effectiveFilterDepth, y = u.effectiveFilterHeight, I = u.effectiveFilterWidth, C = w - 1 - u.padInfo.front, v = I - 1 - u.padInfo.left, S = y - 1 - u.padInfo.top, N = vt(r.shape, "float32"), R = e.bufferSync(o);
  for (let $ = 0; $ < u.batchSize; ++$)
    for (let F = 0; F < u.inChannels; ++F)
      for (let W = 0; W < u.inDepth; ++W)
        for (let _ = 0; _ < u.inHeight; ++_)
          for (let A = 0; A < u.inWidth; ++A) {
            const O = W - C, K = _ - S, Z = A - v;
            let B = 0;
            for (let Y = 0; Y < w; Y += g) {
              const Q = (O + Y) / p;
              if (!(Q < 0 || Q >= u.outDepth || Math.floor(Q) !== Q))
                for (let J = 0; J < y; J += b) {
                  const j = (K + J) / f;
                  if (!(j < 0 || j >= u.outHeight || Math.floor(j) !== j))
                    for (let nt = 0; nt < I; nt += x) {
                      const q = (Z + nt) / m;
                      if (q < 0 || q >= u.outWidth || Math.floor(q) !== q)
                        continue;
                      const rt = w * y * I - 1 - h.get($, Q, j, q, F), ht = Y * y * I + J * I + nt, ft = rt === ht ? 1 : 0;
                      if (ft === 0)
                        continue;
                      const pt = R.get($, Q, j, q, F);
                      B += pt * ft;
                    }
                }
            }
            N.set(B, $, W, _, A, F);
          }
  return e.makeTensorInfo(N.shape, N.dtype, N.values);
}
const OV = {
  kernelName: af,
  backendName: "cpu",
  kernelFunc: AV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r, output: i } = t, a = r;
  it([r, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: d } = s, h = An(a.shape, l, c, 1, u, d), p = e.data.get(a.dataId).values, f = vt(h.outShape, a.dtype, O2(p, a.shape, a.dtype, h).values), m = h.strideHeight, g = h.strideWidth, b = h.dilationHeight, x = h.dilationWidth, w = h.effectiveFilterHeight, y = h.effectiveFilterWidth, I = y - 1 - h.padInfo.left, C = w - 1 - h.padInfo.top, v = vt(a.shape, "float32"), S = e.data.get(o.dataId).values, N = vt(o.shape, "float32", S);
  for (let R = 0; R < h.batchSize; ++R)
    for (let $ = 0; $ < h.inChannels; ++$)
      for (let F = 0; F < h.inHeight; ++F)
        for (let W = 0; W < h.inWidth; ++W) {
          const _ = F - C, A = W - I;
          let O = 0;
          for (let K = 0; K < w; K += b) {
            const Z = (_ + K) / m;
            if (!(Z < 0 || Z >= h.outHeight || Math.floor(Z) !== Z))
              for (let B = 0; B < y; B += x) {
                const Y = (A + B) / g;
                if (Y < 0 || Y >= h.outWidth || Math.floor(Y) !== Y)
                  continue;
                const Q = w * y - 1 - f.get(R, Z, Y, $), J = K * y + B, j = Q === J ? 1 : 0;
                if (j === 0)
                  continue;
                const nt = N.get(R, Z, Y, $);
                O += nt * j;
              }
          }
          v.set(O, R, F, W, $);
        }
  return e.makeTensorInfo(v.shape, v.dtype, v.values);
}
const PV = {
  kernelName: rf,
  backendName: "cpu",
  kernelFunc: XV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZV(n, t, e, s, o) {
  const r = dt(t), i = xg(n, t, e, r, o, "max"), a = O2(n, t, e, o, !0, s);
  return [i.values, a.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KV = {
  kernelName: Tx,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: o, strides: r, pad: i, includeBatchInIndex: a } = t, l = e;
    it(s, "MaxPoolWithArgmax");
    const c = l.data.get(s.dataId).values, u = An(s.shape, o, r, [1, 1], i), [d, h] = ZV(c, s.shape, s.dtype, a, u), p = l.write(d, u.outShape, s.dtype), f = l.write(h, u.outShape, s.dtype);
    return [
      { dataId: p, shape: u.outShape, dtype: s.dtype },
      { dataId: f, shape: u.outShape, dtype: "int32" }
    ];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = Ct(r, o.shape), c = Ce(o.shape, a)[1], u = X(c), d = [], h = e.makeTensorInfo([], "float32", new Float32Array([u]));
  d.push(h);
  const p = po({ inputs: { x: o }, backend: e, attrs: { dtype: "float32" } });
  d.push(p);
  const f = yg({ inputs: { a: p, b: h }, backend: e });
  d.push(f);
  const m = vl({ inputs: { x: f }, backend: e, attrs: { axis: r, keepDims: i } });
  return d.forEach((g) => e.disposeIntermediateTensorInfo(g)), m;
}
const HV = {
  kernelName: ku,
  backendName: "cpu",
  kernelFunc: BV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  it(o, "min");
  const a = Ct(r, o.shape);
  let l = a;
  const c = ne(l, o.shape.length);
  let u = o;
  c != null && (u = Qe({ inputs: { x: o }, backend: e, attrs: { perm: c } }), l = ce(l.length, o.shape.length)), Ee("min", l, u.shape.length);
  const [d, h] = Ce(u.shape, l), p = X(h), f = Re(X(d), u.dtype), m = e.data.get(u.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    const x = b * p;
    let w = m[x];
    for (let y = 0; y < p; ++y) {
      const I = m[x + y];
      (Number.isNaN(I) || I < w) && (w = I);
    }
    f[b] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const g = e.makeTensorInfo(d, u.dtype, f);
  if (i) {
    const b = le(d, a), x = Zt({ inputs: { x: g }, backend: e, attrs: { shape: b } });
    return e.disposeIntermediateTensorInfo(g), x;
  }
  return g;
}
const YV = {
  kernelName: Su,
  backendName: "cpu",
  kernelFunc: UV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QV(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { paddings: r, mode: i } = s;
  it(o, "mirrorPad");
  const a = r.map(
    (w, y) => w[0] + o.shape[y] + w[1]
    /* afterPad */
  ), l = r.map((w) => w[0]), c = r.map((w, y) => w[0] + o.shape[y]), u = i === "reflect" ? 0 : 1, d = e.data.get(o.dataId).values, h = o.shape.length, p = dt(o.shape), f = X(a), m = a.length, g = dt(a), b = Ie(o.dtype, f);
  for (let w = 0; w < f; w++) {
    let y = ar(w, m, g);
    for (let C = 0; C < m; C++)
      y[C] < l[C] ? y[C] = l[C] * 2 - y[C] - u : y[C] >= c[C] && (y[C] = (c[C] - 1) * 2 - y[C] + u);
    y = y.map((C, v) => C - l[v]);
    const I = Yn(y, h, p);
    b[w] = d[I];
  }
  return { dataId: e.write(b, a, o.dtype), shape: a, dtype: o.dtype };
}
const jV = {
  kernelName: Tu,
  backendName: "cpu",
  kernelFunc: QV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JV = he((n, t) => {
  const e = n % t;
  return n < 0 && t < 0 || n >= 0 && t >= 0 ? e : (e + t) % t;
}), qV = ve(Wa, JV), t_ = {
  kernelName: Wa,
  backendName: "cpu",
  kernelFunc: qV
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { dim: r } = s, i = o.shape.length;
  let a = r;
  if (a === -1 && (a = i - 1), a !== i - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);
  const l = Ct([a], o.shape), c = B2({
    inputs: { x: o },
    backend: e,
    attrs: { reductionIndices: l, keepDims: !1 }
  }), u = le(c.shape, l), d = Zt({ inputs: { x: c }, backend: e, attrs: { shape: u } }), h = bg({ inputs: { a: o, b: d }, backend: e }), p = qI({ inputs: { x: h }, backend: e }), f = vl({ inputs: { x: p }, backend: e, attrs: { axis: l, keepDims: !1 } }), m = Zt({ inputs: { x: f }, backend: e, attrs: { shape: u } }), g = yg({ inputs: { a: p, b: m }, backend: e });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(m), g;
}
const e_ = {
  kernelName: Zu,
  backendName: "cpu",
  kernelFunc: H2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function n_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { numSamples: r, seed: i, normalized: a } = s;
  it(o, "multinomial");
  const l = a ? o : H2({ inputs: { logits: o }, backend: e, attrs: { dim: -1 } }), c = l.shape[0], u = l.shape[1], d = e.data.get(l.dataId).values, h = [c, r], p = Re(X(h), "int32");
  for (let f = 0; f < c; ++f) {
    const m = f * u, g = new Float32Array(u - 1);
    g[0] = d[m];
    for (let w = 1; w < g.length; ++w)
      g[w] = g[w - 1] + d[m + w];
    const b = ei.alea(i.toString()), x = f * r;
    for (let w = 0; w < r; ++w) {
      const y = b();
      p[x + w] = g.length;
      for (let I = 0; I < g.length; I++)
        if (y < g[I]) {
          p[x + w] = I;
          break;
        }
    }
  }
  return a || e.disposeIntermediateTensorInfo(l), e.makeTensorInfo(h, "int32", p);
}
const s_ = {
  kernelName: Nx,
  backendName: "cpu",
  kernelFunc: n_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o_ = hm;
function r_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s;
  it(o, "NonMaxSuppression");
  const c = e.data.get(o.dataId).values, u = e.data.get(r.dataId).values, { selectedIndices: d } = o_(c, u, i, a, l);
  return e.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
const i_ = {
  kernelName: lf,
  backendName: "cpu",
  kernelFunc: r_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a_ = pm;
function l_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s;
  it(o, "NonMaxSuppressionPadded");
  const u = e.data.get(o.dataId).values, d = e.data.get(r.dataId).values, { selectedIndices: h, validOutputs: p } = a_(u, d, i, a, l, c);
  return [
    e.makeTensorInfo([h.length], "int32", new Int32Array(h)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const c_ = {
  kernelName: cf,
  backendName: "cpu",
  kernelFunc: l_
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u_ = fm;
function d_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s;
  it(o, "NonMaxSuppressionWithScore");
  const u = e.data.get(o.dataId).values, d = e.data.get(r.dataId).values, h = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: b } = u_(u, d, h, p, f, m);
  return [
    e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    e.makeTensorInfo([b.length], "float32", new Float32Array(b))
  ];
}
const h_ = {
  kernelName: uf,
  backendName: "cpu",
  kernelFunc: d_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o } = t, { dtype: r, depth: i, onValue: a, offValue: l } = s;
  it(o, "oneHot");
  const c = X(o.shape), u = new Float32Array(c * i);
  u.fill(l);
  const d = e.data.get(o.dataId).values;
  for (let h = 0; h < c; ++h)
    d[h] >= 0 && d[h] < i && (u[h * i + d[h]] = a);
  return e.makeTensorInfo([...o.shape, i], r, u);
}
const f_ = {
  kernelName: Eu,
  backendName: "cpu",
  kernelFunc: p_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fc(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const o = er({ inputs: { input: s }, backend: e }), r = Fc({ inputs: { x: o }, backend: e }), i = Xr({ inputs: { input: s }, backend: e }), a = Fc({ inputs: { x: i }, backend: e }), l = en({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return wg({ backend: e, attrs: { shape: s.shape, value: 0, dtype: s.dtype } });
}
const m_ = {
  kernelName: Hu,
  backendName: "cpu",
  kernelFunc: Fc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U2(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const o = er({ inputs: { input: s }, backend: e }), r = U2({ inputs: { x: o }, backend: e }), i = Xr({ inputs: { input: s }, backend: e }), a = Fc({ inputs: { x: i }, backend: e }), l = en({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return wg({ backend: e, attrs: { shape: s.shape, value: 1, dtype: s.dtype } });
}
const g_ = {
  kernelName: $u,
  backendName: "cpu",
  kernelFunc: U2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y2(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s;
  if (t.length === 1)
    return zc({ inputs: { input: t[0] }, backend: e, attrs: { dim: o } });
  const r = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Xe(r, u.shape, "All tensors passed to stack must have matching shapes"), k(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const d = zc({ inputs: { input: u }, backend: e, attrs: { dim: o } });
    return a.push(d), d;
  }), c = Pr({ inputs: l, backend: e, attrs: { axis: o } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const b_ = {
  kernelName: Gu,
  backendName: "cpu",
  kernelFunc: Y2
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { paddings: r, constantValue: i } = s;
  it(o, "pad");
  const a = r.map(
    (x, w) => x[0] + o.shape[w] + x[1]
    /* afterPad */
  ), l = r.map((x) => x[0]), c = e.data.get(o.dataId).values, u = X(o.shape), d = o.shape.length, h = dt(o.shape), p = X(a), f = a.length, m = dt(a), g = Ie(o.dtype, p);
  i !== 0 && g.fill(i);
  for (let x = 0; x < u; x++) {
    const y = ar(x, d, h).map((C, v) => C + l[v]), I = Yn(y, f, m);
    g[I] = c[x];
  }
  return { dataId: e.write(g, a, o.dtype), shape: a, dtype: o.dtype };
}
const Q2 = {
  kernelName: Lu,
  backendName: "cpu",
  kernelFunc: x_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const y_ = he((n, t) => Math.pow(n, t)), w_ = ve(_a, y_), I_ = {
  kernelName: _a,
  backendName: "cpu",
  kernelFunc: w_
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: o, paramsDenseValues: r, indices: i } = t, a = o.map((g) => e.data.get(g.dataId).values), l = o.map((g) => g.shape), c = e.data.get(r.dataId).values, u = e.data.get(i.dataId).values, [d, h, p] = g2(a, l, c, r.shape, r.dtype, u, i.shape), f = d.map((g) => e.makeTensorInfo([g.length], "int32", g)), m = e.makeTensorInfo(p, r.dtype, h);
  return f.concat([m]);
}
const v_ = {
  kernelName: Rx,
  backendName: "cpu",
  kernelFunc: C_
};
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k_(n) {
  const { inputs: t, backend: e } = n, { starts: s, limits: o, deltas: r } = t, i = e.data.get(s.dataId).values, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, [c, u] = b2(i, s.shape, s.dtype, a, o.shape, l, r.shape), d = e.makeTensorInfo([c.length], "int32", c), h = e.makeTensorInfo([u.length], s.dtype, u);
  return [d, h];
}
const S_ = {
  kernelName: $x,
  backendName: "cpu",
  kernelFunc: k_
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function T_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: o, values: r, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.data.get(o.dataId).values, u = e.data.get(r.dataId).values, d = e.data.get(i.dataId).values, h = a.map((g) => e.data.get(g.dataId).values), p = a.map((g) => g.shape), [f, m] = x2(c, o.shape, u, r.shape, r.dtype, d, i.shape, h, p, l);
  return e.makeTensorInfo(f, r.dtype, m);
}
const N_ = {
  kernelName: Ex,
  backendName: "cpu",
  kernelFunc: T_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R_(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: o, dtype: r, step: i } = e, a = y2(s, o, i, r);
  return t.makeTensorInfo([a.length], r, a);
}
const $_ = {
  kernelName: df,
  backendName: "cpu",
  kernelFunc: R_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E_ = zt(Aa, (n) => 1 / n), G_ = {
  kernelName: Aa,
  backendName: "cpu",
  kernelFunc: E_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s;
  it(o, "resizeBilinear");
  const l = dt(o.shape), [c, u] = a, [d, h, p, f] = o.shape, m = e.data.get(o.dataId).values, g = new Float32Array(X([d, c, u, f])), b = [
    r && c > 1 ? h - 1 : h,
    r && u > 1 ? p - 1 : p
  ], x = [
    r && c > 1 ? c - 1 : c,
    r && u > 1 ? u - 1 : u
  ];
  let w = 0;
  const y = b[0] / x[0], I = b[1] / x[1];
  for (let C = 0; C < d; C++)
    for (let v = 0; v < c; v++) {
      let S;
      i ? S = y * (v + 0.5) - 0.5 : S = y * v;
      const N = Math.max(0, Math.floor(S)), R = S - N, $ = Math.min(h - 1, Math.ceil(S)), F = C * l[0] + N * l[1], W = C * l[0] + $ * l[1];
      for (let _ = 0; _ < u; _++) {
        let A;
        i ? A = I * (_ + 0.5) - 0.5 : A = I * _;
        const O = Math.max(0, Math.floor(A)), K = A - O, Z = Math.min(p - 1, Math.ceil(A)), B = F + O * l[2], Y = W + O * l[2], Q = F + Z * l[2], J = W + Z * l[2];
        for (let j = 0; j < f; j++) {
          const nt = m[B + j], q = m[Y + j], rt = m[Q + j], ht = m[J + j], ft = nt + (rt - nt) * K, pt = q + (ht - q) * K, wt = ft + (pt - ft) * R;
          g[w++] = wt;
        }
      }
    }
  return e.makeTensorInfo([d, c, u, f], "float32", g);
}
const D_ = {
  kernelName: Wu,
  backendName: "cpu",
  kernelFunc: L_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function M_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s;
  it([r, o], "resizeBilinearGrad");
  const a = dt(o.shape), [l, c, u, d] = o.shape, [, h, p] = r.shape, f = new Float32Array(l * c * u * d), m = [
    i && h > 1 ? c - 1 : c,
    i && p > 1 ? u - 1 : u
  ], g = [
    i && h > 1 ? h - 1 : h,
    i && p > 1 ? p - 1 : p
  ], b = m[0] / g[0], x = m[1] / g[1], w = e.data.get(r.dataId).values;
  let y = 0;
  for (let I = 0; I < l; I++) {
    const C = I * a[0];
    for (let v = 0; v < h; v++) {
      const S = v * b, N = Math.floor(S), R = Math.min(Math.ceil(S), c - 1), $ = C + N * a[1], F = C + R * a[1], W = S - N, _ = 1 - W;
      for (let A = 0; A < p; A++) {
        const O = A * x, K = Math.floor(O), Z = Math.min(Math.ceil(O), u - 1), B = O - K, Y = 1 - B, Q = $ + K * a[2], J = $ + Z * a[2], j = F + K * a[2], nt = F + Z * a[2], q = _ * Y, rt = _ * B, ht = W * Y, ft = W * B;
        for (let pt = 0; pt < d; pt++) {
          const wt = w[y++];
          f[Q + pt] += wt * q, f[J + pt] += wt * rt, f[j + pt] += wt * ht, f[nt + pt] += wt * ft;
        }
      }
    }
  }
  return e.makeTensorInfo([l, u, c, d], "float32", f);
}
const z_ = {
  kernelName: ff,
  backendName: "cpu",
  kernelFunc: M_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function F_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s;
  it(o, "resizeNearestNeighbor");
  const l = dt(o.shape), [c, u] = a, [d, h, p, f] = o.shape, m = e.data.get(o.dataId).values, g = new Float32Array(d * c * u * f), b = [
    r && c > 1 ? h - 1 : h,
    r && u > 1 ? p - 1 : p
  ], x = [
    r && c > 1 ? c - 1 : c,
    r && u > 1 ? u - 1 : u
  ], w = b[0] / x[0], y = b[1] / x[1];
  let I = 0;
  for (let C = 0; C < d; C++) {
    const v = C * l[0];
    for (let S = 0; S < c; S++) {
      const N = i ? w * (S + 0.5) : w * S;
      let R = Math.min(h - 1, r ? Math.round(N) : Math.floor(N));
      i && (R = Math.max(0, R));
      const $ = v + R * l[1];
      for (let F = 0; F < u; F++) {
        const W = i ? y * (F + 0.5) : y * F;
        let _ = Math.min(p - 1, r ? Math.round(W) : Math.floor(W));
        i && (_ = Math.max(0, _));
        const A = $ + _ * l[2];
        for (let O = 0; O < f; O++) {
          const K = m[A + O];
          g[I++] = K;
        }
      }
    }
  }
  return e.makeTensorInfo([d, c, u, f], o.dtype, g);
}
const W_ = {
  kernelName: Fu,
  backendName: "cpu",
  kernelFunc: F_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function V_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s;
  it([r, o], "resizeNearestNeighborGrad");
  const a = dt(o.shape), l = dt(r.shape), [c, u, d, h] = o.shape, [, p, f] = r.shape, m = new Float32Array(c * u * d * h), g = e.data.get(r.dataId).values, b = [
    i && p > 1 ? u - 1 : u,
    i && f > 1 ? d - 1 : d
  ], x = [
    i && p > 1 ? p - 1 : p,
    i && f > 1 ? f - 1 : f
  ], w = b[0] / x[0], y = b[1] / x[1], I = 1 / w, C = 1 / y, v = Math.ceil(I) * 2 + 2, S = Math.ceil(C) * 2 + 2;
  for (let N = 0; N < c; N++) {
    const R = N * a[0];
    for (let $ = 0; $ < u; $++) {
      const F = R + $ * a[1], W = Math.floor($ * I), _ = Math.floor(W - v / 2);
      for (let A = 0; A < d; A++) {
        const O = F + A * a[2], K = Math.floor(A * C), Z = Math.floor(K - S / 2);
        for (let B = 0; B < h; B++) {
          let Y = 0;
          for (let Q = 0; Q < v; Q++) {
            const J = Q + _;
            if (J < 0 || J >= p)
              continue;
            const j = R + J * l[1], nt = J * w, q = Math.min(u - 1, i ? Math.round(nt) : Math.floor(nt));
            if ($ === q)
              for (let rt = 0; rt < S; rt++) {
                const ht = rt + Z;
                if (ht < 0 || ht >= f)
                  continue;
                const ft = j + ht * l[2], pt = ht * y, wt = Math.min(d - 1, i ? Math.round(pt) : Math.floor(pt));
                A === wt && (Y += g[ft + B]);
              }
          }
          m[O + B] = Y;
        }
      }
    }
  }
  return e.makeTensorInfo(o.shape, o.dtype, m);
}
const __ = {
  kernelName: pf,
  backendName: "cpu",
  kernelFunc: V_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dims: r } = s;
  it(o, "reverse");
  const i = o.shape.length, a = Ct(r, o.shape);
  if (i === 0)
    return ws({ inputs: { x: o }, backend: e });
  const l = new Me(o.shape, o.dtype), c = e.bufferSync(o);
  for (let u = 0; u < l.size; u++) {
    const d = l.indexToLoc(u), h = d.slice();
    a.forEach((p) => h[p] = o.shape[p] - 1 - h[p]), l.set(c.get(...h), ...d);
  }
  return e.makeTensorInfo(l.shape, l.dtype, l.values);
}
const O_ = {
  kernelName: Vu,
  backendName: "cpu",
  kernelFunc: A_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const X_ = {
  kernelName: Nf,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: o, fillValue: r, center: i } = t, a = e, l = Ie(s.dtype, X(s.shape)), [c, u, d, h] = s.shape, [p, f] = Sm(i, u, d), m = 255, g = Math.sin(o), b = Math.cos(o), x = a.data.get(s.dataId).values;
    for (let y = 0; y < c; y++) {
      const I = y * d * u * h;
      for (let C = 0; C < u; C++) {
        const v = C * (d * h);
        for (let S = 0; S < d; S++) {
          const N = S * h;
          for (let R = 0; R < h; R++) {
            const $ = [c, C, S, R], F = $[2], W = $[1];
            let _ = (F - p) * b - (W - f) * g, A = (F - p) * g + (W - f) * b;
            _ = Math.round(_ + p), A = Math.round(A + f);
            let O = r;
            if (typeof r != "number" && (R === 3 ? O = m : O = r[R]), _ >= 0 && _ < d && A >= 0 && A < u) {
              const Z = A * (d * h), B = _ * h, Y = I + Z + B + R;
              O = x[Y];
            }
            const K = I + v + N + R;
            l[K] = O;
          }
        }
      }
    }
    return { dataId: a.write(l, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P_ = zt(Pa, (n) => {
  const t = Math.floor(n);
  return n - t < 0.5 ? Math.floor(n) : n - t > 0.5 ? Math.ceil(n) : t % 2 === 0 ? t : t + 1;
}), Z_ = {
  kernelName: Pa,
  backendName: "cpu",
  kernelFunc: P_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o, updates: r } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: d } = ni(r, o, i), h = !0, p = e.bufferSync(o), f = e.bufferSync(r), m = Nr(p, f, i, d, c, l, a, u, 0, h);
  return e.makeTensorInfo(i, m.dtype, m.values);
}
const B_ = {
  kernelName: Gx,
  backendName: "cpu",
  kernelFunc: K_
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H_(n, t) {
  let e = 0, s = n.length, o = 0;
  for (; e < s; )
    o = Math.floor((e + s) / 2), n[o] < t ? e = o + 1 : s = o;
  return s;
}
function U_(n, t) {
  let e = 0, s = n.length, o = 0;
  for (; e < s; )
    o = Math.floor((e + s) / 2), n[o] <= t ? e = o + 1 : s = o;
  return s;
}
function Y_(n, t, e, s, o, r) {
  const i = ae("int32", e * o);
  for (let a = 0; a < e; ++a) {
    const l = n.slice(a * s, (a + 1) * s), c = a * o;
    for (let u = 0; u < o; ++u)
      i[c + u] = r === "left" ? H_(l, t[u + c]) : U_(l, t[u + c]);
  }
  return i;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: o, values: r } = t, { side: i } = s, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, c = Y_(a, l, o.shape[0], o.shape[1], r.shape[1], i);
  return e.makeTensorInfo(r.shape, "int32", c);
}
const j_ = {
  kernelName: Lx,
  backendName: "cpu",
  kernelFunc: Q_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J_(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: o, e: r } = t;
  it([s, o, r], "select");
  const i = s.shape.length, a = e.data.get(s.dataId).values, l = e.data.get(o.dataId).values, c = e.data.get(r.dataId).values, u = rn(o.dtype, r.dtype), d = Re(X(o.shape), u);
  let h = 0;
  const p = i === 0 || i > 1 || o.shape.length === 1 ? 1 : X(o.shape.slice(1));
  for (let f = 0; f < a.length; f++)
    for (let m = 0; m < p; m++)
      a[f] === 1 ? d[h++] = l[f] : d[h++] = c[f];
  return e.makeTensorInfo(o.shape, u, d);
}
const q_ = {
  kernelName: _u,
  backendName: "cpu",
  kernelFunc: J_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tA = id, eA = ad, nA = zt(Ka, (n) => n >= 0 ? eA * n : tA * (Math.exp(n) - 1)), sA = {
  kernelName: Ka,
  backendName: "cpu",
  kernelFunc: nA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oA = zt(Ua, (n) => n < 0 ? -1 : n > 0 ? 1 : 0), rA = {
  kernelName: Ua,
  backendName: "cpu",
  kernelFunc: oA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iA = zt(Ba, (n) => Math.sin(n)), aA = {
  kernelName: Ba,
  backendName: "cpu",
  kernelFunc: iA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lA = zt(Ha, (n) => Math.sinh(n)), cA = {
  kernelName: Ha,
  backendName: "cpu",
  kernelFunc: lA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uA = 11920928955078125e-23, A0 = Math.log(uA) + 2, dA = zt(Qa, (n) => {
  const t = n > -A0, e = n < A0, s = Math.exp(n);
  let o;
  return e ? o = s : t ? o = n : o = Math.log(1 + s), o;
}), hA = {
  kernelName: Qa,
  backendName: "cpu",
  kernelFunc: dA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, paddings: i } = s;
  it([o], "spaceToBatchND");
  const a = X(r), l = [[0, 0]];
  l.push(...i);
  for (let C = 1 + r.length; C < o.shape.length; ++C)
    l.push([0, 0]);
  const c = Q2.kernelFunc({
    inputs: { x: o },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), u = hl(c.shape, r, a, !1), d = pl(u.length, r.length, !1), h = fl(c.shape, r, a, !1), m = Zt({ inputs: { x: c }, backend: e, attrs: { shape: u } }), x = Qe({ inputs: { x: m }, backend: e, attrs: { perm: d } }), I = Zt({ inputs: { x }, backend: e, attrs: { shape: h } });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(x), I;
}
const fA = {
  kernelName: Xu,
  backendName: "cpu",
  kernelFunc: pA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mA(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: o, denseShape: r, defaultValue: i } = t;
  if (r.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${r.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.data.get(s.dataId).values, l = e.data.get(o.dataId).values, c = e.data.get(r.dataId).values, u = e.data.get(i.dataId).values[0], [d, h, p, f, m] = v2(a, s.shape, s.dtype, l, o.dtype, c, u);
  return [
    e.makeTensorInfo(h, s.dtype, d),
    e.makeTensorInfo([h[0]], o.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    e.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const gA = {
  kernelName: mf,
  backendName: "cpu",
  kernelFunc: mA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bA(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: o, newShape: r } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${r.shape}`);
  const i = Array.from(e.data.get(o.dataId).values), a = e.data.get(s.dataId).values, l = Array.from(e.data.get(r.dataId).values), [c, u, d] = k2(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([d.length], r.dtype, new Int32Array(d))
  ];
}
const xA = {
  kernelName: gf,
  backendName: "cpu",
  kernelFunc: bA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yA(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${r.shape}`);
  if (o.shape[0] !== r.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, [c, u] = gg(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const wA = {
  kernelName: bf,
  backendName: "cpu",
  kernelFunc: yA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IA(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${r.shape}`);
  if (o.shape[0] !== r.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, [c, u] = gg(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const CA = {
  kernelName: xf,
  backendName: "cpu",
  kernelFunc: IA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: o, sparseValues: r, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: d, outputSize: h } = ni(r, o, a), p = !1, f = e.bufferSync(o);
  let m;
  switch (r.dtype) {
    case "bool": {
      const g = e.bufferSync(r), b = Boolean(e.data.get(i.dataId).values[0]);
      m = Nr(f, g, a, h, u, c, l, d, b, p);
      break;
    }
    case "float32": {
      const g = e.bufferSync(r), b = e.data.get(i.dataId).values[0];
      m = Nr(f, g, a, h, u, c, l, d, b, p);
      break;
    }
    case "int32": {
      const g = e.bufferSync(r), b = e.data.get(i.dataId).values[0];
      m = Nr(f, g, a, h, u, c, l, d, b, p);
      break;
    }
    case "string": {
      const g = e.bufferSync(r), b = Gs(e.data.get(i.dataId).values[0]);
      m = Nr(f, g, a, h, u, c, l, d, b, p);
      break;
    }
    default:
      throw new Error(`Unsupported type ${r.dtype}`);
  }
  return e.makeTensorInfo(a, m.dtype, m.values);
}
const kA = {
  kernelName: Dx,
  backendName: "cpu",
  kernelFunc: vA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { numOrSizeSplits: r, axis: i } = s, a = Ct(i, o.shape)[0], l = Am(o, r, a), c = new Array(o.shape.length).fill(0), u = o.shape.slice();
  return l.map((d) => {
    const h = [...u];
    h[a] = d;
    const p = nr({ inputs: { x: o }, backend: e, attrs: { begin: c, size: h } });
    return c[a] += d, p;
  });
}
const TA = {
  kernelName: Pu,
  backendName: "cpu",
  kernelFunc: SA
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NA = {
  kernelName: yf,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { x: e } = n, s = t;
    it(e, "square");
    const o = s.data.get(e.dataId).values, r = new Float32Array(o.length);
    for (let a = 0; a < o.length; ++a) {
      const l = o[a];
      r[a] = l * l;
    }
    return { dataId: s.write(r, e.shape, e.dtype), shape: e.shape, dtype: e.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RA = zt(sl, (n, t) => {
  const e = t;
  return isNaN(n) ? NaN : n > 0 ? 1 : e.alpha;
}), $A = {
  kernelName: sl,
  backendName: "cpu",
  kernelFunc: RA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: d, shrinkAxisMask: h } = s;
  it(o, "stridedSlice");
  const { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: b, begin: x, end: w, strides: y } = Cm(o.shape, r, i, a, l, c, u, d, h);
  let I;
  if (m)
    I = Zt({ inputs: { x: o }, backend: e, attrs: { shape: f } });
  else if (g || b) {
    k(o.shape.length >= 1, () => `Input must have rank at least 1, got: ${o.shape.length}`);
    const C = ym(x, w, y), v = nr({ inputs: { x: o }, backend: e, attrs: { begin: x, size: C } });
    I = Zt({ inputs: { x: v }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(v);
  } else {
    const C = e.bufferSync(o), v = T2(p, C, y, x);
    I = e.makeTensorInfo(f, v.dtype, v.values);
  }
  return I;
}
const GA = {
  kernelName: wf,
  backendName: "cpu",
  kernelFunc: EA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: o, nGramWidths: r, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: d } = t, h = e.data.get(u.dataId).values, p = e.data.get(d.dataId).values, [f, m] = N2(h, p, o, r, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(d.shape, "int32", m)
  ];
}
const DA = {
  kernelName: If,
  backendName: "cpu",
  kernelFunc: LA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: o } = s, { input: r, delimiter: i } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.data.get(r.dataId).values, l = e.data.get(i.dataId).values[0], [c, u, d] = R2(a, l, o), h = u.length;
  return [
    e.makeTensorInfo([h, 2], "int32", c),
    e.makeTensorInfo([h], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(d))
  ];
}
const zA = {
  kernelName: Cf,
  backendName: "cpu",
  kernelFunc: MA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: o } = s, { input: r } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.data.get(r.dataId).values, a = $2(i, o);
  return e.makeTensorInfo(r.shape, "int32", a);
}
const WA = {
  kernelName: vf,
  backendName: "cpu",
  kernelFunc: FA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VA = zt(tl, (n) => Math.tan(n)), _A = {
  kernelName: tl,
  backendName: "cpu",
  kernelFunc: VA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AA = zt(el, (n) => Math.tanh(n)), OA = {
  kernelName: el,
  backendName: "cpu",
  kernelFunc: AA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reps: r } = s;
  it(o, "tile");
  const i = G2(e.bufferSync(o), r);
  return e.makeTensorInfo(i.shape, i.dtype, i.values);
}
const PA = {
  kernelName: nl,
  backendName: "cpu",
  kernelFunc: XA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { k: r, sorted: i } = s;
  it(o, "topk");
  const a = e.data.get(o.dataId).values, [l, c] = D2(a, o.shape, o.dtype, r, i);
  return [
    e.makeTensorInfo(l.shape, l.dtype, l.values),
    e.makeTensorInfo(c.shape, c.dtype, c.values)
  ];
}
const KA = {
  kernelName: kf,
  backendName: "cpu",
  kernelFunc: ZA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BA(n) {
  const { inputs: t, attrs: e, backend: s } = n, { image: o, transforms: r } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = e, [u, d, h, p] = o.shape, [f, m] = c ?? [d, h], g = [u, f, m, p], b = dt(o.shape), x = b[0], w = b[1], y = b[2], I = dt(g), C = I[0], v = I[1], S = I[2], N = Ie(o.dtype, X(g));
  N.fill(l);
  const R = s.data.get(o.dataId).values, $ = s.data.get(r.dataId).values;
  for (let W = 0; W < u; ++W) {
    const _ = r.shape[0] === 1 ? $ : $.subarray(W * 8, W * 8 + 8);
    for (let A = 0; A < f; ++A)
      for (let O = 0; O < m; ++O)
        for (let K = 0; K < p; ++K) {
          let Z;
          const B = _[6] * O + _[7] * A + 1;
          if (B === 0)
            continue;
          const Y = (_[0] * O + _[1] * A + _[2]) / B, Q = (_[3] * O + _[4] * A + _[5]) / B, J = O0(Y, h, a), j = O0(Q, d, a);
          switch (i) {
            case "nearest":
              Z = JA(R, d, h, x, w, y, W, j, J, K, l);
              break;
            case "bilinear":
              Z = qA(R, d, h, x, w, y, W, j, J, K, l);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`);
          }
          const nt = W * C + A * v + O * S + K;
          N[nt] = Z;
        }
    return s.makeTensorInfo(g, o.dtype, N);
  }
  return { dataId: s.write(N, g, o.dtype), shape: o.shape, dtype: o.dtype };
}
const HA = {
  kernelName: Sf,
  backendName: "cpu",
  kernelFunc: BA
};
function O0(n, t, e) {
  switch (e) {
    case "reflect":
      return UA(n, t);
    case "wrap":
      return YA(n, t);
    case "nearest":
      return jA(n, t);
    case "constant":
    default:
      return QA(n);
  }
}
function UA(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e < s && (e = s * Math.trunc(-e / s) + e), e = e < -t ? e + s : -e - 1;
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e -= s * Math.trunc(e / s), e >= t && (e = s - e - 1);
    }
  return ro(0, e, t - 1);
}
function YA(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e += t * (Math.trunc(-e / s) + 1);
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e -= t * Math.trunc(e / s);
    }
  return ro(0, e, t - 1);
}
function QA(n, t) {
  return n;
}
function jA(n, t) {
  return ro(0, n, t - 1);
}
function Ri(n, t, e, s, o, r, i, a, l, c, u) {
  const d = i * s + a * o + l * r + c;
  return 0 <= a && a < t && 0 <= l && l < e ? n[d] : u;
}
function JA(n, t, e, s, o, r, i, a, l, c, u) {
  const d = Math.round(a), h = Math.round(l);
  return Ri(n, t, e, s, o, r, i, d, h, c, u);
}
function qA(n, t, e, s, o, r, i, a, l, c, u) {
  const d = Math.floor(a), h = Math.floor(l), p = d + 1, f = h + 1, m = (f - l) * Ri(n, t, e, s, o, r, i, d, h, c, u) + (l - h) * Ri(n, t, e, s, o, r, i, d, f, c, u), g = (f - l) * Ri(n, t, e, s, o, r, i, p, h, c, u) + (l - h) * Ri(n, t, e, s, o, r, i, p, f, c, u);
  return (p - a) * m + (a - d) * g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tO(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: o } = e, { x: r } = t;
  it(r, "unique");
  const i = s.data.get(r.dataId).values, { outputValues: a, outputShape: l, indices: c } = M2(i, o, r.shape, r.dtype);
  return [
    s.makeTensorInfo(l, r.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const eO = {
  kernelName: Tf,
  backendName: "cpu",
  kernelFunc: tO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nO(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: o } = t;
  let { axis: r } = s;
  r < 0 && (r += o.shape.length);
  const i = o.shape.length, a = o.shape[r], l = new Array(i - 1);
  let c = 0;
  for (let p = 0; p < i; p++)
    p !== r && (l[c++] = o.shape[p]);
  const u = new Array(i).fill(0), d = o.shape.slice();
  d[r] = 1;
  const h = new Array(a);
  for (let p = 0; p < h.length; p++) {
    u[r] = p;
    const f = nr({ inputs: { x: o }, backend: e, attrs: { begin: u, size: d } });
    h[p] = Zt({ inputs: { x: f }, backend: e, attrs: { shape: l } }), e.disposeIntermediateTensorInfo(f);
  }
  return h;
}
const sO = {
  kernelName: Ku,
  backendName: "cpu",
  kernelFunc: nO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oO(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, segmentIds: r } = t, { numSegments: i } = s;
  it(o, "unsortedSegmentSum");
  const a = o.shape.length, l = r.shape.length, c = [], u = [], d = a - l;
  let h = r;
  for (let f = 0; f < d; ++f) {
    const m = zc({ inputs: { input: h }, backend: e, attrs: { dim: f + 1 } });
    h = m, u.push(m);
  }
  for (let f = 0; f < i; ++f) {
    const m = zs(f, "int32"), g = e.makeTensorInfo([], "int32", m), b = jI({ inputs: { a: g, b: h }, backend: e }), x = po({ inputs: { x: b }, backend: e, attrs: { dtype: "float32" } }), w = Id({ inputs: { a: x, b: o }, backend: e }), y = vl({ inputs: { x: w }, backend: e, attrs: { axis: 0, keepDims: !1 } });
    c.push(y), u.push(g), u.push(b), u.push(x), u.push(w), u.push(y);
  }
  const p = Y2({ inputs: c, backend: e, attrs: { axis: 0 } });
  return u.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const rO = {
  kernelName: Bu,
  backendName: "cpu",
  kernelFunc: oO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iO = [
  eF,
  OM,
  sF,
  rF,
  HM,
  aF,
  cF,
  dF,
  pF,
  mF,
  bF,
  yF,
  IF,
  kF,
  TF,
  $F,
  GF,
  DF,
  zF,
  qz,
  WF,
  _F,
  OF,
  PF,
  KM,
  YM,
  KF,
  XM,
  HF,
  YF,
  QF,
  JF,
  tW,
  nW,
  oW,
  iW,
  lW,
  uW,
  hW,
  fW,
  gW,
  xW,
  wW,
  IW,
  vW,
  SW,
  NW,
  RW,
  $W,
  EW,
  DW,
  Bz,
  zW,
  QM,
  PW,
  jM,
  ZW,
  qM,
  QW,
  jW,
  qW,
  ez,
  nV,
  oV,
  iV,
  lV,
  uV,
  sz,
  rz,
  PM,
  hV,
  UF,
  fV,
  gV,
  xV,
  Hz,
  az,
  cz,
  wV,
  dz,
  CV,
  SV,
  NV,
  EV,
  LV,
  MV,
  zV,
  pz,
  WV,
  _V,
  OV,
  PV,
  KV,
  HV,
  YV,
  mz,
  jV,
  t_,
  s_,
  bz,
  yz,
  i_,
  c_,
  h_,
  Iz,
  f_,
  g_,
  b_,
  Q2,
  I_,
  Yz,
  kz,
  v_,
  S_,
  N_,
  $_,
  ZM,
  pp,
  G_,
  Qz,
  jz,
  Jz,
  D_,
  z_,
  W_,
  __,
  O_,
  X_,
  Z_,
  Lz,
  B_,
  j_,
  q_,
  sA,
  Mz,
  rA,
  aA,
  cA,
  zz,
  e_,
  hA,
  fA,
  gA,
  xA,
  wA,
  CA,
  kA,
  TA,
  Vz,
  NA,
  Az,
  $A,
  GA,
  DA,
  zA,
  WA,
  Zz,
  GW,
  _A,
  OA,
  PA,
  KA,
  HA,
  Cz,
  eO,
  sO,
  rO,
  m_
];
for (const n of iO)
  cn(n);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Eo = {}, Ol = {
  alpha: !1,
  antialias: !1,
  premultipliedAlpha: !1,
  preserveDrawingBuffer: !1,
  depth: !1,
  stencil: !1,
  failIfMajorPerformanceCaveat: !0
};
function aO(n, t) {
  Eo[n] = t;
}
function es(n, t) {
  if (!(n in Eo) || t != null) {
    const s = cO(n, t);
    if (s !== null)
      Eo[n] = s;
    else
      return console.log("Could not get context for WebGL version", n), null;
  }
  const e = Eo[n];
  return e == null || e.isContextLost() ? (delete Eo[n], es(n)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), Eo[n]);
}
function lO(n) {
  if (typeof OffscreenCanvas < "u" && n === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document < "u")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function cO(n, t) {
  if (n !== 1 && n !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  const e = t ?? lO(n);
  return e.addEventListener("webglcontextlost", (s) => {
    s.preventDefault(), delete Eo[n];
  }, !1), V().getBool("SOFTWARE_WEBGL_ENABLED") && (Ol.failIfMajorPerformanceCaveat = !1), n === 1 ? e.getContext("webgl", Ol) || e.getContext("experimental-webgl", Ol) : e.getContext("webgl2", Ol);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Qi;
(function(n) {
  n[n.DENSE = 0] = "DENSE", n[n.SHARED_BATCH = 1] = "SHARED_BATCH";
})(Qi || (Qi = {}));
var gn;
(function(n) {
  n[n.RENDER = 0] = "RENDER", n[n.UPLOAD = 1] = "UPLOAD", n[n.PIXELS = 2] = "PIXELS", n[n.DOWNLOAD = 3] = "DOWNLOAD";
})(gn || (gn = {}));
var Ne;
(function(n) {
  n[n.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", n[n.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", n[n.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", n[n.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", n[n.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(Ne || (Ne = {}));
function kl(n, t) {
  return [t, n];
}
function uO(n, t) {
  return n * t;
}
function Xl(n) {
  const t = X(n), e = Math.ceil(t / 4);
  return cc(e);
}
function ii(n, t) {
  return [
    Math.max(1, Math.ceil(t / 2)),
    Math.max(1, Math.ceil(n / 2))
  ];
}
function dO(n, t) {
  const [e, s] = ii(n, t);
  return e * s * 4;
}
function Ig(n, t) {
  const e = n;
  let s, o, r, i, a, l, c, u, d, h;
  return V().getNumber("WEBGL_VERSION") === 2 ? (s = e.R32F, o = e.R16F, r = e.RGBA16F, i = e.RGBA32F, a = e.RED, c = 4, u = 1, d = e.HALF_FLOAT, h = e.FLOAT, l = e.RGBA8) : (s = n.RGBA, o = n.RGBA, r = n.RGBA, i = e.RGBA, a = n.RGBA, c = 4, u = 4, d = t != null ? t.HALF_FLOAT_OES : null, h = n.FLOAT, l = n.RGBA), {
    internalFormatFloat: s,
    internalFormatHalfFloat: o,
    internalFormatPackedHalfFloat: r,
    internalFormatPackedFloat: i,
    textureFormatFloat: a,
    downloadTextureFormat: l,
    downloadUnpackNumChannels: c,
    defaultNumChannels: u,
    textureTypeHalfFloat: d,
    textureTypeFloat: h
  };
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ot(n, t) {
  const e = t();
  return V().getBool("DEBUG") && hO(n), e;
}
function hO(n) {
  const t = n.getError();
  if (t !== n.NO_ERROR)
    throw new Error("WebGL Error: " + gO(n, t));
}
const pO = 596e-10, fO = 65504;
function mO(n) {
  return !!(V().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || n === 0 || pO < Math.abs(n) && Math.abs(n) < fO);
}
function gO(n, t) {
  switch (t) {
    case n.NO_ERROR:
      return "NO_ERROR";
    case n.INVALID_ENUM:
      return "INVALID_ENUM";
    case n.INVALID_VALUE:
      return "INVALID_VALUE";
    case n.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case n.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case n.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case n.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${t}`;
  }
}
function Pl(n, t) {
  return As(n, () => n.getExtension(t), 'Extension "' + t + '" not supported on this browser.');
}
function bO(n, t) {
  const e = As(n, () => n.createShader(n.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (ot(n, () => n.shaderSource(e, t)), ot(n, () => n.compileShader(e)), n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw console.log(n.getShaderInfoLog(e)), new Error("Failed to compile vertex shader.");
  return e;
}
function xO(n, t) {
  const e = As(n, () => n.createShader(n.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (ot(n, () => n.shaderSource(e, t)), ot(n, () => n.compileShader(e)), V().get("ENGINE_COMPILE_ONLY"))
    return e;
  if (n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw j2(t, n.getShaderInfoLog(e)), new Error("Failed to compile fragment shader.");
  return e;
}
const yO = /ERROR: [0-9]+:([0-9]+):/g;
function j2(n, t) {
  const e = yO.exec(t);
  if (e == null) {
    console.log(`Couldn't parse line number in error: ${t}`), console.log(n);
    return;
  }
  const s = +e[1], o = n.split(`
`), r = o.length.toString().length + 2, i = o.map((d, h) => Vo((h + 1).toString(), r) + d);
  let a = 0;
  for (let d = 0; d < i.length; d++)
    a = Math.max(i[d].length, a);
  const l = i.slice(0, s - 1), c = i.slice(s - 1, s), u = i.slice(s);
  console.log(l.join(`
`)), console.log(t.split(`
`)[0]), console.log(`%c ${Vo(c[0], a)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(u.join(`
`));
}
function wO(n) {
  return As(n, () => n.createProgram(), "Unable to create WebGLProgram.");
}
function IO(n, t) {
  if (ot(n, () => n.linkProgram(t)), !V().get("ENGINE_COMPILE_ONLY") && n.getProgramParameter(t, n.LINK_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
}
function Zd(n, t) {
  if (ot(n, () => n.validateProgram(t)), n.getProgramParameter(t, n.VALIDATE_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Shader program validation failed.");
}
function CO(n, t) {
  const e = As(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return ot(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), ot(n, () => n.bufferData(n.ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function vO(n, t) {
  const e = As(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return ot(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e)), ot(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function kO(n) {
  return As(n, () => n.createTexture(), "Unable to create WebGLTexture.");
}
function SO(n, t) {
  const e = V().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (n <= 0 || t <= 0) {
    const s = `[${n}x${t}]`;
    throw new Error("Requested texture size " + s + " is invalid.");
  }
  if (n > e || t > e) {
    const s = `[${n}x${t}]`, o = `[${e}x${e}]`;
    throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + o + ".");
  }
}
function TO(n) {
  return As(n, () => n.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function X0(n, t, e, s, o, r, i) {
  const a = n.getAttribLocation(t, e);
  return a === -1 ? !1 : (ot(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)), ot(n, () => n.vertexAttribPointer(a, o, n.FLOAT, !1, r, i)), ot(n, () => n.enableVertexAttribArray(a)), !0);
}
function NO(n, t, e) {
  LO(n, e), ot(n, () => n.activeTexture(n.TEXTURE0 + e)), ot(n, () => n.bindTexture(n.TEXTURE_2D, t));
}
function RO(n, t, e) {
  return As(n, () => n.getUniformLocation(t, e), 'uniform "' + e + '" not present in program.');
}
function $O(n, t, e) {
  return n.getUniformLocation(t, e);
}
function EO(n, t, e, s) {
  ot(n, () => NO(n, t, s)), ot(n, () => n.uniform1i(e, s));
}
function Kd(n, t, e) {
  ot(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)), ot(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, t, 0));
}
function P0(n, t) {
  ot(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)), ot(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, null, 0));
}
function Zl(n) {
  const t = n.checkFramebufferStatus(n.FRAMEBUFFER);
  if (t !== n.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + GO(n, t));
}
function GO(n, t) {
  switch (t) {
    case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case n.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${t}`;
  }
}
function As(n, t, e) {
  const s = ot(n, () => t());
  if (s == null)
    throw new Error(e);
  return s;
}
function LO(n, t) {
  const e = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = t + n.TEXTURE0;
  if (s < n.TEXTURE0 || s > e) {
    const o = `[gl.TEXTURE0, gl.TEXTURE${e}]`;
    throw new Error(`textureUnit must be in ${o}.`);
  }
}
function Zr(n, t = 2) {
  return X(n.slice(0, n.length - t));
}
function Kr(n) {
  if (n.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [
    n.length > 1 ? n[n.length - 2] : 1,
    n[n.length - 1]
  ];
}
function Kl(n) {
  let t = [1, 1, 1];
  return n.length === 0 || n.length === 1 && n[0] === 1 || (t = [Zr(n), ...Kr(n)]), t;
}
function DO(n, t = !1) {
  let e = V().getNumber("WEBGL_MAX_TEXTURE_SIZE"), s = V().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  s === 1 / 0 && V().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (s = e / 2), t && (e = e * 2, s = s * 2, n = n.map((a, l) => l >= n.length - 2 ? Kc(n[l]) : n[l]), n.length === 1 && (n = [2, n[0]])), n.length !== 2 && (n = Ms(n).newShape);
  let o = X(n), r = null;
  n.length <= 1 && o <= e ? r = [1, o] : n.length === 2 && n[0] <= e && n[1] <= e ? r = n : n.length === 3 && n[0] * n[1] <= e && n[2] <= e ? r = [n[0] * n[1], n[2]] : n.length === 3 && n[0] <= e && n[1] * n[2] <= e ? r = [n[0], n[1] * n[2]] : n.length === 4 && n[0] * n[1] * n[2] <= e && n[3] <= e ? r = [n[0] * n[1] * n[2], n[3]] : n.length === 4 && n[0] <= e && n[1] * n[2] * n[3] <= e && (r = [n[0], n[1] * n[2] * n[3]]);
  const i = r != null && Math.max(...r) > s && Math.min(...r) <= (t ? 2 : 1) && Math.min(...r) > 0;
  if (r == null || i)
    if (t) {
      const a = Zr(n);
      let l = 2, c = 2;
      n.length && ([l, c] = Kr(n)), o = a * (l / 2) * (c / 2), r = cc(o).map((u) => u * 2);
    } else
      r = cc(o);
  return r;
}
function Bl(n) {
  return n % 2 === 0;
}
function Wc(n, t) {
  if (n = n.slice(-2), t = t.slice(-2), $t(n, t) || !n.length || !t.length || n[0] === 0 || n[1] === 0 || t[0] === 0 || t[1] === 0)
    return !0;
  if (n.length !== t.length) {
    const e = n.slice(-1)[0], s = t.slice(-1)[0];
    if (e === s || Bl(e) && Bl(s) && (n[0] === 1 || t[0] === 1))
      return !0;
  }
  return n[1] === t[1] && Bl(n[0]) && Bl(t[0]);
}
let Bd, Hd;
function MO(n) {
  if (Bd == null) {
    const t = es(n);
    Bd = t.getParameter(t.MAX_TEXTURE_SIZE);
  }
  return Bd;
}
function zO(n) {
  if (Hd == null) {
    const t = es(n);
    Hd = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Hd);
}
function FO(n) {
  if (n === 0)
    return 0;
  let t;
  const e = es(n);
  return Dn(e, "EXT_disjoint_timer_query_webgl2") && n === 2 ? t = 2 : Dn(e, "EXT_disjoint_timer_query") ? t = 1 : t = 0, t;
}
function Dn(n, t) {
  return n.getExtension(t) != null;
}
function Z0(n) {
  try {
    if (es(n) != null)
      return !0;
  } catch (t) {
    return console.log("Error when getting WebGL context: ", t), !1;
  }
  return !1;
}
function WO(n) {
  if (n === 0)
    return !1;
  const t = es(n);
  if (n === 1) {
    if (!Dn(t, "OES_texture_float"))
      return !1;
  } else if (!Dn(t, "EXT_color_buffer_float"))
    return !1;
  return mp(t);
}
function VO(n) {
  if (n === 0)
    return !1;
  const t = es(n);
  if (n === 1) {
    if (!Dn(t, "OES_texture_float") || !Dn(t, "WEBGL_color_buffer_float"))
      return !1;
  } else {
    if (Dn(t, "EXT_color_buffer_float"))
      return mp(t);
    const s = "EXT_color_buffer_half_float";
    if (Dn(t, s)) {
      const o = t.getExtension(s);
      return _O(t, o);
    }
    return !1;
  }
  return mp(t);
}
function mp(n) {
  const t = Ig(n), e = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, e);
  const s = 1, o = 1;
  n.texImage2D(n.TEXTURE_2D, 0, t.internalFormatFloat, s, o, 0, t.textureFormatFloat, t.textureTypeFloat, null);
  const r = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, r), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, e, 0);
  const i = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(e), n.deleteFramebuffer(r), i;
}
function _O(n, t) {
  const e = Ig(n, t), s = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, s);
  const o = 1, r = 1;
  n.texImage2D(n.TEXTURE_2D, 0, e.internalFormatHalfFloat, o, r, 0, e.textureFormatFloat, e.textureTypeHalfFloat, null);
  const i = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, i), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, s, 0);
  const a = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(s), n.deleteFramebuffer(i), a;
}
function AO(n) {
  return n !== 2 ? !1 : es(n).fenceSync != null;
}
function Sl(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && k(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the WebGL backend.`);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ct = V();
ct.registerFlag("HAS_WEBGL", () => ct.getNumber("WEBGL_VERSION") > 0);
ct.registerFlag("WEBGL_VERSION", () => Z0(2) ? 2 : Z0(1) ? 1 : 0);
ct.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1);
ct.registerFlag("WEBGL_BUFFER_SUPPORTED", () => ct.get("WEBGL_VERSION") === 2);
ct.registerFlag("WEBGL_CPU_FORWARD", () => !0);
ct.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1);
ct.registerFlag("WEBGL_PACK", () => ct.getBool("HAS_WEBGL"));
ct.registerFlag("WEBGL_PACK_NORMALIZATION", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_CLIP", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_PACK_REDUCE", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_LAZILY_UNPACK", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_CONV_IM2COL", () => ct.getBool("WEBGL_PACK"));
ct.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => MO(ct.getNumber("WEBGL_VERSION")));
ct.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => zO(ct.getNumber("WEBGL_VERSION")));
ct.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const n = ct.getNumber("WEBGL_VERSION");
  return n === 0 ? 0 : FO(n);
});
ct.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => ct.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !Gf());
ct.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => WO(ct.getNumber("WEBGL_VERSION")));
ct.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => ct.getBool("WEBGL_FORCE_F16_TEXTURES") ? !1 : ct.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
ct.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => VO(ct.getNumber("WEBGL_VERSION")));
ct.registerFlag("WEBGL_FENCE_API_ENABLED", () => AO(ct.getNumber("WEBGL_VERSION")));
ct.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => ct.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
ct.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`);
});
ct.registerFlag("WEBGL_FLUSH_THRESHOLD", () => Gf() ? 1 : -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`);
});
ct.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
ct.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1);
ct.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
ct.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
ct.registerFlag("WEBGL_EXP_CONV", () => !1);
ct.registerFlag("SOFTWARE_WEBGL_ENABLED", () => ct.getBool("IS_TEST"));
ct.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
ct.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1);
ct.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1);
ct.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pe() {
  let n, t, e, s, o, r, i, a, l, c;
  return V().getNumber("WEBGL_VERSION") === 2 ? (n = "#version 300 es", t = "in", e = "out", s = "in", o = "texture", r = "outputColor", i = "out vec4 outputColor;", a = V().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (n = "", t = "attribute", e = "varying", s = "varying", o = "texture2D", r = "gl_FragColor", i = "", a = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), {
    version: n,
    attribute: t,
    varyingVs: e,
    varyingFs: s,
    texture2D: o,
    output: r,
    defineOutput: i,
    defineSpecialNaN: a,
    defineSpecialInf: l,
    defineRound: c
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fr(n, t, e = "index") {
  const s = dt(t);
  return s.map((o, r) => {
    const i = `int ${n[r]} = ${e} / ${o}`, a = r === s.length - 1 ? `int ${n[r + 1]} = ${e} - ${n[r]} * ${o}` : `index -= ${n[r]} * ${o}`;
    return `${i}; ${a};`;
  }).join("");
}
function Cd(n, t, e = "index") {
  const s = dt(t);
  return s.map((o, r) => {
    const i = `int ${n[r]} = ${e} / outShapeStrides[${r}]`, a = r === s.length - 1 ? `int ${n[r + 1]} = ${e} - ${n[r]} * outShapeStrides[${r}]` : `index -= ${n[r]} * outShapeStrides[${r}]`;
    return `${i}; ${a};`;
  }).join("");
}
function OO(n, t) {
  const e = n.length, s = n.map((r) => `${t}[${r}]`), o = new Array(e - 1);
  o[e - 2] = s[e - 1];
  for (let r = e - 3; r >= 0; --r)
    o[r] = `(${o[r + 1]} * ${s[r + 1]})`;
  return o;
}
function XO(n, t, e = "index") {
  const s = n.map((r, i) => i), o = OO(s, t);
  return o.map((r, i) => {
    const a = `int ${n[i]} = ${e} / ${o[i]}`, l = i === o.length - 1 ? `int ${n[i + 1]} = ${e} - ${n[i]} * ${o[i]}` : `index -= ${n[i]} * ${o[i]}`;
    return `${a}; ${l};`;
  }).join("");
}
function Cg(n) {
  const t = dt(n).map((e) => e.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function vg() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const J2 = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { getBroadcastDims: q2 } = xG;
function PO(n, t, e) {
  const s = [];
  if (n.forEach((p) => {
    const f = X(p.shapeInfo.logicalShape);
    if (p.shapeInfo.isUniform ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${p.name};`), s.push(`uniform int offset${p.name};`)), e.enableShapeUniforms) {
      const { uniformShape: m } = kg(e.packedInputs, p.shapeInfo.logicalShape, p.shapeInfo.texShape);
      switch (m.length) {
        case 1:
          s.push(`uniform int ${p.name}Shape;`);
          break;
        case 2:
          s.push(`uniform ivec2 ${p.name}Shape;`);
          break;
        case 3:
          s.push(`uniform ivec3 ${p.name}Shape;`);
          break;
        case 4:
          s.push(`uniform ivec4 ${p.name}Shape;`);
          break;
      }
      s.push(`uniform ivec2 ${p.name}TexShape;`);
    }
  }), e.enableShapeUniforms) {
    switch (t.logicalShape.length) {
      case 1:
        s.push("uniform int outShape;");
        break;
      case 2:
        s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
        break;
      case 3:
        s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
        break;
    }
    s.push("uniform ivec2 outTexShape;");
  }
  e.customUniforms && e.customUniforms.forEach((p) => {
    s.push(`uniform ${p.type} ${p.name}${p.arrayIndex ? `[${p.arrayIndex}]` : ""};`);
  });
  const o = s.join(`
`), r = n.map((p) => ZO(p, t, e.packedInputs, e.enableShapeUniforms)).join(`
`), i = t.texShape, a = Pe(), l = HO(a);
  let c, u, d = QO(a);
  return t.isPacked ? (c = KO(t.logicalShape, i, e.enableShapeUniforms), u = YO(a)) : (c = BO(t.logicalShape, i, e.enableShapeUniforms), u = UO(a)), e.packedInputs && (d += tX), [
    d,
    l,
    u,
    o,
    c,
    r,
    e.userCode
  ].join(`
`);
}
function ai(n, t = !1) {
  const e = n.shapeInfo.logicalShape;
  switch (e.length) {
    case 0:
      return hX(n, t);
    case 1:
      return fX(n, t);
    case 2:
      return gX(n, t);
    case 3:
      return xX(n, t);
    case 4:
      return wX(n, t);
    case 5:
      return IX(n);
    case 6:
      return CX(n);
    default:
      throw new Error(`${e.length}-D input sampling is not yet supported`);
  }
}
function tC(n, t) {
  switch (n.shapeInfo.logicalShape.length) {
    case 0:
      return dX(n);
    case 1:
      return pX(n, t);
    case 2:
      return mX(n, t);
    case 3:
      return bX(n, t);
    default:
      return yX(n, t);
  }
}
function ZO(n, t, e = !1, s) {
  let o = "";
  e ? o += tC(n, s) : o += ai(n, s);
  const r = n.shapeInfo.logicalShape, i = t.logicalShape;
  return r.length <= i.length && (e ? o += vX(n, t) : o += kX(n, t)), o;
}
function KO(n, t, e) {
  switch (n.length) {
    case 0:
      return eC();
    case 1:
      return eX(n, t, e);
    case 2:
      return cX(n, t, e);
    case 3:
      return sX(n, t, e);
    default:
      return rX(n, t, e);
  }
}
function BO(n, t, e) {
  switch (n.length) {
    case 0:
      return eC();
    case 1:
      return nX(n, t, e);
    case 2:
      return uX(n, t, e);
    case 3:
      return oX(n, t, e);
    case 4:
      return iX(n, t, e);
    case 5:
      return aX(n, t);
    case 6:
      return lX(n, t);
    default:
      throw new Error(`${n.length}-D output sampling is not yet supported`);
  }
}
function HO(n) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function UO(n) {
  return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function YO(n) {
  return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function QO(n) {
  return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${jO}
    ${JO}
    ${qO}
  `;
}
const jO = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, JO = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, qO = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, tX = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function eC() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function eX(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  return s[0] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function nX(n, t, e) {
  return t[0] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    ` : t[1] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function sX(n, t, e) {
  if (e)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], o = Math.ceil(n[2] / 2), r = o * Math.ceil(n[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${r};
      index -= b * ${r};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function oX(n, t, e) {
  if (e)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Cd(["r", "c", "d"], n)}
    return ivec3(r, c, d);
  }
`;
  const s = fr(["r", "c", "d"], n);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function rX(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], o = Math.ceil(n[n.length - 1] / 2), r = o * Math.ceil(n[n.length - 2] / 2);
  let i = r, a = "", l = "b, r, c";
  for (let c = 2; c < n.length - 1; c++)
    i *= n[n.length - c - 1], a = `
      int b${c} = index / ${i};
      index -= b${c} * ${i};
    ` + a, l = `b${c}, ` + l;
  return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${a}

      int b = index / ${r};
      index -= b * ${r};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec${n.length}(${l});
    }
  `;
}
function iX(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Cd(["r", "c", "d", "d2"], n)}
      return ivec4(r, c, d, d2);
    }
  `;
  const s = fr(["r", "c", "d", "d2"], n);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function aX(n, t) {
  const e = fr(["r", "c", "d", "d2", "d3"], n);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function lX(n, t) {
  const e = fr(["r", "c", "d", "d2", "d3", "d4"], n);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function cX(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  if ($t(n, t))
    return e ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
  const o = Math.ceil(n[1] / 2);
  return e ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec2(r, c);
    }
  `;
}
function uX(n, t, e) {
  return $t(n, t) ? e ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    ` : n[1] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : n[0] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : e ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function mr(n) {
  return `offset${n}`;
}
function dX(n) {
  const t = n.name, e = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = Pe();
  return `
    vec4 ${e}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `;
}
function hX(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `float ${s}() {return ${e};}`;
  const [o, r] = n.shapeInfo.texShape;
  if (o === 1 && r === 1)
    return `
      float ${s}() {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const i = mr(e);
  if (t)
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;
  const [a, l] = n.shapeInfo.texShape;
  return `
    float ${s}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `;
}
function pX(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), o = n.shapeInfo.texShape, r = Pe();
  if (t)
    return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${r.texture2D}(${e}, uv);
    }
  `;
  const i = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
  return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${r.texture2D}(${e}, uv);
    }
  `;
}
function fX(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int index) {
        ${li(n)}
      }
    `;
  const o = n.shapeInfo.texShape, r = o[0], i = o[1];
  if (i === 1 && r === 1)
    return `
      float ${s}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const a = mr(e);
  return i === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${r}.0);
        return sampleTexture(${e}, uv);
      }
    ` : r === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : t ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${r}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `;
}
function mX(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = n.shapeInfo.texShape, i = r[0], a = r[1], l = Pe();
  if (r != null && $t(e, r))
    return t ? `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
  if (t)
    return `
    vec4 ${o}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
  const c = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)], u = Math.ceil(e[1] / 2);
  return `
    vec4 ${o}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
}
function gX(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = n.shapeInfo.texShape;
  if (r != null && $t(e, r)) {
    if (t)
      return `
      float ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
    const h = r[0], p = r[1];
    return `
    float ${o}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  }
  const { newShape: i, keptDims: a } = Ms(e), l = i;
  if (l.length < e.length) {
    const h = ci(n, l), p = ["row", "col"];
    return `
      ${ai(h, t)}
      float ${o}(int row, int col) {
        return ${o}(${ui(p, a)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${li(n)}
      }
    `;
  const c = r[0], u = r[1], d = mr(s);
  return u === 1 ? t ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  ` : c === 1 ? t ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${d}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${d}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : t ? `
      float ${o}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${d};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${o}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${d};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function bX(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = n.shapeInfo.texShape, i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  if (e[0] === 1) {
    const h = e.slice(1), p = [1, 2], f = ci(n, h), m = ["b", "row", "col"];
    return `
        ${tC(f, t)}
        vec4 ${o}(int b, int row, int col) {
          return ${o}(${ui(m, p)});
        }
      `;
  }
  const a = Pe();
  if (t)
    return `
    vec4 ${o}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
  const l = i[0], c = i[1], u = Math.ceil(e[2] / 2), d = u * Math.ceil(e[1] / 2);
  return `
    vec4 ${o}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${d}, ${u}, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
}
function xX(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = e[1] * e[2], i = e[2], { newShape: a, keptDims: l } = Ms(e), c = a;
  if (c.length < e.length) {
    const m = ci(n, c), g = ["row", "col", "depth"];
    return `
        ${ai(m, t)}
        float ${o}(int row, int col, int depth) {
          return ${o}(${ui(g, l)});
        }
      `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${r}, ${i}, 1)));
        ${li(n)}
      }
    `;
  const u = n.shapeInfo.texShape, d = u[0], h = u[1], p = n.shapeInfo.flatOffset;
  if (h === r && p == null)
    return t ? `
      float ${o}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${o}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${h}.0, ${d}.0);
          return sampleTexture(${s}, uv);
        }
      `;
  if (h === i && p == null)
    return t ? `
      float ${o}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${o}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  const f = mr(s);
  return t ? `
    float ${o}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${o}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${r} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${d}, ${h}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function yX(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), o = Pe();
  if (t)
    return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${o.texture2D}(${e}, uv);
    }
  `;
  const r = n.shapeInfo.logicalShape, i = r.length, a = n.shapeInfo.texShape, l = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)], c = l[0], u = l[1], d = Math.ceil(r[i - 1] / 2);
  let h = d * Math.ceil(r[i - 2] / 2), p = "int b, int row, int col", f = `b * ${h} + (row / 2) * ${d} + (col / 2)`;
  for (let m = 2; m < i - 1; m++)
    p = `int b${m}, ` + p, h *= r[i - m - 1], f = `b${m} * ${h} + ` + f;
  return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${o.texture2D}(${e}, uv);
    }
  `;
}
function wX(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = e[3], i = e[2] * r, a = e[1] * i, { newShape: l, keptDims: c } = Ms(e);
  if (l.length < e.length) {
    const x = ci(n, l), w = ["row", "col", "depth", "depth2"];
    return `
      ${ai(x, t)}
      float ${o}(int row, int col, int depth, int depth2) {
        return ${o}(${ui(w, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${r}, 1)));
        ${li(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, h = d[0], p = d[1], f = `int stride2 = ${s}Shape[3];`, m = `int stride1 = ${s}Shape[2] * stride2;`, g = `int stride0 = ${s}Shape[1] * stride1;`;
  if (p === a && u == null)
    return t ? `
      float ${o}(int row, int col, int depth, int depth2) {
        ${f}
        ${m}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${h}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  if (p === r && u == null)
    return t ? `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1] * e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${h}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  const b = mr(s);
  return t ? `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${m}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${r} + depth2;
      vec2 uv = uvFromFlat(${h}, ${p}, index + ${b});
      return sampleTexture(${s}, uv);
    }
  `;
}
function IX(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), o = t[4], r = t[3] * o, i = t[2] * r, a = t[1] * i, { newShape: l, keptDims: c } = Ms(t);
  if (l.length < t.length) {
    const m = ci(n, l), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${ai(m)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${ui(g, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${r}, ${o})) +
          depth3;
        ${li(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, h = d[0], p = d[1];
  if (p === a && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${r}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${h}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (p === o && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${h}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const f = mr(e);
  return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${r} +
          depth2 * ${o} + depth3 + ${f};
      vec2 uv = uvFromFlat(${h}, ${p}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function CX(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), { newShape: o, keptDims: r } = Ms(t);
  if (o.length < t.length) {
    const g = ci(n, o), b = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${ai(g)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${ui(b, r)});
      }
    `;
  }
  const i = t[5], a = t[4] * i, l = t[3] * a, c = t[2] * l, u = t[1] * c;
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${li(n)}
      }
    `;
  const d = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, p = h[0], f = h[1];
  if (f === u && d == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (f === i && d == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const m = mr(e);
  return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${m};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function li(n) {
  const t = n.name, e = X(n.shapeInfo.logicalShape);
  return e < 2 ? `return ${t};` : `
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function vX(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), o = "get" + s + "AtOutCoords", r = n.shapeInfo.logicalShape.length, i = t.logicalShape.length, a = q2(n.shapeInfo.logicalShape, t.logicalShape), l = Kt(i), c = i - r;
  let u;
  const d = ["x", "y", "z", "w", "u", "v"];
  r === 0 ? u = "" : i < 2 && a.length >= 1 ? u = "coords = 0;" : u = a.map((x) => `coords.${d[x + c]} = 0;`).join(`
`);
  let h = "";
  i < 2 && r > 0 ? h = "coords" : h = n.shapeInfo.logicalShape.map((x, w) => `coords.${d[w + c]}`).join(", ");
  let p = "return outputValue;";
  const m = X(n.shapeInfo.logicalShape) === 1, b = X(t.logicalShape) === 1;
  if (r === 1 && !m && !b)
    p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (m && !b)
    i === 1 ? p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : p = `
        return vec4(outputValue.x);
      `;
  else if (a.length) {
    const x = r - 2, w = r - 1;
    a.indexOf(x) > -1 && a.indexOf(w) > -1 ? p = "return vec4(outputValue.x);" : a.indexOf(x) > -1 ? p = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : a.indexOf(w) > -1 && (p = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${o}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${h});
      ${p}
    }
  `;
}
function kX(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), o = "get" + s + "AtOutCoords", r = t.texShape, i = n.shapeInfo.texShape, a = n.shapeInfo.logicalShape.length, l = t.logicalShape.length;
  if (!n.shapeInfo.isUniform && a === l && n.shapeInfo.flatOffset == null && $t(i, r))
    return `
      float ${o}() {
        return sampleTexture(${e}, resultUV);
      }
    `;
  const c = Kt(l), u = q2(n.shapeInfo.logicalShape, t.logicalShape), d = l - a;
  let h;
  const p = ["x", "y", "z", "w", "u", "v"];
  a === 0 ? h = "" : l < 2 && u.length >= 1 ? h = "coords = 0;" : h = u.map((m) => `coords.${p[m + d]} = 0;`).join(`
`);
  let f = "";
  return l < 2 && a > 0 ? f = "coords" : f = n.shapeInfo.logicalShape.map((m, g) => `coords.${p[g + d]}`).join(", "), `
    float ${o}() {
      ${c} coords = getOutputCoords();
      ${h}
      return get${s}(${f});
    }
  `;
}
function Kt(n) {
  if (n <= 1)
    return "int";
  if (n === 2)
    return "ivec2";
  if (n === 3)
    return "ivec3";
  if (n === 4)
    return "ivec4";
  if (n === 5)
    return "ivec5";
  if (n === 6)
    return "ivec6";
  throw Error(`GPU for rank ${n} is not yet supported`);
}
function kg(n, t, e) {
  const { newShape: s, keptDims: o } = Ms(t), r = t.length, i = n && r === 3 && t[0] === 1, a = i ? t.slice(1) : s, l = !n && r > 1 && !$t(t, e) && s.length < r || i;
  return { useSqueezeShape: l, uniformShape: l ? a : t, keptDims: o };
}
function ci(n, t) {
  const e = JSON.parse(JSON.stringify(n));
  return e.shapeInfo.logicalShape = t, e;
}
function ui(n, t) {
  return t.map((e) => n[e]).join(", ");
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SX(n, t, e, s) {
  const o = e.map((u, d) => {
    const h = {
      logicalShape: u.shape,
      texShape: u.isUniform ? null : u.texData.texShape,
      isUniform: u.isUniform,
      isPacked: u.isUniform ? !1 : u.texData.isPacked,
      flatOffset: null
    };
    return u.texData != null && u.texData.slice != null && u.texData.slice.flatOffset > 0 && (h.flatOffset = u.texData.slice.flatOffset), { name: t.variableNames[d], shapeInfo: h };
  }), r = o.map((u) => u.shapeInfo), i = {
    logicalShape: s.shape,
    texShape: s.texData.texShape,
    isUniform: !1,
    isPacked: s.texData.isPacked,
    flatOffset: null
  }, a = PO(o, i, t), l = xO(n.gl, a), c = n.createProgram(l);
  return V().get("ENGINE_COMPILE_ONLY") ? {
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: r,
    outShapeInfo: i,
    uniformLocations: null,
    customUniformLocations: null,
    infLoc: null,
    nanLoc: null,
    inShapesLocations: null,
    inTexShapesLocations: null,
    outShapeLocation: null,
    outShapeStridesLocation: null,
    outTexShapeLocation: null
  } : Object.assign({
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: r,
    outShapeInfo: i
  }, nC(n, t, c));
}
function nC(n, t, e) {
  const s = {}, o = {}, r = {}, i = [];
  let a, l, c, u = null, d = null;
  d = n.getUniformLocation(e, "NAN", !1), V().getNumber("WEBGL_VERSION") === 1 && (u = n.getUniformLocation(e, "INFINITY", !1));
  const h = !1;
  for (let p = 0; p < t.variableNames.length; p++) {
    const f = t.variableNames[p];
    s[f] = n.getUniformLocation(e, f, h), s[`offset${f}`] = n.getUniformLocation(e, `offset${f}`, h), t.enableShapeUniforms && (o[`${f}Shape`] = n.getUniformLocation(e, `${f}Shape`, h), r[`${f}TexShape`] = n.getUniformLocation(e, `${f}TexShape`, h));
  }
  return t.enableShapeUniforms && (a = n.getUniformLocation(e, "outShape", h), c = n.getUniformLocation(e, "outShapeStrides", h), l = n.getUniformLocation(e, "outTexShape", h)), t.customUniforms && t.customUniforms.forEach((p, f) => {
    i[f] = n.getUniformLocation(e, p.name, h);
  }), {
    uniformLocations: s,
    customUniformLocations: i,
    infLoc: u,
    nanLoc: d,
    inShapesLocations: o,
    inTexShapesLocations: r,
    outShapeLocation: a,
    outShapeStridesLocation: c,
    outTexShapeLocation: l
  };
}
function K0(n, t) {
  if (n.length !== t.length)
    throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);
  n.forEach((e, s) => {
    const o = e.logicalShape, r = t[s], i = r.shape;
    if (!$t(o, i))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${o} and ${i} must match`);
    if (e.isUniform && r.isUniform)
      return;
    const a = e.texShape, l = r.isUniform ? null : r.texData.texShape;
    if (!$t(a, l))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`);
  });
}
function TX(n, t, e, s, o) {
  t.program.enableShapeUniforms || (K0(t.inShapeInfos, e), K0([t.outShapeInfo], [s]));
  const r = s.texData.texture, i = s.texData.texShape;
  s.texData.isPacked ? n.setOutputPackedMatrixTexture(r.texture, i[0], i[1]) : n.setOutputMatrixTexture(r.texture, i[0], i[1]), n.setProgram(t.webGLProgram), V().getNumber("WEBGL_VERSION") === 1 && t.infLoc !== null && n.gl.uniform1f(t.infLoc, 1 / 0), t.nanLoc !== null && n.gl.uniform1f(t.nanLoc, NaN), e.forEach((l, c) => {
    const u = t.program.variableNames[c], d = t.uniformLocations[u], h = t.uniformLocations[`offset${u}`], p = t.inShapesLocations[`${u}Shape`], f = t.inTexShapesLocations[`${u}TexShape`];
    if (p) {
      const { uniformShape: m } = kg(t.program.packedInputs, l.shape, l.texData.texShape);
      switch (m.length) {
        case 1:
          n.gl.uniform1iv(p, new Int32Array(m));
          break;
        case 2:
          n.gl.uniform2iv(p, new Int32Array(m));
          break;
        case 3:
          n.gl.uniform3iv(p, new Int32Array(m));
          break;
        case 4:
          n.gl.uniform4iv(p, new Int32Array(m));
          break;
      }
    }
    if (f && n.gl.uniform2i(f, l.texData.texShape[0], l.texData.texShape[1]), d != null) {
      if (l.isUniform) {
        if (X(l.shape) < 2)
          n.gl.uniform1f(d, l.uniformValues[0]);
        else {
          let m = l.uniformValues;
          m instanceof Float32Array || (m = new Float32Array(m)), n.gl.uniform1fv(d, m);
        }
        return;
      }
      l.texData.slice != null && h != null && n.gl.uniform1i(h, l.texData.slice.flatOffset), n.setInputMatrixTexture(l.texData.texture.texture, d, c);
    }
  });
  const a = t.outShapeLocation;
  if (a)
    switch (s.shape.length) {
      case 1:
        n.gl.uniform1iv(a, new Int32Array(s.shape));
        break;
      case 2:
        n.gl.uniform2iv(a, new Int32Array(s.shape));
        break;
      case 3:
        n.gl.uniform3iv(a, new Int32Array(s.shape));
        break;
      case 4:
        n.gl.uniform4iv(a, new Int32Array(s.shape));
        break;
    }
  if (t.outShapeStridesLocation) {
    const l = dt(s.shape);
    switch (s.shape.length) {
      case 2:
        n.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        n.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        n.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
    }
  }
  t.outTexShapeLocation && n.gl.uniform2i(t.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), t.program.customUniforms && o && t.program.customUniforms.forEach((l, c) => {
    const u = t.customUniformLocations[c], d = o[c];
    if (l.type === "float")
      n.gl.uniform1fv(u, d);
    else if (l.type === "vec2")
      n.gl.uniform2fv(u, d);
    else if (l.type === "vec3")
      n.gl.uniform3fv(u, d);
    else if (l.type === "vec4")
      n.gl.uniform4fv(u, d);
    else if (l.type === "int")
      n.gl.uniform1iv(u, d);
    else if (l.type === "ivec2")
      n.gl.uniform2iv(u, d);
    else if (l.type === "ivec3")
      n.gl.uniform3iv(u, d);
    else if (l.type === "ivec4")
      n.gl.uniform4iv(u, d);
    else
      throw Error(`uniform type ${l.type} is not supported yet.`);
  }), n.executeProgram();
}
function NX(n, t, e) {
  let s = "";
  t.concat(e).forEach((i) => {
    const a = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0;
    if (n.enableShapeUniforms && !i.isUniform) {
      const l = i.texData.texShape, { useSqueezeShape: c, uniformShape: u, keptDims: d } = kg(n.packedInputs, i.shape, l);
      let h = "", p = "", f = "";
      if (u.length === 1 && n.packedInputs) {
        const I = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        h = `${I[0] > 1}_${I[1] > 1}`;
      } else if (u.length === 2 && !n.packedInputs)
        p = `${u[0] > 1}_${u[1] > 1}`;
      else if (u.length > 2 && !n.packedInputs) {
        const I = dt(u);
        f = `${I[0] === l[1]}_${I[I.length - 1] === l[1]}`;
      }
      const m = i.shape.length, g = u.length === 2 && $t(i.shape, l), b = X(i.shape) === 1, x = Yo(i.shape, e.shape), w = !n.packedInputs && m === e.shape.length && $t(l, e.texData.texShape), y = n.packedInputs || u.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      s += `${m}_${w}_${c ? d : ""}_${u.length}_${b}_${x}_${g}_${h}_${p}_${f}_${y}_${a}`;
    } else {
      const l = i.isUniform ? "uniform" : i.texData.texShape;
      s += `${i.shape}_${l}_${a}`;
    }
  });
  const o = n.userCode;
  let r = n.constructor.name;
  return r += "_" + s + "_" + o + `${V().getNumber("WEBGL_VERSION")}`, r;
}
function Ze(n) {
  return V().getBool("WEBGL_USE_SHAPES_UNIFORMS") && n <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RX {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = Qi.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = Pe();
    this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Cd(["r", "c", "d"], t) : fr(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $X {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = Qi.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = Pe();
    this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Cd(["r", "c", "d"], t) : fr(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EX {
  constructor(t) {
    this.variableNames = ["A"], this.outTexUsage = gn.DOWNLOAD;
    const e = Pe();
    this.outputShape = t, this.userCode = `
      ${J2}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class GX {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = gn.DOWNLOAD;
    const e = Pe();
    this.outputShape = t, this.userCode = `
      ${J2}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LX = {
  R: 0,
  G: 1,
  B: 2,
  A: 3
};
class B0 {
  constructor(t, e = !1, s = "RGBA") {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const o = Pe();
    this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length);
    let r = "result";
    e && (r = "floor(result * 255. + 0.5)");
    let i = "";
    for (let a = 0; a < s.length; a++) {
      const l = s[a];
      i += `
          if(offset == ${a}) {
            result = values[${LX[l]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? vg() : Cg(t)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${s.length});

        flatIndex = idiv(flatIndex, ${s.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${o.texture2D}(A, uv);
          ${i}
        }
        ${o.output} = vec4(${r}, 0., 0., 0.);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DX {
  constructor(t, e = !1) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = Pe();
    this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length);
    let o = "", r = "result";
    e && (r = "floor(result * 255. + 0.5)");
    for (let i = 0; i <= 1; i++)
      for (let a = 0; a <= 1; a++) {
        const l = i * 2 + a;
        o += `
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms ? "outShape[2]" : `${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms ? "outShape[1]" : `${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? vg() : Cg(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${o}

          ${s.output} = ${r};
        }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MX(n) {
  const t = Pe(), e = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return bO(n, e);
}
function zX(n) {
  const t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return CO(n, t);
}
function FX(n) {
  const t = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return vO(n, t);
}
function Tl(n, t, e, s, o, r) {
  SO(t, e);
  const i = kO(n), a = n.TEXTURE_2D;
  return ot(n, () => n.bindTexture(a, i)), ot(n, () => n.texParameteri(a, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)), ot(n, () => n.texParameteri(a, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)), ot(n, () => n.texParameteri(a, n.TEXTURE_MIN_FILTER, n.NEAREST)), ot(n, () => n.texParameteri(a, n.TEXTURE_MAG_FILTER, n.NEAREST)), V().getNumber("WEBGL_VERSION") === 1 ? ot(n, () => n.texImage2D(a, 0, s, t, e, 0, o, r, null)) : ot(n, () => n.texStorage2D(a, 1, s, t, e)), ot(n, () => n.bindTexture(n.TEXTURE_2D, null)), { texture: i, texShape: [e, t] };
}
function sC(n) {
  return n.internalFormatFloat;
}
function WX(n, t, e, s) {
  const [o, r] = kl(t, e);
  return Tl(n, o, r, sC(s), s.textureFormatFloat, n.FLOAT);
}
function oC(n) {
  return n.internalFormatHalfFloat;
}
function VX(n, t, e, s) {
  const [o, r] = kl(t, e);
  return Tl(n, o, r, oC(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function rC(n) {
  return n.downloadTextureFormat;
}
function _X(n, t, e, s) {
  const [o, r] = kl(t, e);
  return Tl(n, o, r, rC(s), n.RGBA, n.UNSIGNED_BYTE);
}
function iC(n) {
  return n.internalFormatPackedFloat;
}
function AX(n, t, e, s) {
  const [o, r] = ii(t, e);
  return Tl(n, o, r, iC(s), n.RGBA, n.FLOAT);
}
function aC(n) {
  return n.internalFormatPackedHalfFloat;
}
function OX(n, t, e, s) {
  const [o, r] = ii(t, e);
  return Tl(n, o, r, aC(s), n.RGBA, s.textureTypeHalfFloat);
}
function XX(n, t, e) {
  return ot(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), X0(n, t, "clipSpacePos", e, 3, 20, 0) && X0(n, t, "uv", e, 2, 20, 12);
}
function PX(n, t, e, s, o, r) {
  ot(n, () => n.bindTexture(n.TEXTURE_2D, t));
  let i, a, l;
  o instanceof Uint8Array ? (i = new Uint8Array(e * s * 4), a = n.UNSIGNED_BYTE, l = n.RGBA) : (i = new Float32Array(e * s * 4), a = n.FLOAT, l = r.internalFormatPackedFloat), i.set(o), V().getNumber("WEBGL_VERSION") === 2 ? ot(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e, s, n.RGBA, a, i)) : ot(n, () => n.texImage2D(n.TEXTURE_2D, 0, l, e, s, 0, n.RGBA, a, i)), ot(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function ZX(n, t, e) {
  ot(n, () => n.bindTexture(n.TEXTURE_2D, t)), e.data instanceof Uint8Array ? V().getNumber("WEBGL_VERSION") === 2 ? ot(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e.width, e.height, n.RGBA, n.UNSIGNED_BYTE, e.data)) : ot(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, e.width, e.height, 0, n.RGBA, n.UNSIGNED_BYTE, e.data)) : V().getNumber("WEBGL_VERSION") === 2 ? ot(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, n.RGBA, n.UNSIGNED_BYTE, e)) : ot(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, e)), ot(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function KX(n, t, e, s) {
  const o = n.createBuffer();
  ot(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, o));
  const a = 4 * 4 * t * e;
  return ot(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, a, n.STREAM_READ)), ot(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, 0)), ot(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)), o;
}
function BX(n, t, e) {
  const s = n, o = new Float32Array(e);
  return s.bindBuffer(s.PIXEL_PACK_BUFFER, t), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, o), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), o;
}
function HX(n, t, e, s) {
  const [o, r] = kl(t, e), i = 4, a = new Uint8Array(uO(t * e, i));
  return ot(n, () => n.readPixels(0, 0, o, r, s.downloadTextureFormat, n.UNSIGNED_BYTE, a)), new Float32Array(a.buffer);
}
function UX(n, t, e, s, o, r, i, a) {
  const l = n, c = new Float32Array(dO(r, i));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, t), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), c;
}
function YX(n, t, e) {
  const s = new Float32Array(t * e * 4);
  return ot(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, s)), s;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Ud {
  constructor(t) {
    this.outputTexture = null, this.program = null, this.disposed = !1, this.itemsToPoll = [];
    const e = V().getNumber("WEBGL_VERSION");
    if (t != null ? (this.gl = t, aO(e, t)) : this.gl = es(e), t = this.gl, V().getNumber("WEBGL_VERSION") === 2) {
      const r = t;
      this.createVertexArray = () => ot(r, () => r.createVertexArray()), this.bindVertexArray = (i) => ot(r, () => r.bindVertexArray(i)), this.deleteVertexArray = (i) => ot(r, () => r.deleteVertexArray(i)), this.getVertexArray = () => ot(r, () => r.getParameter(r.VERTEX_ARRAY_BINDING));
    } else if (t != null) {
      const r = t.getExtension("OES_vertex_array_object");
      if (r == null)
        throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
      this.createVertexArray = () => ot(t, () => r.createVertexArrayOES()), this.bindVertexArray = (i) => ot(t, () => r.bindVertexArrayOES(i)), this.deleteVertexArray = (i) => ot(t, () => r.deleteVertexArrayOES(i)), this.getVertexArray = () => ot(t, () => t.getParameter(r.VERTEX_ARRAY_BINDING_OES));
    }
    let s = "WEBGL_color_buffer_float";
    const o = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), V().getNumber("WEBGL_VERSION") === 1) {
      const r = "OES_texture_float", i = "OES_texture_half_float";
      if (this.textureFloatExtension = Pl(this.gl, r), Dn(this.gl, i))
        this.textureHalfFloatExtension = Pl(this.gl, i);
      else if (V().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(s), Dn(this.gl, o))
        this.colorBufferHalfFloatExtension = Pl(this.gl, o);
      else if (V().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (s = "EXT_color_buffer_float", Dn(this.gl, s))
      this.colorBufferFloatExtension = this.gl.getExtension(s);
    else if (Dn(this.gl, o))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(o);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = zX(this.gl), this.indexBuffer = FX(this.gl), this.framebuffer = TO(this.gl), this.textureConfig = Ig(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return V().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const t = this.gl;
    ot(t, () => t.finish()), ot(t, () => t.bindFramebuffer(t.FRAMEBUFFER, null)), ot(t, () => t.deleteFramebuffer(this.framebuffer)), ot(t, () => t.bindBuffer(t.ARRAY_BUFFER, null)), ot(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null)), ot(t, () => t.deleteBuffer(this.indexBuffer)), this.disposed = !0;
  }
  createFloat32MatrixTexture(t, e) {
    return this.throwIfDisposed(), WX(this.gl, t, e, this.textureConfig);
  }
  createFloat16MatrixTexture(t, e) {
    return this.throwIfDisposed(), VX(this.gl, t, e, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(t, e) {
    return this.throwIfDisposed(), _X(this.gl, t, e, this.textureConfig);
  }
  uploadPixelDataToTexture(t, e) {
    this.throwIfDisposed(), ZX(this.gl, t, e);
  }
  uploadDenseMatrixToTexture(t, e, s, o) {
    this.throwIfDisposed(), PX(this.gl, t, e, s, o, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), OX(this.gl, t, e, this.textureConfig);
  }
  createPackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), AX(this.gl, t, e, this.textureConfig);
  }
  deleteMatrixTexture(t) {
    this.throwIfDisposed(), this.outputTexture === t && (P0(this.gl, this.framebuffer), this.outputTexture = null), ot(this.gl, () => this.gl.deleteTexture(t));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => HX(this.gl, e, s, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(t, e, s, o, r, i) {
    return UX(this.gl, t, e, s, o, r, i, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(t, e) {
    return BX(this.gl, t, e);
  }
  createBufferFromTexture(t, e, s) {
    this.bindTextureToFrameBuffer(t);
    const o = KX(this.gl, e, s, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), o;
  }
  createAndWaitForFence() {
    const t = this.createFence(this.gl);
    return this.pollFence(t);
  }
  createFence(t) {
    let e, s;
    if (V().getBool("WEBGL_FENCE_API_ENABLED")) {
      const o = t, r = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);
      t.flush(), s = () => {
        const i = o.clientWaitSync(r, 0, 0);
        return i === o.ALREADY_SIGNALED || i === o.CONDITION_SATISFIED;
      }, e = r;
    } else
      V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e = this.beginQuery(), this.endQuery(), s = () => this.isQueryAvailable(e, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : s = () => !0;
    return { query: e, isFencePassed: s };
  }
  downloadMatrixFromPackedTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => YX(this.gl, e, s));
  }
  createProgram(t) {
    this.throwIfDisposed();
    const e = this.gl;
    this.vertexShader == null && (this.vertexShader = MX(e));
    const s = wO(e);
    ot(e, () => e.attachShader(s, this.vertexShader)), ot(e, () => e.attachShader(s, t)), IO(e, s);
    let o;
    return o = Object.assign(s, {
      vao: this.createVertexArray()
    }), this.bindVertexArray(o.vao), ot(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), console.assert(XX(e, o, this.vertexBuffer), "gpgpu_util.bindVertexProgramAttributeStreams not fully successful."), this.debug && Zd(e, o), this.setProgram(o), o;
  }
  deleteProgram(t) {
    this.throwIfDisposed(), t === this.program && (this.program = null), t != null && (ot(this.gl, () => this.gl.deleteProgram(t)), this.deleteVertexArray(t.vao));
  }
  setProgram(t) {
    this.throwIfDisposed(), this.program = t, this.program != null && (this.bindVertexArray(this.program.vao), this.debug && Zd(this.gl, this.program)), ot(this.gl, () => this.gl.useProgram(t));
  }
  getUniformLocation(t, e, s = !0) {
    return this.throwIfDisposed(), s ? RO(this.gl, t, e) : $O(this.gl, t, e);
  }
  getAttributeLocation(t, e) {
    return this.throwIfDisposed(), ot(this.gl, () => this.gl.getAttribLocation(t, e));
  }
  getUniformLocationNoThrow(t, e) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
  }
  setInputMatrixTexture(t, e, s) {
    this.throwIfDisposed(), this.throwIfNoProgram(), EO(this.gl, t, e, s);
  }
  setOutputMatrixTexture(t, e, s) {
    this.setOutputMatrixTextureDriver(t, s, e);
  }
  setOutputPackedMatrixTexture(t, e, s) {
    this.throwIfDisposed();
    const [o, r] = ii(e, s);
    this.setOutputMatrixTextureDriver(t, o, r);
  }
  setOutputMatrixWriteRegion(t, e, s, o) {
    this.setOutputMatrixWriteRegionDriver(s, t, o, e);
  }
  setOutputPackedMatrixWriteRegion(t, e, s, o) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && Zd(this.gl, this.program), Zl(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const t = this.gl;
    if (this.debug) {
      const e = this.getVertexArray();
      console.assert(e === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
    }
    ot(t, () => t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), ot(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Pl(this.gl, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const s = this.gl, o = this.getQueryTimerExtensionWebGL2(), r = s.createQuery();
      return s.beginQuery(o.TIME_ELAPSED_EXT, r), r;
    }
    const t = this.getQueryTimerExtensionWebGL1(), e = t.createQueryEXT();
    return t.beginQueryEXT(t.TIME_ELAPSED_EXT, e), e;
  }
  endQuery() {
    if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const e = this.gl, s = this.getQueryTimerExtensionWebGL2();
      e.endQuery(s.TIME_ELAPSED_EXT);
      return;
    }
    const t = this.getQueryTimerExtensionWebGL1();
    t.endQueryEXT(t.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(t) {
    return await Rh(() => this.disposed || // while testing contexts are created / disposed
    // in rapid succession, so without this check we
    // may poll for the query timer indefinitely
    this.isQueryAvailable(t, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(t, V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(t, e) {
    if (e === 0)
      return null;
    if (e === 2) {
      const s = this.gl;
      return s.getQueryParameter(t, s.QUERY_RESULT) / 1e6;
    } else {
      const s = this.getQueryTimerExtensionWebGL1();
      return s.getQueryObjectEXT(t, s.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(t, e) {
    if (e === 0)
      return !0;
    if (e === 2) {
      const s = this.gl, o = this.getQueryTimerExtensionWebGL2(), r = s.getQueryParameter(t, s.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(o.GPU_DISJOINT_EXT)), r && !this.disjoint;
    } else {
      const s = this.getQueryTimerExtensionWebGL1(), o = s.getQueryObjectEXT(t, s.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), o && !this.disjoint;
    }
  }
  pollFence(t) {
    return new Promise((e) => {
      this.addItemToPoll(() => t.isFencePassed(), () => e());
    });
  }
  pollItems() {
    const t = QX(this.itemsToPoll.map((e) => e.isDoneFn));
    for (let e = 0; e <= t; ++e) {
      const { resolveFn: s } = this.itemsToPoll[e];
      s();
    }
    this.itemsToPoll = this.itemsToPoll.slice(t + 1);
  }
  addItemToPoll(t, e) {
    if (this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }), this.itemsToPoll.length > 1)
      return;
    let s;
    "setTimeoutCustom" in V().platform && (s = V().platform.setTimeoutCustom.bind(V().platform)), Rh(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, s);
  }
  bindTextureToFrameBuffer(t) {
    this.throwIfDisposed(), Kd(this.gl, t, this.framebuffer), this.debug && Zl(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Kd(this.gl, this.outputTexture, this.framebuffer), this.debug && Zl(this.gl)) : P0(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(t, e) {
    this.bindTextureToFrameBuffer(t);
    const s = e();
    return this.unbindTextureToFrameBuffer(), s;
  }
  setOutputMatrixTextureDriver(t, e, s) {
    this.throwIfDisposed();
    const o = this.gl;
    Kd(o, t, this.framebuffer), this.debug && Zl(o), this.outputTexture = t, ot(o, () => o.viewport(0, 0, e, s)), ot(o, () => o.scissor(0, 0, e, s));
  }
  setOutputMatrixWriteRegionDriver(t, e, s, o) {
    this.throwIfDisposed(), ot(this.gl, () => this.gl.scissor(t, e, s, o));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
}
function QX(n) {
  let t = 0;
  for (; t < n.length && n[t](); ++t)
    ;
  return t - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { addImpl: jX, bincountImpl: lC, bincountReduceImpl: JX, castImpl: qX, ceilImpl: tP, concatImpl: eP, equalImpl: nP, expImpl: sP, expm1Impl: oP, floorImpl: rP, gatherNdImpl: iP, gatherV2Impl: aP, greaterImpl: lP, greaterEqualImpl: cP, lessImpl: uP, lessEqualImpl: dP, linSpaceImpl: hP, logImpl: pP, maxImpl: fP, maximumImpl: mP, minimumImpl: gP, multiplyImpl: bP, negImpl: xP, notEqualImpl: yP, prodImpl: wP, raggedGatherImpl: IP, raggedRangeImpl: CP, raggedTensorToTensorImpl: vP, rangeImpl: kP, rsqrtImpl: SP, scatterImpl: TP, sigmoidImpl: NP, simpleAbsImpl: cC, sliceImpl: RP, sparseFillEmptyRowsImpl: $P, sparseReshapeImpl: EP, sparseSegmentReductionImpl: uC, sqrtImpl: GP, stridedSliceImpl: LP, stringNGramsImpl: DP, stringSplitImpl: MP, stringToHashBucketFastImpl: zP, subImpl: FP, tileImpl: WP, topKImpl: VP, transposeImpl: Sg, uniqueImpl: _P } = Kz;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dC(n, t) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, t).map((e) => `${n}.${e}`);
}
function _e(n, t) {
  return t === 1 ? [n] : dC(n, t);
}
function AP(n, t) {
  if (n === 1)
    return "rc";
  let e = "";
  for (let s = 0; s < n; s++)
    e += t[s], s < n - 1 && (e += ",");
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OP {
  constructor(t) {
    if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.enableShapeUniforms = Ze(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const e = _e("rc", this.rank), s = Kt(this.rank), o = this.getOutOfBoundsCondition(e), r = this.getSetup(e), i = this.getOutput(e);
      this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${o}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${i}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(t) {
    const e = [];
    for (let s = 0; s <= 1; s++)
      for (let o = 0; o <= 1; o++) {
        let r = `${s === 0 ? "r" : "rp1"}, ${o === 0 ? "c" : "cp1"}`;
        for (let i = 2; i < this.rank; i++)
          r = `${t[t.length - 1 - i]},` + r;
        e.push(r);
      }
    return e;
  }
  getOutOfBoundsCondition(t) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let e = "";
    for (let s = this.rank - 2; s < this.rank; s++)
      e += `${t[s]} >= ${this.enableShapeUniforms ? `outShape[${s}]` : this.outputShape[s]}`, s < this.rank - 1 && (e += "||");
    return e;
  }
  getSetup(t) {
    if (this.rank === 1)
      return "";
    const e = t.slice(-2), s = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], o = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${o};
    `;
  }
  getOutput(t) {
    const e = this.getSourceCoordsArr(t);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hC {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length);
    let s = "";
    for (let o = 0; o < 4; o++) {
      let r = "thisRC = rc;";
      o % 2 === 1 && (r += "thisRC.z += 1;"), o > 1 && (r += "thisRC.y += 1;"), s += `
        ${r}
        ${o > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${o}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${o > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${XP(e, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? vg() : Cg(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : t[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : t[2]};

        ${s}

        setOutput(result);
      }
    `;
  }
}
function XP(n, t) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? XO(["r", "c", "d"], "inputShape") : fr(["r", "c", "d"], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PP {
  constructor(t) {
    this.gpgpu = t, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};
  }
  acquireTexture(t, e, s) {
    const o = U0(e, s), r = Y0(t, o, s);
    r in this.freeTextures || (this.freeTextures[r] = []), r in this.usedTextures || (this.usedTextures[r] = []);
    const i = H0(t, o, this.gpgpu.gl, this.gpgpu.textureConfig, s);
    if (this.freeTextures[r].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= i, this.log();
      const l = this.freeTextures[r].shift();
      return this.usedTextures[r].push(l), l;
    }
    let a;
    return o === Ne.PACKED_2X2_FLOAT32 ? a = this.gpgpu.createPackedMatrixTexture(t[0], t[1]) : o === Ne.PACKED_2X2_FLOAT16 ? a = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]) : o === Ne.UNPACKED_FLOAT32 ? a = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]) : o === Ne.UNPACKED_FLOAT16 ? a = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]) : o === Ne.PACKED_4X1_UNSIGNED_BYTE && (a = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])), this.usedTextures[r].push(a), this.numUsedTextures++, this._numBytesAllocated += i, this.log(), a;
  }
  releaseTexture(t, e, s, o) {
    if (this.freeTextures == null)
      return;
    const r = U0(s, o), i = Y0(e, r, o);
    i in this.freeTextures || (this.freeTextures[i] = []);
    const a = H0(e, r, this.gpgpu.gl, this.gpgpu.textureConfig, o), l = V().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(t.texture), this._numBytesAllocated -= a) : (this.freeTextures[i].push(t), this.numFreeTextures++, this._numBytesFree += a), this.numUsedTextures--;
    const c = this.usedTextures[i], u = c.indexOf(t);
    if (u < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    c.splice(u, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    const t = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${t})`);
    const e = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * e)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const t in this.freeTextures)
        this.freeTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      for (const t in this.usedTextures)
        this.usedTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
}
function ZP(n, t) {
  const e = n;
  if (t === e.R32F)
    return 4;
  if (t === e.R16F)
    return 2;
  if (t === e.RGBA32F)
    return 16;
  if (t === n.RGBA)
    return 16;
  if (t === e.RGBA16F)
    return 8;
  if (t === e.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${t}`);
}
function H0(n, t, e, s, o) {
  const r = KP(t, s);
  let i;
  if (o) {
    const [l, c] = ii(n[0], n[1]);
    i = l * c;
  } else {
    const [l, c] = kl(n[0], n[1]);
    i = l * c;
  }
  const a = ZP(e, r);
  return i * a;
}
function KP(n, t) {
  switch (n) {
    case Ne.PACKED_2X2_FLOAT32:
      return iC(t);
    case Ne.PACKED_2X2_FLOAT16:
      return aC(t);
    case Ne.UNPACKED_FLOAT32:
      return sC(t);
    case Ne.UNPACKED_FLOAT16:
      return oC(t);
    case Ne.PACKED_4X1_UNSIGNED_BYTE:
      return rC(t);
    default:
      throw new Error(`Unknown physical texture type ${n}`);
  }
}
function BP(n) {
  return V().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? n ? Ne.PACKED_2X2_FLOAT32 : Ne.UNPACKED_FLOAT32 : n ? Ne.PACKED_2X2_FLOAT16 : Ne.UNPACKED_FLOAT16;
}
function U0(n, t) {
  if (n === gn.UPLOAD)
    return Ne.PACKED_2X2_FLOAT32;
  if (n === gn.RENDER || n == null)
    return BP(t);
  if (n === gn.DOWNLOAD || n === gn.PIXELS)
    return Ne.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${n}`);
}
function Y0(n, t, e) {
  return `${n[0]}_${n[1]}_${t}_${e}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hs {
  constructor(t, e) {
    this.variableNames = ["A"], this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const Xn = "if (isnan(x)) return x;", HP = "return x;", Q0 = "return abs(x);", UP = "return (x >= 0.0) ? x : (exp(x) - 1.0);", YP = Xn + `
  return (x < 0.0) ? 0.0 : x;
`, QP = Xn + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, Ks = "return x;", jP = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JP = "return x;", qP = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, tZ = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, eZ = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, nZ = "return 1.0 / (1.0 + exp(-1.0 * x));";
class js {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sZ {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length);
    const e = t.length, s = _e("rc", e), o = Kt(e), r = AP(e, s), i = s.slice(-2), a = e <= 1 ? "rc" : `vec2(${i.join(",")})`;
    this.userCode = `
      void main() {
        ${o} rc = getOutputCoords();
        vec4 packedInput = getA(${r});

        setOutput(getChannel(packedInput, ${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oZ = $1, rZ = 1e-7, iZ = 1e-4, Hl = {};
function aZ(n) {
  return n in Hl || (Hl[n] = {}), Hl[n];
}
const lZ = V().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), cZ = 600;
function uZ() {
  return V().global.screen == null ? 1024 : V().global.screen.height * V().global.screen.width * window.devicePixelRatio * cZ / 1024 / 1024;
}
class vd extends Ep {
  constructor(t) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !V().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let e;
    if (t != null) {
      if (t instanceof Ud)
        e = t;
      else {
        const s = es(V().getNumber("WEBGL_VERSION"), t);
        e = new Ud(s);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = !1;
    } else {
      const s = es(V().getNumber("WEBGL_VERSION"));
      e = new Ud(s), this.binaryCache = aZ(V().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = !0;
    }
    this.gpgpu = e, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new PP(this.gpgpu), this.numMBBeforeWarning = uZ(), this.texData = new dx(this, Ot());
  }
  nextDataId() {
    return vd.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  // Writes a new entry to the data store with a WebGL texture, and registers it
  // to the texture manager.
  writeTexture(t, e, s, o, r, i) {
    const a = this.makeTensorInfo(e, s), l = this.texData.get(a.dataId);
    l.isPacked = !1, l.texture = { texture: t, texShape: [o, r] }, l.texShape = [o, r];
    const c = Kl(e), u = new B0(c, !1, i), d = this.runWebGLProgram(u, [a], s, [[o, r]]);
    return d.shape = e, l.texture = null, this.disposeIntermediateTensorInfo(a), d.dataId;
  }
  write(t, e, s) {
    if ((V().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || V().getBool("DEBUG")) && this.checkNumericalProblems(t), s === "complex64" && t != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const o = { id: this.nextDataId() };
    return this.texData.set(o, { shape: e, dtype: s, values: t, usage: gn.UPLOAD, refCount: 1 }), o;
  }
  /** Return refCount of a `TensorData`. */
  refCount(t) {
    return this.texData.has(t) ? this.texData.get(t).refCount : 0;
  }
  /** Increase refCount of a `TextureData`. */
  incRef(t) {
    const e = this.texData.get(t);
    e.refCount++;
  }
  /** Decrease refCount of a `TextureData`. */
  decRef(t) {
    if (this.texData.has(t)) {
      const e = this.texData.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, o, r) {
    if (V().getBool("DEBUG") && this.checkNumericalProblems(e), o === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(t, { shape: s, dtype: o, values: e, usage: gn.UPLOAD, refCount: r });
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  readSync(t) {
    const e = this.texData.get(t), { values: s, dtype: o, complexTensorInfos: r, slice: i, shape: a, isPacked: l } = e;
    if (i != null) {
      let h;
      l ? h = new js(a, Ks) : h = new hs(a, Ks);
      const p = this.runWebGLProgram(h, [{ dataId: t, shape: a, dtype: o }], o), f = this.readSync(p.dataId);
      return this.disposeIntermediateTensorInfo(p), f;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (o === "string")
      return s;
    const c = this.activeTimers != null;
    let u;
    c && (u = Te());
    let d;
    if (o === "complex64") {
      const h = this.readSync(r.real.dataId), p = this.readSync(r.imag.dataId);
      d = Ds(h, p);
    } else
      d = this.getValuesFromTexture(t);
    return c && (this.downloadWaitMs += Te() - u), this.convertAndCacheOnCPU(t, d);
  }
  async read(t) {
    if (this.pendingRead.has(t)) {
      const f = this.pendingRead.get(t);
      return new Promise((m) => f.push(m));
    }
    const e = this.texData.get(t), { values: s, shape: o, slice: r, dtype: i, complexTensorInfos: a, isPacked: l } = e;
    if (r != null) {
      let f;
      l ? f = new js(o, Ks) : f = new hs(o, Ks);
      const m = this.runWebGLProgram(f, [{ dataId: t, shape: o, dtype: i }], i), g = this.read(m.dataId);
      return this.disposeIntermediateTensorInfo(m), g;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (V().getBool("DEBUG") && !V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && V().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let c = null, u;
    if (i !== "complex64" && V().get("WEBGL_BUFFER_SUPPORTED")) {
      u = this.decode(t);
      const f = this.texData.get(u.dataId);
      c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...Xl(o));
    }
    this.pendingRead.set(t, []), i !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let d;
    if (i === "complex64") {
      const f = await Promise.all([
        this.read(a.real.dataId),
        this.read(a.imag.dataId)
      ]), m = f[0], g = f[1];
      d = Ds(m, g);
    } else if (c == null)
      d = this.getValuesFromTexture(t);
    else {
      const f = X(o);
      d = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
    }
    if (u != null && this.disposeIntermediateTensorInfo(u), c != null) {
      const f = this.gpgpu.gl;
      ot(f, () => f.deleteBuffer(c));
    }
    const h = this.convertAndCacheOnCPU(t, d), p = this.pendingRead.get(t);
    return this.pendingRead.delete(t), p.forEach((f) => f(h)), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t) && Ot().removeDataId(t, this), this.pendingDeletes--), h;
  }
  /**
   * Read tensor to a new texture that is densely packed for ease of use.
   * @param dataId The source tensor.
   * @param options
   *     customTexShape: Optional. If set, will use the user defined texture
   *     shape to create the texture.
   */
  readToGPU(t, e = {}) {
    const s = this.texData.get(t), { values: o, shape: r, slice: i, dtype: a, isPacked: l, texture: c } = s;
    if (a === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (i != null) {
      let p;
      l ? p = new js(r, Ks) : p = new hs(r, Ks);
      const f = this.runWebGLProgram(p, [{ dataId: t, shape: r, dtype: a }], a), m = this.readToGPU(f, e);
      return this.disposeIntermediateTensorInfo(f), m;
    }
    if (c == null)
      throw o != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const u = this.decode(t, e.customTexShape), d = Ot().makeTensorFromTensorInfo(u), h = this.texData.get(u.dataId);
    return Object.assign({ tensorRef: d }, h.texture);
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((o) => Gs(o));
        return vt(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return vt(t.shape, t.dtype, e);
  }
  checkNumericalProblems(t) {
    if (t != null)
      for (let e = 0; e < t.length; e++) {
        const s = t[e];
        if (!mO(s))
          throw V().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${s} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(t) {
    const { shape: e, dtype: s, isPacked: o } = this.texData.get(t), r = X(e);
    if (V().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const h = this.decode(t), p = this.texData.get(h.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(p.texture.texture, ...Xl(e)).subarray(0, r);
      return this.disposeIntermediateTensorInfo(h), f;
    }
    const i = V().getBool("WEBGL_PACK") && o === !0, a = i ? Kl(e) : e, l = i ? new GX(a) : new EX(a), c = this.runWebGLProgram(l, [{ shape: a, dtype: s, dataId: t }], "float32"), u = this.texData.get(c.dataId), d = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture, u.texShape[0], u.texShape[1]).subarray(0, r);
    return this.disposeIntermediateTensorInfo(c), d;
  }
  timerAvailable() {
    return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(t) {
    const e = this.activeTimers, s = [];
    let o = !1;
    this.programTimersStack == null ? (this.programTimersStack = s, o = !0) : this.activeTimers.push(s), this.activeTimers = s, t();
    const r = ao(this.activeTimers.map((l) => l.query)).filter((l) => l != null), i = ao(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = e, o && (this.programTimersStack = null);
    const a = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null
      // will be filled by the engine
    };
    return (async () => {
      if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const l = await Promise.all(r);
        a.kernelMs = hx(l), a.getExtraProfileInfo = () => l.map((c, u) => ({ name: i[u], ms: c })).map((c) => `${c.name}: ${c.ms}`).join(", ");
      } else
        a.kernelMs = {
          error: "WebGL query timers are not supported in this environment."
        };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, a;
    })();
  }
  memory() {
    return {
      unreliable: !1,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }
  startTimer() {
    return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: Te(), endMs: null };
  }
  endTimer(t) {
    return V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = Te(), t);
  }
  async getQueryTime(t) {
    if (V().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(t);
    const e = t;
    return e.endMs - e.startMs;
  }
  /**
   * Decrease the RefCount on the dataId and dispose the memory if the dataId
   * has 0 refCount. If there are pending read on the data, the disposal would
   * added to the pending delete queue. Return true if the dataId is removed
   * from backend or the backend does not contain the dataId, false if the
   * dataId is not removed. Memory may or may not be released even when dataId
   * is removed, which also depends on dataRefCount, see `releaseGPU`.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(t, e = !1) {
    if (this.pendingDisposal.has(t))
      return !1;
    if (!this.texData.has(t))
      return !0;
    if (e ? this.texData.get(t).refCount = 0 : this.texData.get(t).refCount--, !e && this.texData.get(t).refCount > 0)
      return !1;
    if (this.pendingRead.has(t))
      return this.pendingDisposal.add(t), this.pendingDeletes++, !1;
    this.releaseGPUData(t);
    const { complexTensorInfos: s } = this.texData.get(t);
    return s != null && (this.disposeData(s.real.dataId, e), this.disposeData(s.imag.dataId, e)), this.texData.delete(t), !0;
  }
  releaseGPUData(t) {
    const { texture: e, dtype: s, texShape: o, usage: r, isPacked: i, slice: a } = this.texData.get(t), l = a && a.origDataId || t, c = this.dataRefCount.get(l);
    c > 1 ? this.dataRefCount.set(l, c - 1) : (this.dataRefCount.delete(l), e != null && (this.numBytesInGPU -= this.computeBytes(o, s), this.textureManager.releaseTexture(e, o, r, i)));
    const u = this.texData.get(t);
    u.texture = null, u.texShape = null, u.isPacked = !1, u.slice = null;
  }
  getTexture(t) {
    return this.uploadToGPU(t), this.texData.get(t).texture.texture;
  }
  /**
   * Returns internal information for the specific data bucket. Used in unit
   * tests.
   */
  getDataInfo(t) {
    return this.texData.get(t);
  }
  /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */
  shouldExecuteOnCPU(t, e = lZ) {
    return V().getBool("WEBGL_CPU_FORWARD") && t.every((s) => this.texData.get(s.dataId).texture == null && X(s.shape) < e);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(t) {
    fn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const e = t.dataSync();
    return oZ(t.shape, e);
  }
  packedUnaryOp(t, e, s) {
    const o = new js(t.shape, e), r = this.compileAndRun(o, [t], s);
    return Ot().makeTensorFromTensorInfo(r);
  }
  // TODO(msoulanille) remove this once the backend has been modularized
  // a copy is needed here to break a circular dependency.
  // Also remove the op from unary_op.
  abs(t) {
    if (this.shouldExecuteOnCPU([t]) && t.dtype !== "complex64") {
      const o = cC(this.texData.get(t.dataId).values);
      return this.makeOutput(t.shape, t.dtype, o);
    }
    if (V().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(t, Q0, t.dtype);
    const e = new hs(t.shape, Q0), s = this.compileAndRun(e, [t]);
    return Ot().makeTensorFromTensorInfo(s);
  }
  makeTensorInfo(t, e, s) {
    let o;
    if (e === "string" && s != null && s.length > 0 && Qr(s[0])) {
      const r = s.map((i) => Es(i));
      o = this.write(r, t, e);
    } else
      o = this.write(s, t, e);
    return this.texData.get(o).usage = null, { dataId: o, shape: t, dtype: e };
  }
  makeOutput(t, e, s) {
    return Ot().makeTensorFromTensorInfo(this.makeTensorInfo(t, e, s), this);
  }
  unpackTensor(t) {
    const e = new sZ(t.shape);
    return this.runWebGLProgram(e, [t], t.dtype);
  }
  packTensor(t) {
    const e = new OP(t.shape), s = !0;
    return this.runWebGLProgram(e, [t], t.dtype, null, s);
  }
  packedReshape(t, e) {
    const s = [
      Zr(t.shape),
      ...Kr(t.shape)
    ], o = {
      dtype: t.dtype,
      shape: s,
      dataId: t.dataId
    }, r = [
      Zr(e),
      ...Kr(e)
    ], i = new hC(r, s), a = !0, l = [s], c = this.runWebGLProgram(i, [o], t.dtype, l, a);
    return { dataId: c.dataId, shape: e, dtype: c.dtype };
  }
  decode(t, e) {
    const s = this.texData.get(t), { isPacked: o, shape: r, dtype: i } = s;
    if (e != null) {
      const h = X(r), p = e[0] * e[1] * 4;
      k(h <= p, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    const a = Kl(r);
    let l;
    o ? l = new $X(a) : l = new RX(a);
    const c = !0, u = [e ?? Xl(a)], d = this.runWebGLProgram(l, [{ shape: a, dtype: i, dataId: t }], i, u, c, e);
    return { dtype: i, shape: r, dataId: d.dataId };
  }
  runWebGLProgram(t, e, s, o, r = !1, i) {
    const a = this.makeTensorInfo(t.outputShape, s), l = this.texData.get(a.dataId);
    if (t.packedOutput && (l.isPacked = !0), t.outPackingScheme === Qi.DENSE) {
      const b = i ?? Xl(t.outputShape);
      l.texShape = b.map((x) => x * 2);
    }
    if (t.outTexUsage != null && (l.usage = t.outTexUsage), X(a.shape) === 0)
      return l.values = Ie(a.dtype, 0), a;
    const c = [], u = e.map((b) => {
      if (b.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let x = this.texData.get(b.dataId);
      if (x.texture == null) {
        if (!t.packedInputs && X(b.shape) <= V().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return {
            shape: b.shape,
            texData: null,
            isUniform: !0,
            uniformValues: x.values
          };
        t.packedInputs && (x.isPacked = !0, x.shape = b.shape);
      }
      if (this.uploadToGPU(b.dataId), !!x.isPacked != !!t.packedInputs)
        b = x.isPacked ? this.unpackTensor(b) : this.packTensor(b), c.push(b), x = this.texData.get(b.dataId);
      else if (x.isPacked && !Wc(x.shape, b.shape)) {
        const w = b, y = b.shape;
        b.shape = x.shape, b = this.packedReshape(b, y), c.push(b), x = this.texData.get(b.dataId), w.shape = y;
      }
      return { shape: b.shape, texData: x, isUniform: !1 };
    });
    this.uploadToGPU(a.dataId);
    const d = { shape: a.shape, texData: l, isUniform: !1 }, h = NX(t, u, d), p = this.getAndSaveBinary(h, () => SX(this.gpgpu, t, u, d)), f = this.activeTimers != null;
    let m;
    f && (m = this.startTimer()), V().get("ENGINE_COMPILE_ONLY") || TX(this.gpgpu, p, u, d, o), c.forEach((b) => this.disposeIntermediateTensorInfo(b)), f && (m = this.endTimer(m), this.activeTimers.push({ name: t.constructor.name, query: this.getQueryTime(m) }));
    const g = V().get("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      const b = Te();
      b - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = b);
    }
    if (!V().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && r === !1) {
      const b = this.unpackTensor(a);
      return this.disposeIntermediateTensorInfo(a), b;
    }
    return a;
  }
  compileAndRun(t, e, s, o, r = !1) {
    return s = s || e[0].dtype, this.runWebGLProgram(t, e, s, o, r);
  }
  getAndSaveBinary(t, e) {
    return t in this.binaryCache || (this.binaryCache[t] = e()), this.binaryCache[t];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (V().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((e) => {
      this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram), delete this.binaryCache[e];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = z(() => {
      if (!V().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const t = V().getBool("DEBUG");
        V().set("DEBUG", !1);
        const e = this.abs(gt(1e-8)).dataSync()[0];
        if (V().set("DEBUG", t), e > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? rZ : iZ;
  }
  uploadToGPU(t) {
    const e = this.texData.get(t), { shape: s, dtype: o, values: r, texture: i, usage: a, isPacked: l } = e;
    if (i != null)
      return;
    const c = this.activeTimers != null;
    let u;
    c && (u = Te());
    let d = e.texShape;
    if (d == null && (d = DO(s, l), e.texShape = d), r != null) {
      const h = Kl(s);
      let p, f = d[1], m = d[0];
      const g = r instanceof Uint8Array || r instanceof Uint8ClampedArray;
      (l || !g) && ([f, m] = ii(d[0], d[1])), l ? p = new DX(h, g) : p = new B0(h, g);
      const b = g ? [m, f] : d, x = this.makeTensorInfo(b, o), w = this.texData.get(x.dataId);
      g ? w.usage = gn.PIXELS : w.usage = gn.UPLOAD, w.texShape = b, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(x.dataId), f, m, r);
      const y = [[m, f]], I = !0, C = this.runWebGLProgram(p, [x], o, y, I), v = this.texData.get(C.dataId);
      e.texShape = v.texShape, e.isPacked = v.isPacked, e.usage = v.usage, V().get("ENGINE_COMPILE_ONLY") ? this.disposeData(C.dataId) : (e.texture = v.texture, e.values = null, this.texData.delete(C.dataId)), this.disposeIntermediateTensorInfo(x), c && (this.uploadWaitMs += Te() - u);
    } else {
      const h = this.acquireTexture(d, a, o, l);
      e.texture = h;
    }
  }
  convertAndCacheOnCPU(t, e) {
    const s = this.texData.get(t), { dtype: o } = s;
    return e != null && (s.values = dZ(e, o)), s.values;
  }
  acquireTexture(t, e, s, o) {
    if (this.numBytesInGPU += this.computeBytes(t, s), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const r = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${r} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(t, e, o);
  }
  computeBytes(t, e) {
    return t[0] * t[1] * Vi(e);
  }
  checkCompileCompletion() {
    for (const [, t] of Object.entries(this.binaryCache))
      this.checkCompletion_(t);
  }
  async checkCompileCompletionAsync() {
    const t = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, e] of Object.entries(this.binaryCache))
        t.push(this.checkCompletionAsync_(e));
      return Promise.all(t);
    } else {
      for (const [, e] of Object.entries(this.binaryCache)) {
        const s = new Promise((o) => {
          try {
            this.checkCompletion_(e), o(!0);
          } catch (r) {
            throw r;
          }
        });
        t.push(s);
      }
      return Promise.all(t);
    }
  }
  async checkCompletionAsync_(t) {
    return this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(t) : (await od(), this.checkCompletionAsync_(t));
  }
  checkCompletion_(t) {
    if (this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)), this.gpgpu.gl.getShaderParameter(t.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (j2(t.source, this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return !0;
  }
  getUniformLocations() {
    for (const [, t] of Object.entries(this.binaryCache)) {
      const { uniformLocations: e, customUniformLocations: s, infLoc: o, nanLoc: r, inShapesLocations: i, inTexShapesLocations: a, outShapeLocation: l, outShapeStridesLocation: c, outTexShapeLocation: u } = nC(this.gpgpu, t.program, t.webGLProgram);
      t.uniformLocations = e, t.customUniformLocations = s, t.infLoc = o, t.nanLoc = r, t.inShapesLocations = i, t.inTexShapesLocations = a, t.outShapeLocation = l, t.outShapeStridesLocation = c, t.outTexShapeLocation = u;
    }
  }
  /**
   * Create a TF.js tensor out of an existing WebGL texture. A new texture will
   * be created.
   */
  createTensorFromGPUData(t, e, s) {
    t.channels = t.channels || "RGBA";
    const { texture: o, height: r, width: i, channels: a } = t, l = Ot().backend;
    if (!l.gpgpu.gl.isTexture(o))
      throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
    const c = l.writeTexture(o, e, s, r, i, a);
    return Ot().makeTensorFromDataId(c, e, s, l);
  }
}
vd.nextDataId = 0;
function dZ(n, t) {
  if (t === "float32" || t === "complex64")
    return n;
  if (t === "int32" || t === "bool") {
    const e = t === "int32" ? new Int32Array(n.length) : new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      e[s] = Math.round(n[s]);
    return e;
  } else
    throw new Error(`Unknown dtype ${t}`);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Lf() && e1(
  "webgl",
  () => new vd(),
  2
  /* priority */
);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Tg = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class Br {
  constructor(t, e, s) {
    this.variableNames = ["A", "B"], this.outputShape = bt(e, s), this.enableShapeUniforms = Ze(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Nl = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class Rl {
  constructor(t, e, s, o = !1) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = bt(e, s);
    const r = this.outputShape.length;
    this.enableShapeUniforms = Ze(r);
    let i = "";
    if (o)
      if (r === 0 || X(this.outputShape) === 1)
        i = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (i = `
          ${Kt(r)} coords = getOutputCoords();
        `, r === 1)
        this.enableShapeUniforms ? i += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : i += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const l = _e("coords", r);
        this.enableShapeUniforms ? i += `
            bool nextRowOutOfBounds =
              (${l[r - 2]} + 1) >= outShape[${r} - 2];
            bool nextColOutOfBounds =
              (${l[r - 1]} + 1) >= outShape[${r} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : i += `
            bool nextRowOutOfBounds =
              (${l[r - 2]} + 1) >= ${this.outputShape[r - 2]};
            bool nextColOutOfBounds =
              (${l[r - 1]} + 1) >= ${this.outputShape[r - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ln(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const hZ = {
  kernelName: $a,
  backendName: "webgl",
  kernelFunc: ln
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Co(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: o } = t, r = e.makeTensorInfo(s.shape, "complex64"), i = e.texData.get(r.dataId), a = ln({ inputs: { x: s }, backend: e }), l = ln({ inputs: { x: o }, backend: e });
  return i.complexTensorInfos = { real: a, imag: l }, r;
}
const pZ = {
  kernelName: Xp,
  backendName: "webgl",
  kernelFunc: Co
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pC = "return (a < 0.) ? b * a : a;", fC = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function fZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { alpha: r } = s, i = e.makeTensorInfo([], "float32", zs(r, "float32")), a = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Rl(fC, o.shape, i.shape) : new Br(pC, o.shape, i.shape), l = e.runWebGLProgram(a, [o, i], "float32");
  return e.disposeIntermediateTensorInfo(i), l;
}
const mZ = {
  kernelName: fu,
  backendName: "webgl",
  kernelFunc: fZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mC = "return (a < 0.) ? b * a : a;", gC = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function gZ(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: o } = t, r = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Rl(gC, s.shape, o.shape) : new Br(mC, s.shape, o.shape);
  return e.runWebGLProgram(r, [s, o], "float32");
}
const bZ = {
  kernelName: Du,
  backendName: "webgl",
  kernelFunc: gZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const di = "if (isnan(x)) return x;";
function Rt({ opSnippet: n, packedOpSnippet: t, cpuKernelImpl: e, dtype: s }) {
  return ({ inputs: o, backend: r }) => {
    const { x: i } = o, a = r, l = s || i.dtype;
    if (a.shouldExecuteOnCPU([i]) && e != null) {
      const d = a.texData.get(i.dataId), h = e(d.values, l);
      return a.makeTensorInfo(i.shape, l, h);
    }
    const c = V().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null;
    let u;
    return c ? u = new js(i.shape, t) : u = new hs(i.shape, n), a.runWebGLProgram(u, [i], l);
  };
}
function Ge({ opSnippet: n, packedOpSnippet: t, checkOutOfBounds: e = !1, supportsComplex: s = !1, cpuKernelImpl: o, dtype: r }) {
  return ({ inputs: i, backend: a }) => {
    const { a: l, b: c } = i, u = a;
    if (s && l.dtype === "complex64") {
      const f = u.texData.get(l.dataId), m = u.texData.get(c.dataId), [g, b] = [
        [f.complexTensorInfos.real, m.complexTensorInfos.real],
        [f.complexTensorInfos.imag, m.complexTensorInfos.imag]
      ].map((w) => {
        const [y, I] = w, C = {
          dataId: y.dataId,
          dtype: y.dtype,
          shape: l.shape
        }, v = {
          dataId: I.dataId,
          dtype: I.dtype,
          shape: c.shape
        }, S = new Br(n, l.shape, c.shape);
        return u.runWebGLProgram(S, [C, v], rn(y.dtype, I.dtype));
      }), x = Co({ inputs: { real: g, imag: b }, backend: u });
      return u.disposeIntermediateTensorInfo(g), u.disposeIntermediateTensorInfo(b), x;
    }
    const d = r || rn(l.dtype, c.dtype);
    if ((l.dtype === "string" || c.dtype === "string" || u.shouldExecuteOnCPU([l, c])) && o != null) {
      const f = u.texData.get(l.dataId).values, m = u.texData.get(c.dataId).values, g = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        qo(f)
      ) : f, b = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        qo(m)
      ) : m, [x, w] = o(l.shape, c.shape, g, b, d), y = u.makeTensorInfo(w, d), I = u.texData.get(y.dataId);
      return I.values = x, y;
    }
    const h = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null;
    let p;
    return h ? p = new Rl(t, l.shape, c.shape, e) : p = new Br(n, l.shape, c.shape), u.runWebGLProgram(p, [l, c], d);
  };
}
function ji(n, t = !1) {
  if (n === "linear")
    return t ? JP : HP;
  if (n === "relu")
    return t ? tZ : YP;
  if (n === "elu")
    return t ? qP : UP;
  if (n === "relu6")
    return t ? eZ : QP;
  if (n === "prelu")
    return t ? gC : mC;
  if (n === "leakyrelu")
    return t ? fC : pC;
  if (n === "sigmoid")
    return t ? nZ : jP;
  throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bC {
  constructor(t, e, s, o = !1, r = !1, i = !1, a = null, l = !1, c = !1) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = s, this.enableShapeUniforms = Ze(this.outputShape.length);
    const u = o ? t[1] : t[2], d = Math.ceil(u / 2), h = o ? "i * 2, rc.y" : "rc.y, i * 2", p = r ? "rc.z, i * 2" : "i * 2, rc.z", f = o ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], m = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let g = "", b = "";
    a && (l ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }` : c ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }` : g = `vec4 activation(vec4 x) {
          ${a}
        }`, b = "result = activation(result);");
    const x = i ? "result += getBiasAtOutCoords();" : "";
    i && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), c && this.variableNames.push("leakyreluAlpha");
    let w = "rc.x", y = "rc.x";
    t[0] < e[0] ? w = `imod(rc.x, ${t[0]})` : e[0] < t[0] && (y = `imod(rc.x, ${e[0]})`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${d}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${w};
        int batchB = ${y};
        for (int i = 0; i < ${d}; i++) {
          vec4 a = getMatrixA(batchA, ${h});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${m[0]});
          result += (${f[1]} * ${m[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${x}

        ${b}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j0 = {
  REAL: "return areal * breal - aimag * bimag;",
  IMAG: "return areal * bimag + aimag * breal;"
};
class J0 {
  constructor(t, e, s) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = bt(e, s), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q0 = "return a * b;";
function Ng(n) {
  const { inputs: t, backend: e } = n, { a: s, b: o } = t, r = rn(s.dtype, o.dtype);
  if (s.dtype === "complex64") {
    const a = e.texData.get(s.dataId), l = e.texData.get(o.dataId), c = new J0(j0.REAL, s.shape, o.shape), u = new J0(j0.IMAG, s.shape, o.shape), d = [
      {
        dataId: a.complexTensorInfos.real.dataId,
        dtype: a.complexTensorInfos.real.dtype,
        shape: s.shape
      },
      {
        dataId: a.complexTensorInfos.imag.dataId,
        dtype: a.complexTensorInfos.imag.dtype,
        shape: s.shape
      },
      {
        dataId: l.complexTensorInfos.real.dataId,
        dtype: l.complexTensorInfos.real.dtype,
        shape: o.shape
      },
      {
        dataId: l.complexTensorInfos.imag.dataId,
        dtype: l.complexTensorInfos.imag.dtype,
        shape: o.shape
      }
    ], h = e.runWebGLProgram(c, d, "float32"), p = e.runWebGLProgram(u, d, "float32"), f = Co({ inputs: { real: h, imag: p }, backend: e });
    return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(p), f;
  }
  if (e.shouldExecuteOnCPU([s, o])) {
    const a = e.texData.get(s.dataId), l = e.texData.get(o.dataId), [c, u] = bP(s.shape, o.shape, a.values, l.values, r), d = e.makeTensorInfo(u, r), h = e.texData.get(d.dataId);
    return h.values = c, d;
  }
  let i;
  return V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new Rl(q0, s.shape, o.shape) : i = new Br(q0, s.shape, o.shape), e.runWebGLProgram(i, [s, o], r);
}
const xZ = {
  kernelName: Va,
  backendName: "webgl",
  kernelFunc: Ng
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yZ(n, t, e) {
  const s = [
    Zr(n.shape),
    ...Kr(n.shape)
  ], o = {
    dtype: n.dtype,
    shape: s,
    dataId: n.dataId
  }, r = [
    Zr(t),
    ...Kr(t)
  ], i = new hC(r, s), a = !0, l = [s], c = e.runWebGLProgram(i, [o], n.dtype, l, a);
  return { dataId: c.dataId, shape: t, dtype: c.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function st(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { shape: r } = s, i = e, a = X(o.shape), l = Lp(r, a), c = X(l);
  k(a === c, () => `The new shape (${l}) has ${c} elements and the old shape (${o.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);
  const u = i.texData.get(o.dataId);
  return u.isPacked && !Wc(o.shape, l) && !(u.texture !== null && Wc(u.shape, l)) ? yZ(o, l, i) : (i.incRef(o.dataId), { dataId: o.dataId, shape: l, dtype: o.dtype });
}
const wZ = {
  kernelName: zu,
  backendName: "webgl",
  kernelFunc: st
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tb {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: o, inSize: r, outSize: i } = t;
    this.outputShape = [o, i];
    const a = Math.floor(s / 4) * 4, l = s % 4;
    let c = "sumValue += dot(values, ones);";
    if (e != null) {
      const d = 1 / e;
      c = `sumValue += dot(values * ${Xo(d) ? d.toPrecision(2) : d}, ones);`;
    }
    let u = "";
    r % s > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class IZ {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: o, inSize: r, outSize: i } = t;
    this.outputShape = [o, i];
    let a = "0.0", l = "";
    e === "prod" ? a = "1.0" : e === "min" ? (a = "1.0 / 1e-20", l = "min") : e === "max" && (a = "-1.0 / 1e-20", l = "max");
    let c = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "sum" ? c = "sumValue" : e === "prod" ? c = "prodValue" : e === "all" ? c = "allValue" : e === "any" && (c = "anyValue");
    const u = Math.floor(s / 4) * 4, d = s % 4;
    let h = `
      if (${e === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${e === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e === "min"} || ${e === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, p = "vec4";
    e === "all" ? (a = "1.0", h = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, p = "bvec4") : e === "any" && (a = "0.0", h = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, p = "bvec4");
    let f = "";
    r % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${h}
        }

        int inIdx = inOffset + ${u};
        if (${d === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${d === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${h}
        } else if (${d === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${h}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CZ(n) {
  const t = [];
  for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
    const e = t.length ? t[t.length - 1].outSize : n[1], s = rd(e);
    t.push({
      inSize: e,
      windowSize: s,
      outSize: Math.ceil(e / s)
    });
  }
  return t;
}
function gr(n, t, e, s) {
  const o = CZ(n.shape);
  let r = n;
  for (let i = 0; i < o.length; i++) {
    const { inSize: a, windowSize: l, outSize: c } = o[i];
    let u, d;
    e === "mean" ? u = i === 0 ? new tb({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, a) : new tb({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }) : u = new IZ({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, e), d = r, r = s.runWebGLProgram(u, [r], t), d.dataId !== n.dataId && s.disposeIntermediateTensorInfo(d);
  }
  return r;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vZ {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[e[i]];
    this.outputShape = s, this.rank = s.length;
    const o = Kt(this.rank), r = kZ(e);
    this.userCode = `
    void main() {
      ${o} resRC = getOutputCoords();
      setOutput(getA(${r}));
    }
    `;
  }
}
function kZ(n) {
  const t = n.length;
  if (t > 6)
    throw Error(`Transpose for rank ${t} is not yet supported`);
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], s = new Array(t);
  for (let o = 0; o < n.length; o++)
    s[n[o]] = e[o];
  return s.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SZ {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0;
    const s = new Array(t.length);
    for (let u = 0; u < s.length; u++)
      s[u] = t[e[u]];
    if (this.outputShape = s, this.rank = s.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const o = Kt(this.rank), r = dC("rc", this.rank), i = new Array(this.rank);
    for (let u = 0; u < e.length; u++)
      i[e[u]] = r[u];
    const a = `vec2(${i.slice(-2).join()})`, l = `++${r[this.rank - 1]} < ${s[this.rank - 1]}`, c = `getChannel(getA(${i.join()}), ${a})`;
    this.userCode = `
    void main() {
      ${o} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${r[this.rank - 1]};
      if(++${r[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kd(n, t, e) {
  const s = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new SZ(n.shape, t) : new vZ(n.shape, t);
  return e.runWebGLProgram(s, [n], n.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TZ(n, t, e, s) {
  const o = t, r = n.shape.length, i = Ct(o, n.shape);
  let a = i;
  const l = ne(a, r), c = l != null;
  let u = n;
  c && (u = kd(n, l, s), a = ce(a.length, r)), Ee("sum", a, r);
  const [d, h] = Ce(u.shape, a);
  let p = d;
  e && (p = le(d, i));
  const f = X(h), g = X(n.shape) / f, b = st({ inputs: { x: u }, attrs: { shape: [g, f] }, backend: s }), x = Ef(n.dtype), w = gr(b, x, "sum", s), y = st({ inputs: { x: w }, attrs: { shape: p }, backend: s });
  return s.disposeIntermediateTensorInfo(b), s.disposeIntermediateTensorInfo(w), c && s.disposeIntermediateTensorInfo(u), y;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sd(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  return TZ(o, r, i, e);
}
const NZ = {
  kernelName: Ou,
  backendName: "webgl",
  kernelFunc: Sd
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Oe(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { perm: r } = s, i = e, a = o.shape.length, l = new Array(a);
  for (let u = 0; u < l.length; u++)
    l[u] = o.shape[r[u]];
  let c;
  if (i.shouldExecuteOnCPU([o])) {
    const d = i.texData.get(o.dataId).values, h = Sg(d, o.shape, o.dtype, r, l);
    c = i.makeTensorInfo(l, o.dtype);
    const p = i.texData.get(c.dataId);
    p.values = h;
  } else
    c = kd(o, r, i);
  return c;
}
const RZ = {
  kernelName: Rr,
  backendName: "webgl",
  kernelFunc: Oe
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xC = 1e3;
function Vc({ a: n, b: t, transposeA: e, transposeB: s, backend: o, bias: r = null, preluActivationWeights: i = null, leakyreluAlpha: a = 0, activation: l = null }) {
  const c = n.shape.length, u = t.shape.length, d = e ? n.shape[c - 2] : n.shape[c - 1], h = s ? t.shape[u - 1] : t.shape[u - 2], p = e ? n.shape[c - 1] : n.shape[c - 2], f = s ? t.shape[u - 2] : t.shape[u - 1], m = n.shape.slice(0, -2), g = t.shape.slice(0, -2), b = X(m), x = X(g), y = bt(n.shape.slice(0, -2), t.shape.slice(0, -2)).concat([p, f]);
  k(d === h, () => `Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const I = e ? [b, d, p] : [b, p, d], C = s ? [x, f, h] : [x, h, f], v = st({ inputs: { x: n }, backend: o, attrs: { shape: I } }), S = st({ inputs: { x: t }, backend: o, attrs: { shape: C } }), N = [v, S], R = Math.max(b, x), $ = e ? v.shape[1] : v.shape[2], F = r != null, W = i != null, _ = l === "leakyrelu", A = l != null ? ji(l, !0) : null, O = F || W || _ || A != null;
  let K;
  if ((p === 1 || f === 1) && $ > xC && O === !1) {
    let B = v, Y = S;
    e && (B = Oe({ inputs: { x: v }, backend: o, attrs: { perm: [0, 2, 1] } }), N.push(B)), s && (Y = Oe({ inputs: { x: S }, backend: o, attrs: { perm: [0, 2, 1] } }), N.push(Y));
    const Q = f !== 1, J = f === 1;
    let j = B;
    Q && (j = st({
      inputs: { x: B },
      backend: o,
      attrs: { shape: [R, $, 1] }
    }), N.push(j));
    const nt = f === 1 ? 2 : 1;
    let q = Y;
    J && (q = st({
      inputs: { x: Y },
      backend: o,
      attrs: { shape: [R, 1, $] }
    }), N.push(q));
    const rt = Ng({ inputs: { a: j, b: q }, backend: o });
    K = Sd({ inputs: { x: rt }, backend: o, attrs: { axis: nt, keepDims: !0 } }), N.push(rt);
  } else {
    const B = rn(n.dtype, t.dtype), Y = new bC(I, C, [R, p, f], e, s, F, A, W, _), Q = [v, S];
    if (r != null && Q.push(r), W && Q.push(i), _) {
      const J = o.makeTensorInfo([], "float32", zs(a, "float32"));
      Q.push(J), N.push(J);
    }
    K = o.runWebGLProgram(Y, Q, B);
  }
  const Z = st({ inputs: { x: K }, backend: o, attrs: { shape: y } });
  N.push(K);
  for (const B of N)
    o.disposeIntermediateTensorInfo(B);
  return Z;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $Z(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: d } = s;
  return Vc({
    a: o,
    b: r,
    transposeA: l,
    transposeB: c,
    backend: e,
    bias: i,
    preluActivationWeights: a,
    leakyreluAlpha: d,
    activation: u
  });
}
const EZ = {
  kernelName: hc,
  backendName: "webgl",
  kernelFunc: $Z
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eb = "return abs(x);";
function GZ(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
    const r = e.texData.get(s.dataId), i = cC(r.values);
    return e.makeTensorInfo(s.shape, s.dtype, i);
  }
  let o;
  return V().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? o = new js(s.shape, eb) : o = new hs(s.shape, eb), e.runWebGLProgram(o, [s], s.dtype);
}
const LZ = {
  kernelName: Uc,
  backendName: "webgl",
  kernelFunc: GZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DZ = Xn + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, MZ = Rt({ opSnippet: DZ }), zZ = {
  kernelName: ca,
  backendName: "webgl",
  kernelFunc: MZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FZ = Xn + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, WZ = Rt({ opSnippet: FZ }), VZ = {
  kernelName: ua,
  backendName: "webgl",
  kernelFunc: WZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nb = "return a + b;", _Z = Ge({
  opSnippet: nb,
  packedOpSnippet: nb,
  supportsComplex: !0,
  cpuKernelImpl: jX
}), AZ = {
  kernelName: Jr,
  backendName: "webgl",
  kernelFunc: _Z
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OZ {
  constructor(t, e) {
    this.outputShape = [], this.outputShape = t, this.variableNames = e.map((r, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((r) => {
      s.push(`float v${r} = get${r}AtOutCoords();`);
    });
    const o = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${o};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class XZ {
  constructor(t, e) {
    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.variableNames = e.map((r, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((r) => {
      s.push(`vec4 v${r} = get${r}AtOutCoords();`);
    });
    const o = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${o};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ac(n) {
  const { inputs: t, backend: e } = n, s = t;
  if (s.length === 1)
    return ln({ inputs: { x: s[0] }, backend: e });
  if (s.length > V().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const l = Math.floor(s.length / 2), c = ac({ inputs: s.slice(0, l), backend: e }), u = ac({ inputs: s.slice(l), backend: e });
    return ac({ inputs: [c, u], backend: e });
  }
  const o = s.map((l) => l.dtype).reduce((l, c) => rn(l, c)), r = s.map((l) => l.shape), a = V().getBool("WEBGL_PACK") ? new XZ(s[0].shape, r) : new OZ(s[0].shape, r);
  return e.runWebGLProgram(a, s, o);
}
const PZ = {
  kernelName: Fp,
  backendName: "webgl",
  kernelFunc: ac
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = Ct(r, o.shape);
  let c = l;
  const u = ne(c, a);
  let d = o;
  u != null && (d = Oe({ inputs: { x: o }, backend: e, attrs: { perm: u } }), c = ce(c.length, a)), Ee("all", c, a);
  const [h, p] = Ce(d.shape, c), f = X(p), m = st({ inputs: { x: d }, backend: e, attrs: { shape: [-1, f] } }), g = gr(m, m.dtype, "all", e);
  let b;
  if (i) {
    const x = le(h, l);
    b = st({ inputs: { x: g }, backend: e, attrs: { shape: x } });
  } else
    b = st({ inputs: { x: g }, backend: e, attrs: { shape: h } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(d), b;
}
const KZ = {
  kernelName: Wp,
  backendName: "webgl",
  kernelFunc: ZZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = Ct(r, o.shape);
  let c = l;
  const u = ne(c, a);
  let d = o;
  u != null && (d = Oe({ inputs: { x: o }, backend: e, attrs: { perm: u } }), c = ce(c.length, a)), Ee("any", c, a);
  const [h, p] = Ce(d.shape, c), f = X(p), m = st({ inputs: { x: d }, backend: e, attrs: { shape: [-1, f] } }), g = gr(m, m.dtype, "any", e);
  let b;
  if (i) {
    const x = le(h, l);
    b = st({ inputs: { x: g }, backend: e, attrs: { shape: x } });
  } else
    b = st({ inputs: { x: g }, backend: e, attrs: { shape: h } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(d), b;
}
const HZ = {
  kernelName: Vp,
  backendName: "webgl",
  kernelFunc: BZ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class UZ {
  constructor(t, e, s) {
    this.variableNames = ["A"];
    const { windowSize: o, batchSize: r, outSize: i } = t;
    s || this.variableNames.push("bestIndicesA"), this.outputShape = [r, i];
    const a = e === "max" ? ">" : "<", l = s ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${o}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class YZ {
  constructor(t, e, s, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, k(t.length > 2, () => `Packed arg${s.charAt(0).toUpperCase() + s.slice(1)} supports only inputs with rank above 2.`);
    const r = t[t.length - 1], i = Math.ceil(r / e);
    this.outputShape = t.slice(0, -1), i > 1 && this.outputShape.push(i), o || this.variableNames.push("bestIndicesA");
    const a = this.outputShape, l = a.length, c = Kt(l), u = _e("coords", l);
    let d, h;
    if (i === 1) {
      h = l + 1;
      const S = Kt(h);
      d = `
        ${S} sourceLocR = ${S}(${u.join()}, 0);
        ++${u[l - 1]};
        ${S} sourceLocG = ${S}(${u.join()}, 0);
        ++${u[l - 2]};
        ${S} sourceLocA = ${S}(${u.join()}, 0);
        --${u[l - 1]};
        ${S} sourceLocB = ${S}(${u.join()}, 0);
        --${u[l - 2]};`;
    } else
      h = l, d = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`;
    const p = ["x", "y", "z", "w", "u", "v"].slice(0, h), f = "." + p[h - 1], m = p.map((S) => "int " + S), g = _e("sourceLocR", h - 1).concat("inIdx.r"), b = _e("sourceLocG", h - 1).concat("inIdx.g"), x = _e("sourceLocB", h - 1).concat("inIdx.b"), w = _e("sourceLocA", h - 1).concat("inIdx.a"), y = s === "max" ? "greaterThan" : "lessThan", I = o ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${w.join()})));`, C = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${b.join()}) : 0.,
            hasNextRow ? getAChannel(${x.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`, v = o ? "" : `
      float getBestIndicesAChannel(${m.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${m.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${v}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${a[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${a[l - 2] - 1};
        ${d}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${C};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${I}
          vec4 candidate = ${C};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yC(n, t, e, s = null) {
  let o = t.shape[0], r = t.shape[1];
  s != null && (o = s.shape[0], r = s.shape[1]);
  const i = rd(r), a = { windowSize: i, inSize: r, batchSize: o, outSize: Math.ceil(r / i) }, l = new UZ(a, e, s == null), c = [t];
  s != null && c.push(s);
  const u = n.runWebGLProgram(l, c, "int32");
  if (u.shape[1] === 1)
    return u;
  const d = yC(n, t, e, u);
  return n.disposeIntermediateTensorInfo(u), d;
}
function wC(n, t, e, s = null) {
  const o = s != null ? s.shape : t.shape, r = o[o.length - 1], i = rd(r), a = new YZ(o, i, e, s == null), l = s == null ? [t] : [t, s], c = n.runWebGLProgram(a, l, "int32");
  if (c.shape.length === t.shape.length) {
    const u = wC(n, t, e, c);
    return n.disposeIntermediateTensorInfo(c), u;
  }
  return c;
}
function IC(n, t, e, s) {
  const o = [e];
  if (Ee("arg" + s.charAt(0).toUpperCase() + s.slice(1), o, t.shape.length), !V().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2) {
    const r = [], i = n.texData.get(t.dataId), a = i !== null && i.isPacked;
    let l = t;
    a && (l = n.unpackTensor(t), r.push(l));
    const [c, u] = Ce(l.shape, o), d = X(u), h = st({ inputs: { x: l }, backend: n, attrs: { shape: [-1, d] } });
    r.push(h);
    const p = yC(n, h, s);
    r.push(p);
    const f = st({ inputs: { x: p }, backend: n, attrs: { shape: c } });
    return r.forEach((m) => n.disposeIntermediateTensorInfo(m)), f;
  }
  return wC(n, t, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  let i = Ct(r, o.shape);
  const a = ne(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = Oe({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = ce(i.length, l.shape.length)), Ee("argMax", [i[0]], l.shape.length);
  const u = IC(e, l, i[0], "max");
  return c.forEach((d) => e.disposeIntermediateTensorInfo(d)), u;
}
const jZ = {
  kernelName: Yc,
  backendName: "webgl",
  kernelFunc: QZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  let i = Ct(r, o.shape);
  const a = ne(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = Oe({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = ce(i.length, l.shape.length)), Ee("argMin", [i[0]], l.shape.length);
  const u = IC(e, l, i[0], "min");
  return c.forEach((d) => e.disposeIntermediateTensorInfo(d)), u;
}
const qZ = {
  kernelName: Qc,
  backendName: "webgl",
  kernelFunc: JZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tK = Xn + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, eK = Rt({ opSnippet: tK }), nK = {
  kernelName: da,
  backendName: "webgl",
  kernelFunc: eK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sK = Xn + "return log(x + sqrt(x * x + 1.0));", oK = Rt({ opSnippet: sK }), rK = {
  kernelName: ha,
  backendName: "webgl",
  kernelFunc: oK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iK = Xn + `
  return atan(x);
`, aK = Rt({ opSnippet: iK }), lK = {
  kernelName: pa,
  backendName: "webgl",
  kernelFunc: aK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cK = Tg + `
  return atan(a, b);
`, uK = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Nl + `
  return result;
`, dK = Ge({ opSnippet: cK, packedOpSnippet: uK }), hK = {
  kernelName: ma,
  backendName: "webgl",
  kernelFunc: dK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pK = Xn + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, fK = Rt({ opSnippet: pK }), mK = {
  kernelName: fa,
  backendName: "webgl",
  kernelFunc: fK
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Ji {
  constructor(t, e, s, o = !1, r = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideHeight, l = t.strideWidth, c = t.dilationHeight, u = t.dilationWidth, d = t.effectiveFilterHeight, h = t.effectiveFilterWidth, p = t.padInfo.top, f = t.padInfo.left;
    this.outputShape = t.outShape;
    const m = e === "avg", g = `((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`, b = `(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;
    let x = "0.0";
    if (m || (x = "-1.0 / 1e-20"), s) {
      const S = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${h};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${S} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${o ? r ? g : b : `wR * ${h} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const w = "max";
    let y = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (y = "avgValue / max(count, 1.0)");
    const I = Math.floor(i / 4) * 4, C = i % 4, v = `
      if (${m}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${d};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${I}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${v}
          }

          int xC = xCCorner + ${I};
          if (${C === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${v}
          } else if (${C === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${v}
          } else if (${C === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${v}
          }
        }
        setOutput(${y});
      }
    `;
  }
}
class Rg {
  constructor(t, e, s, o = !1, r = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideDepth, l = t.strideHeight, c = t.strideWidth, u = t.dilationDepth, d = t.dilationHeight, h = t.dilationWidth, p = t.effectiveFilterDepth, f = t.effectiveFilterHeight, m = t.effectiveFilterWidth, g = t.padInfo.front, b = t.padInfo.top, x = t.padInfo.left;
    this.outputShape = t.outShape;
    const w = e === "avg";
    let y = "0.0";
    if (w || (y = "-1.0 / 1e-20"), s) {
      const R = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${g}, ${b}, ${x});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${d}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${m};
                  wC += ${h}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${R} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${o ? r ? `(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `wD * ${f} * ${m} +
                      wR * ${m} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const I = "max";
    let C = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (C = "avgValue / max(count, 1.0)");
    const v = Math.floor(i / 4) * 4, S = i % 4, N = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${g}, ${b}, ${x});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${d}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${v}; wC += 4) {
              int xC = xCCorner + wC * ${h};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                getValue(batch, xD, xR, xC + 3 * ${h}, ch)
              );

              ${N}
            }

            int xC = xCCorner + ${v};
            if (${S === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${S === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                initializationValue,
                initializationValue
              );

              ${N}
            } else if (${S === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${h}, ch),
                getValue(batch, xD, xR, xC + 2 * ${h}, ch),
                initializationValue
              );

              ${N}
            }
          }
        }
        setOutput(${C});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  Sl(o, "avgPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(Fe(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = An(o.shape, r, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && $t(u.inShape, u.outShape))
    return ln({ inputs: { x: o }, backend: e });
  const d = new Ji(u, "avg", !1);
  return e.runWebGLProgram(d, [o], "float32");
}
const bK = {
  kernelName: jc,
  backendName: "webgl",
  kernelFunc: gK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s, u = [1, 1, 1], d = Fs(o.shape, r, i, u, a, l, c), h = new Rg(d, "avg", !1);
  return e.runWebGLProgram(h, [o], "float32");
}
const yK = {
  kernelName: Jc,
  backendName: "webgl",
  kernelFunc: xK
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class wK {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, o = t.strideHeight, r = t.strideWidth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterHeight, c = t.effectiveFilterWidth, u = l - 1 - t.padInfo.top, d = c - 1 - t.padInfo.left, h = 1 / (e * s);
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${d});
      const float avgMultiplier = float(${h});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class IK {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, o = t.filterWidth, r = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, d = t.effectiveFilterDepth, h = t.effectiveFilterHeight, p = t.effectiveFilterWidth, f = d - 1 - t.padInfo.front, m = h - 1 - t.padInfo.top, g = p - 1 - t.padInfo.left, b = 1 / (e * s * o);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${m}, ${g});
      const float avgMultiplier = float(${b});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${r}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, d = [1, 1, 1], h = Fs(i.shape, a, l, d, c, u), p = new IK(h);
  return e.runWebGLProgram(p, [o], i.dtype);
}
const vK = {
  kernelName: Ap,
  backendName: "webgl",
  kernelFunc: CK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r;
  Sl([o, r], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = An(i.shape, a, l, 1, c), d = new wK(u);
  return e.runWebGLProgram(d, [o], i.dtype);
}
const SK = {
  kernelName: _p,
  backendName: "webgl",
  kernelFunc: kK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r } = t, { transposeA: i, transposeB: a } = s;
  return Vc({ a: o, b: r, transposeA: i, transposeB: a, backend: e });
}
const NK = {
  kernelName: qc,
  backendName: "webgl",
  kernelFunc: TK
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class RK {
  constructor(t, e, s, o, r, i) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], bt(t, e), bt(t, s);
    let a = "0.0";
    o != null && (bt(t, o), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "1.0";
    r != null && (bt(t, r), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $K {
  constructor(t, e, s, o, r, i) {
    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], bt(t, e), bt(t, s);
    let a = "vec4(0.0)";
    o != null && (bt(t, o), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "vec4(1.0)";
    r != null && (bt(t, r), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EK = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s, mean: o, variance: r, offset: i, scale: a } = n;
  k(o.shape.length === r.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), k(i == null || o.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), k(a == null || o.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = e;
  l == null && (l = 1e-3);
  const c = [s, o, r];
  let u = null;
  i != null && (u = i.shape, c.push(i));
  let d = null;
  a != null && (d = a.shape, c.push(a));
  const h = V().getBool("WEBGL_PACK_NORMALIZATION") ? new $K(s.shape, o.shape, r.shape, u, d, l) : new RK(s.shape, o.shape, r.shape, u, d, l);
  return t.runWebGLProgram(h, c, c[0].dtype);
}, GK = {
  kernelName: du,
  backendName: "webgl",
  kernelFunc: EK
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LK {
  constructor(t) {
    this.variableNames = ["source"], this.outputShape = t, this.rank = t.length;
    const e = Kt(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const s = DK(this.rank);
    let o;
    const r = t.map((i, a) => `sourceLoc.${gp[a]} = start[${a}] + coords.${gp[a]};`);
    o = `
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${r.join(`
`)}
      `, this.userCode = `
      void main() {
        ${o}
        setOutput(getSource(${s}));
      }
    `;
  }
}
const gp = ["x", "y", "z", "w", "u", "v"];
function DK(n) {
  if (n === 1)
    return "sourceLoc";
  if (n <= 6)
    return gp.slice(0, n).map((t) => "sourceLoc." + t).join(",");
  throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MK {
  constructor(t) {
    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const e = Kt(this.rank), s = _e("coords", this.rank), o = _e("sourceLoc", this.rank), r = this.rank === 1 ? "sourceLoc" : `vec2(${o.slice(-2).join()})`, i = `getChannel(getSource(${o.join()}), ${r})`, a = `
      result.x = ${i};
      if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
        ++${o[this.rank - 1]};
        result.y = ${i};
        --${o[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${t[this.rank - 2]}) {
        ++${o[this.rank - 2]};
        result.z = ${i};
        if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
          ++${o[this.rank - 1]};
          result.w = ${i};
        }
      }
    `, c = this.rank <= 4 ? `sourceLoc = coords +
            ${e}(${t.map((u, d) => `start[${d}]`).join()});` : t.map((u, d) => `${o[d]} = ${s[d]} + start[${d}];`).join(`
`);
    this.userCode = `
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zK(n, t, e, s) {
  const o = s.texData.get(n.dataId), r = s.makeTensorInfo(e, n.dtype), i = s.texData.get(r.dataId);
  Object.assign(i, o), i.refCount = 1, i.shape = e, i.dtype = n.dtype;
  let a = Im(t, dt(n.shape));
  o.slice && (a += o.slice.flatOffset), i.slice = {
    flatOffset: a,
    // Point to the original dataId, which is used to do ref counting.
    origDataId: o.slice && o.slice.origDataId || n.dataId
  };
  const l = s.dataRefCount.get(i.slice.origDataId) || 1;
  return s.dataRefCount.set(i.slice.origDataId, l + 1), r;
}
function hi(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, size: i } = s, [a, l] = sd(o, r, i);
  if (xm(o, a, l), X(l) === 0)
    return e.makeTensorInfo(l, o.dtype, []);
  if (e.shouldExecuteOnCPU([o]) || o.dtype === "string") {
    const d = e.texData.get(o.dataId), h = RP(d.values, a, l, o.shape, o.dtype);
    return e.makeTensorInfo(l, o.dtype, h);
  }
  const { isPacked: c } = e.texData.get(o.dataId), u = wm(o.shape, a, l);
  if (c || !u) {
    const d = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new MK(l) : new LK(l), h = [a];
    return e.runWebGLProgram(d, [o], o.dtype, h);
  }
  return e.uploadToGPU(o.dataId), zK(o, a, l, e);
}
const FK = {
  kernelName: Au,
  backendName: "webgl",
  kernelFunc: hi
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WK = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, crops: i } = s;
  k(o.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const a = r.reduce((x, w) => x * w), l = hl(o.shape, r, a), c = pl(l.length, r.length), u = fl(o.shape, r, a), d = Tm(i, r.length), h = Nm(u, i, r.length), p = [], f = st({ inputs: { x: o }, backend: e, attrs: { shape: l } }), m = Oe({ inputs: { x: f }, backend: e, attrs: { perm: c } }), g = st({
    inputs: { x: m },
    backend: e,
    attrs: { shape: u }
  }), b = hi({
    inputs: { x: g },
    backend: e,
    attrs: { begin: d, size: h }
  });
  return p.push(f), p.push(m), p.push(g), p.forEach((x) => e.disposeIntermediateTensorInfo(x)), b;
}, VK = {
  kernelName: tu,
  backendName: "webgl",
  kernelFunc: WK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _K(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i } = s, a = e.readSync(o.dataId), l = e.readSync(r.dataId), c = lC(a, l, r.dtype, r.shape, i);
  return e.makeTensorInfo([i], r.dtype, c);
}
const AK = {
  kernelName: Op,
  backendName: "webgl",
  kernelFunc: _K
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OK(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: o } = t, r = e.readSync(s.dataId), i = e.readSync(o.dataId), a = bt(Array.from(r), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const XK = {
  kernelName: Ix,
  backendName: "webgl",
  kernelFunc: OK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PK = "return float(a != b);", CC = Ge({ opSnippet: PK, cpuKernelImpl: yP, dtype: "bool" }), ZK = {
  kernelName: Ru,
  backendName: "webgl",
  kernelFunc: CC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $l(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.texData.get(s.dataId);
  return ln({ inputs: { x: o.complexTensorInfos.real }, backend: e });
}
const KK = {
  kernelName: hf,
  backendName: "webgl",
  kernelFunc: $l
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BK = "return float(int(x));";
function HK(n, t) {
  const e = new hs(n.shape, BK), s = t.runWebGLProgram(e, [n], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bp(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dtype: r } = s;
  if (r === "complex64") {
    if (o.dtype === "complex64")
      return ln({ inputs: { x: o }, backend: e });
    const i = ye(o.shape), a = bp({ inputs: { x: o }, backend: e, attrs: { dtype: "float32" } }), l = Co({ inputs: { real: a, imag: i }, backend: e });
    return i.dispose(), e.disposeIntermediateTensorInfo(a), l;
  }
  if (o.dtype === "complex64") {
    const i = $l({ inputs: { input: o }, backend: e }), a = bp({ inputs: { x: i }, backend: e, attrs: { dtype: r } });
    return e.disposeIntermediateTensorInfo(i), a;
  }
  if (!Dp(o.dtype, r)) {
    const i = ln({ inputs: { x: o }, backend: e });
    return { dataId: i.dataId, shape: i.shape, dtype: r };
  }
  if (e.shouldExecuteOnCPU([o])) {
    const i = e.texData.get(o.dataId).values, [a, l, c] = qX(i, o.shape, o.dtype, r);
    return e.makeTensorInfo(a, l, c);
  }
  if (r === "int32")
    return HK(o, e);
  if (r === "bool") {
    const i = e.makeTensorInfo([], "bool", Ie("bool", 1)), l = CC({ inputs: { a: o, b: i }, backend: e });
    return e.disposeIntermediateTensorInfo(i), l;
  }
  throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${r}`);
}
const UK = {
  kernelName: ga,
  backendName: "webgl",
  kernelFunc: bp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sb = "return ceil(x);", YK = Rt({ opSnippet: sb, packedOpSnippet: sb, cpuKernelImpl: tP }), QK = {
  kernelName: ba,
  backendName: "webgl",
  kernelFunc: YK
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class jK {
  constructor(t) {
    this.variableNames = ["A"], this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class JK {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { clipValueMin: r, clipValueMax: i } = s;
  let a;
  V().getBool("WEBGL_PACK_CLIP") ? a = new JK(o.shape) : a = new jK(o.shape);
  const l = [[r], [i]];
  return e.runWebGLProgram(a, [o], o.dtype, l);
}
const tB = {
  kernelName: xa,
  backendName: "webgl",
  kernelFunc: qK
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eB {
  constructor(t) {
    this.variableNames = ["real", "imag"], this.outputShape = t, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ob(n, t) {
  return {
    dataId: t.dataId,
    dtype: t.dtype,
    shape: n.shape
  };
}
function nB(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, o = e.texData.get(s.dataId), r = new eB(s.shape), i = [
    ob(s, o.complexTensorInfos.real),
    ob(s, o.complexTensorInfos.imag)
  ];
  return e.runWebGLProgram(r, i, i[0].dtype);
}
const sB = {
  kernelName: eu,
  backendName: "webgl",
  kernelFunc: nB
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class oB {
  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
  constructor(t) {
    this.outputShape = [], this.outputShape = ps(
      t,
      1
      /* axis */
    ), this.variableNames = t.map((i, a) => `T${a}`);
    const e = new Array(t.length - 1);
    e[0] = t[0][1];
    for (let i = 1; i < e.length; i++)
      e[i] = e[i - 1] + t[i][1];
    const s = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
    for (let i = 1; i < e.length; i++) {
      const a = e[i - 1];
      s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`);
    }
    const o = e.length, r = e[e.length - 1];
    s.push(`else setOutput(getT${o}(yR, yC-${r}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rB {
  constructor(t, e) {
    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = ps(t, e);
    const s = this.outputShape, o = s.length, r = Kt(o), i = _e("coords", o), a = ["x", "y", "z", "w", "u", "v"].slice(0, o);
    this.variableNames = t.map((m, g) => `T${g}`);
    const l = new Array(t.length - 1);
    l[0] = t[0][e];
    for (let m = 1; m < l.length; m++)
      l[m] = l[m - 1] + t[m][e];
    const c = a[e], u = a.slice(-2), d = a.join();
    let h = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${d}), vec2(${u.join()}));
        }`;
    for (let m = 1; m < l.length; m++) {
      const g = l[m - 1];
      h += `
        if (${c} < ${l[m]}  && ${c} >= ${l[m - 1]}) {
          return getChannel(
            getT${m}(${Ul(a, c, g)}),
            vec2(${Ul(u, c, g)}));
        }`;
    }
    const p = l.length, f = l[l.length - 1];
    h += `
        return getChannel(
          getT${p}(${Ul(a, c, f)}),
          vec2(${Ul(u, c, f)}));`, this.userCode = `
      float getValue(${a.map((m) => "int " + m)}) {
        ${h}
      }

      void main() {
        ${r} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[o - 1]} = ${i[o - 1]} + 1;
        if (${i[o - 1]} < ${s[o - 1]}) {
          result.g = getValue(${i});
        }

        ${i[o - 2]} = ${i[o - 2]} + 1;
        if (${i[o - 2]} < ${s[o - 2]}) {
          result.a = getValue(${i});
        }

        ${i[o - 1]} = ${i[o - 1]} - 1;
        if (${i[o - 2]} < ${s[o - 2]} &&
            ${i[o - 1]} < ${s[o - 1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `;
  }
}
function Ul(n, t, e) {
  const s = n.indexOf(t);
  return n.map((r, i) => i === s ? `${r} - ${e}` : r).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Td(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.texData.get(s.dataId);
  return ln({ inputs: { x: o.complexTensorInfos.imag }, backend: e });
}
const iB = {
  kernelName: sf,
  backendName: "webgl",
  kernelFunc: Td
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $i(n, t, e) {
  const s = n[0].dtype;
  if (s === "complex64") {
    const p = n.map((x) => $l({ inputs: { input: x }, backend: e })), f = n.map((x) => Td({ inputs: { input: x }, backend: e })), m = $i(p, t, e), g = $i(f, t, e), b = Co({ inputs: { real: m, imag: g }, backend: e });
    return p.forEach((x) => e.disposeIntermediateTensorInfo(x)), f.forEach((x) => e.disposeIntermediateTensorInfo(x)), e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), b;
  }
  let o = e.shouldExecuteOnCPU(n);
  if (s === "string" && (o = !0), o) {
    const p = n.map((y) => {
      const C = [-1, X(y.shape.slice(t))];
      return st({ inputs: { x: y }, backend: e, attrs: { shape: C } });
    }), f = p.map((y) => ({ vals: e.readSync(y.dataId), shape: y.shape })), m = ps(
      p.map((y) => y.shape),
      1
      /* axis */
    ), g = p[0].shape[0] === 1, b = eP(f, m, s, g), x = ps(n.map((y) => y.shape), t), w = e.makeTensorInfo(x, s, b);
    return p.forEach((y) => e.disposeIntermediateTensorInfo(y)), w;
  }
  const r = n.filter((p) => X(p.shape) > 0), i = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && r[0].shape.length > 1;
  if (r.length === 1) {
    const p = i ? new hs(n[0].shape, Ks) : new js(n[0].shape, Ks);
    return e.runWebGLProgram(p, n, s);
  }
  const a = V().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (r.length > a) {
    const p = [];
    for (let m = 0; m < r.length; m += a) {
      const g = r.slice(m, m + a);
      p.push($i(g, t, e));
    }
    const f = $i(p, t, e);
    for (const m of p)
      e.disposeIntermediateTensorInfo(m);
    return f;
  }
  if (i) {
    const p = new rB(r.map((f) => f.shape), t);
    return e.runWebGLProgram(p, r, s);
  }
  const { tensors2D: l, outShape: c } = aB(r, t, e), u = new oB(l.map((p) => p.shape)), d = e.runWebGLProgram(u, l, s);
  l.forEach((p) => e.disposeIntermediateTensorInfo(p));
  const h = st({ inputs: { x: d }, attrs: { shape: c }, backend: e });
  return e.disposeIntermediateTensorInfo(d), h;
}
function aB(n, t, e) {
  const s = ps(n.map((r) => r.shape), t);
  return { tensors2D: n.map((r) => st({
    inputs: { x: r },
    attrs: { shape: [-1, X(r.shape.slice(t))] },
    backend: e
  })), outShape: s };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s, r = Ct(o, t[0].shape)[0], i = t.map((c) => c.shape);
  vm(i, r);
  const a = ps(t.map((c) => c.shape), r);
  if (X(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((c) => X(c.shape) > 0);
  return l.length === 1 ? ln({ inputs: { x: l[0] }, backend: e }) : $i(l, r, e);
}
const lB = {
  kernelName: nu,
  backendName: "webgl",
  kernelFunc: vC
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class kC {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const i = t.padInfo.top, a = t.padInfo.left, l = t.strideHeight, c = t.strideWidth, u = t.dilationHeight, d = t.dilationWidth, h = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, m = t.inChannels % 4, g = t.dataFormat === "channelsLast", b = g ? 1 : 2, x = g ? 2 : 3, w = g ? 3 : 1;
    let y = "", I = "";
    s && (o ? y = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : r ? y = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : y = `
          float activation(float x) {
            ${s}
          }
        `, I = "result = activation(result);");
    const C = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${y}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${b}], coords[${x}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${h}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${d};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${m === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${m === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${m === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${C}
        ${I}
        setOutput(result);
      }
    `;
  }
}
class cB {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const e = t.padInfo.front, s = t.padInfo.top, o = t.padInfo.left, r = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, d = t.filterDepth, h = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, m = t.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${r}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${s}, ${o});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${d}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${h}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${m === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${m === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${m === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SC {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = Ze(this.outputShape.length);
    const i = t.padInfo.left, a = t.strideWidth, l = t.dilationWidth, c = t.filterHeight, u = t.filterWidth, d = u;
    let h = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < u; g++)
      h += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
    h += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;
    for (let g = 0; g < u; g++)
      h += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
    h += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let g = 0; g < (d + 1) / 2; g++) {
      const b = g * 2;
      if (h += `
           xC = xCCorner + ${b * l};
           `, a === 1) {
        if (b < u && (i % 2 === 1 ? (h += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }
               `, l === 1 && b > 0 ? h += `
                 xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                 ` : h += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                   } else {
                     xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                   }
                   `) : h += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 xC${b} = xTexelC${b};
                 `, b + 1 < u)) {
          const x = i % 2 === 0 ? Kc(l) : l;
          l % 2 === 0 && i % 2 === 1 || l % 2 !== 0 && i % 2 !== 1 ? (h += `
                   xCOffset = xC + imod(pads[1], 2) + ${x};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                     xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${b + 1}.zw = vec2(0.0);
                     }
                     xTexelC${b + 1}Ready = 1;
                   }
                   `, l > 1 ? h += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                     } else {
                      xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                     }
                     ` : h += `
                     xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                     `) : x === 1 ? h += `
                     xC${b + 1} = xTexelC${b};
                     ` : h += `
                     xCOffset = xC + ${x};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                       xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${b + 1}.zw = vec2(0.0);
                       }
                       xTexelC${b + 1}Ready = 1;
                     }

                     xC${b + 1} = xTexelC${b + 1};
                     `;
        }
      } else
        b < u && (i % 2 === 1 ? (h += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                   xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${b + 1}.zw = vec2(0.0);
                   }
                   xTexelC${b + 1}Ready = 1;
                 }

                 xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
               `, b + 1 < u && (h += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                 `)) : (h += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                   xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b + 1}.zw = vec2(0.);
                   }
                   xTexelC${b + 1}Ready = 1;
                 }

                 xC${b} = vec4(
                   xTexelC${b}.xy, xTexelC${b + 1}.xy);
               `, b + 1 < u && (h += `
                   xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                 `)));
      b < u && (h += `
             wTexel = getW(r, ${b}, d1, d2);
             dotProd += xC${b}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${b}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, b + 1 < u && (h += `
               wTexel = getW(r, ${b + 1}, d1, d2);
               dotProd += xC${b + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${b + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    h += `
     }
   `, h += `
     }
   `, h += `
     }
   `;
    let p = "", f = "";
    s && (o ? p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }` : r ? p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }` : p = `vec4 activation(vec4 x) {
           ${s}
         }`, f = "result = activation(result);");
    const m = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${h}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${m}
         ${f}
         setOutput(result);
       }
     `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class uB {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "inputShape", type: "ivec4" },
      { name: "pad", type: "ivec2" },
      { name: "stride", type: "ivec2" },
      { name: "dilation", type: "ivec2" },
      { name: "inChannels", type: "int" },
      { name: "itemsPerBlockRow", type: "int" },
      { name: "outWidth", type: "int" }
    ], this.outputShape = t, this.enableShapeUniforms = Ze(this.outputShape.length);
    const { dataFormat: s } = e, o = Pe(), r = s === "channelsLast", i = r ? 1 : 2, a = r ? 2 : 3, l = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;
    let c = "";
    for (let u = 0; u <= 1; u++)
      for (let d = 0; d <= 1; d++)
        c += `
          blockIndex = rc.z + ${d};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${r}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + d}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + d}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${o.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _c(n, t) {
  const e = n.length;
  return e >= 3 ? t ? [
    ...n.slice(0, -3),
    n[e - 3] * n[e - 2],
    n[e - 1]
    /* channel */
  ] : [
    ...n.slice(0, -3),
    n[e - 3],
    n[e - 2] * n[e - 1]
    /* height * width */
  ] : !t && e === 1 && n[0] > 1 ? [n[0], 1] : null;
}
function TC({ x: n, filter: t, convInfo: e, backend: s, bias: o = null, preluActivationWeights: r = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const l = n.shape, c = s.texData.get(n.dataId), u = e.inChannels, d = l[0] * l[1] * l[2], h = e.outChannels, p = e.dataFormat === "channelsLast", f = !1, m = !1;
  let g;
  const b = [];
  if (r != null) {
    const y = _c(r.shape, p);
    y != null && (r = st({
      inputs: { x: r },
      backend: s,
      attrs: { shape: y }
    }), b.push(r));
  }
  if (o != null) {
    const y = _c(o.shape, p);
    y != null && (o = st({ inputs: { x: o }, backend: s, attrs: { shape: y } }), b.push(o));
  }
  if (!((d === 1 || h === 1) && u > xC) && c.isPacked && p && c.texture != null && l[2] % 2 !== 0 && $t(c.shape.slice(-3), l.slice(-3))) {
    const y = l[0] * l[1] * (l[2] + 1), I = {
      dataId: n.dataId,
      shape: [1, y, e.inChannels],
      dtype: n.dtype
    }, C = c.shape;
    c.shape = c.shape.slice(), c.shape[c.shape.length - 2]++, k(Wc(c.shape, I.shape), () => `packed reshape ${c.shape} to ${I.shape} isn't free`);
    const v = st({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    });
    b.push(v);
    const S = Vc({
      a: I,
      b: v,
      backend: s,
      transposeA: f,
      transposeB: m,
      bias: o,
      activation: a,
      preluActivationWeights: r,
      leakyreluAlpha: i
    }), N = s.texData.get(S.dataId);
    k(N.isPacked, () => "batchMatMul result is expected to be packed"), c.shape = C, N.shape = e.outShape, g = ln({ inputs: { x: S }, backend: s }), g.shape = e.outShape, b.push(S);
  } else {
    const y = e.outHeight * e.outWidth, I = st({
      inputs: { x: n },
      backend: s,
      attrs: {
        shape: p ? [e.batchSize, y, e.inChannels] : [e.batchSize, e.inChannels, y]
      }
    }), C = st({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    }), v = Vc({
      a: p ? I : C,
      b: p ? C : I,
      transposeA: !p,
      transposeB: m,
      backend: s,
      bias: o,
      activation: a,
      preluActivationWeights: r,
      leakyreluAlpha: i
    });
    g = st({ inputs: { x: v }, backend: s, attrs: { shape: e.outShape } }), b.push(I), b.push(C), b.push(v);
  }
  for (const y of b)
    s.disposeIntermediateTensorInfo(y);
  return g;
}
function NC({ x: n, filter: t, convInfo: e, backend: s, bias: o = null, preluActivationWeights: r = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const { filterWidth: l, filterHeight: c, inChannels: u, outWidth: d, outHeight: h, dataFormat: p } = e, f = p === "channelsLast", m = l * c * u, g = h * d, b = [e.batchSize, m, g], x = !0, w = !1, y = [];
  if (r != null) {
    const Z = _c(r.shape, f);
    Z != null && (r = st({
      inputs: { x: r },
      backend: s,
      attrs: { shape: Z }
    }), y.push(r));
  }
  if (o != null) {
    const Z = _c(o.shape, f);
    Z != null && (o = st({ inputs: { x: o }, backend: s, attrs: { shape: Z } }), y.push(o));
  }
  const I = st({
    inputs: { x: t },
    backend: s,
    attrs: { shape: [1, m, X(t.shape) / m] }
  });
  y.push(I);
  const C = new uB(b, e), v = [
    n.shape,
    [e.padInfo.top, e.padInfo.left],
    [e.strideHeight, e.strideWidth],
    [e.dilationHeight, e.dilationWidth],
    [e.inChannels],
    [e.filterWidth * e.inChannels],
    [e.outWidth]
  ], S = s.runWebGLProgram(C, [n], "float32", v), N = st({ inputs: { x: S }, backend: s, attrs: { shape: b } });
  y.push(S), y.push(N);
  const R = o != null, $ = r != null, F = a === "leakyrelu", W = a ? ji(a, !0) : null, _ = new bC(f ? N.shape : I.shape, f ? I.shape : N.shape, f ? [e.batchSize, g, e.outChannels] : [e.batchSize, e.outChannels, g], x, w, R, W, $, F), A = f ? [N, I] : [I, N];
  if (o && A.push(o), $ && A.push(r), F) {
    const Z = s.makeTensorInfo([], "float32", zs(i, "float32"));
    A.push(Z), y.push(Z);
  }
  const O = s.runWebGLProgram(_, A, "float32"), K = st({ inputs: { x: O }, backend: s, attrs: { shape: e.outShape } });
  y.push(O);
  for (const Z of y)
    s.disposeIntermediateTensorInfo(Z);
  return K;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s, d = Ws(l), h = $e(o.shape, r.shape, i, c, a, u, !1, d);
  let p;
  if (h.filterHeight === 1 && h.filterWidth === 1 && h.dilationHeight === 1 && h.dilationWidth === 1 && h.strideHeight === 1 && h.strideWidth === 1 && (h.padInfo.type === "SAME" || h.padInfo.type === "VALID"))
    p = TC({ x: o, filter: r, convInfo: h, backend: e });
  else if (h.strideWidth <= 2 && d === "channelsLast" && V().getBool("WEBGL_EXP_CONV")) {
    const m = new SC(h), g = [
      [h.padInfo.top, h.padInfo.left],
      [h.strideHeight, h.strideWidth],
      [h.dilationHeight, h.dilationWidth],
      [h.inHeight, h.inWidth]
    ];
    p = e.runWebGLProgram(m, [o, r], "float32", g);
  } else if (V().getBool("WEBGL_CONV_IM2COL"))
    p = NC({ x: o, filter: r, convInfo: h, backend: e });
  else {
    const m = new kC(h);
    p = e.runWebGLProgram(m, [o, r], "float32");
  }
  const f = st({ inputs: { x: p }, backend: e, attrs: { shape: h.outShape } });
  return e.disposeIntermediateTensorInfo(p), f;
}
const hB = {
  kernelName: su,
  backendName: "webgl",
  kernelFunc: dB
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class pB {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, o = t.padInfo.top, r = t.padInfo.left, i = t.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${o};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${r};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class fB {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, o = t.strideHeight, r = t.strideWidth, i = t.dataFormat === "channelsLast", a = e - 1 - t.padInfo.top, l = s - 1 - t.padInfo.left, c = i ? 1 : 2, u = i ? 2 : 3, d = i ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${d}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class mB {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideDepth, s = t.strideHeight, o = t.strideWidth, r = t.padInfo.front, i = t.padInfo.top, a = t.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${r};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${o} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class gB {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, o = t.filterWidth, r = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = e - 1 - t.padInfo.front, c = s - 1 - t.padInfo.top, u = o - 1 - t.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${r}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${o}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${o} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s, d = Ws(l), h = $e(o.shape, u, i, 1, a, c, !1, d), p = new pB(h);
  return e.runWebGLProgram(p, [o, r], "float32");
}
const xB = {
  kernelName: Pp,
  backendName: "webgl",
  kernelFunc: bB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s, d = Ws(c), h = $e(i, r.shape, a, 1, l, u, !1, d), p = new fB(h);
  return e.runWebGLProgram(p, [o, r], "float32");
}
const wB = {
  kernelName: ou,
  backendName: "webgl",
  kernelFunc: yB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l } = s, c = mo(o.shape, r.shape, i, l, a), u = new cB(c);
  return e.runWebGLProgram(u, [o, r], "float32");
}
const CB = {
  kernelName: ru,
  backendName: "webgl",
  kernelFunc: IB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, filterShape: l } = s, c = mo(o.shape, l, i, 1, a), u = new mB(c);
  return e.runWebGLProgram(u, [o, r], "float32");
}
const kB = {
  kernelName: Zp,
  backendName: "webgl",
  kernelFunc: vB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { pad: i, strides: a, inputShape: l } = s, c = mo(l, r.shape, a, 1, i), u = new gB(c);
  return e.runWebGLProgram(u, [o, r], "float32");
}
const TB = {
  kernelName: Kp,
  backendName: "webgl",
  kernelFunc: SB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NB = di + `
  return cos(x);
`, RB = Rt({ opSnippet: NB }), $B = {
  kernelName: ya,
  backendName: "webgl",
  kernelFunc: RB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EB = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, GB = Rt({ opSnippet: EB }), LB = {
  kernelName: wa,
  backendName: "webgl",
  kernelFunc: GB
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DB {
  constructor(t, e, s, o, r) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [i, a, l, c] = t, [u] = e, [d, h] = s;
    this.outputShape = [u, d, h, c];
    const p = o === "bilinear" ? 1 : 0, [f, m] = [`${a - 1}.0`, `${l - 1}.0`], [g, b, x] = d > 1 ? [
      `${(a - 1) / (d - 1)}`,
      "(y2-y1) * height_ratio",
      `y1*${f} + float(y)*(height_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (y1+y2) * ${f}`
    ], [w, y, I] = h > 1 ? [
      `${(l - 1) / (h - 1)}`,
      "(x2-x1) * width_ratio",
      `x1*${m} + float(x)*(width_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (x1+x2) * ${m}`
    ];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${b};
        float width_scale = ${y};

        float in_y = ${x};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${r}));
          return;
        }
        float in_x = ${I};
        if( in_x < 0.0 || in_x > ${m} ) {
          setOutput(float(${r}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MB = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { image: o, boxes: r, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, u = new DB(o.shape, r.shape, a, l, c);
  return e.runWebGLProgram(u, [o, r, i], "float32");
}, zB = {
  kernelName: Hp,
  backendName: "webgl",
  kernelFunc: MB
};
var qi;
(function(n) {
  n.Prod = "*", n.Sum = "+";
})(qi || (qi = {}));
class rb {
  constructor(t, e, s, o) {
    this.op = t, this.outputShape = e, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const r = this.outputShape.length, i = this.op === qi.Prod ? "1.0" : "0.0", a = s ? i : `getX(${ib(r, "coords", this.op)})`, l = this.outputShape[this.outputShape.length - 1];
    let c = "", u = "";
    s ? (c = o ? `end != ${l - 1}` : "end != 0", u = o ? "end + 1" : "end - 1") : (c = o ? `end + pow2 < ${l}` : "end >= pow2", u = o ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${Kt(r)} coords = getOutputCoords();
        int end = ${ab(r, "coords", this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${ab(r, "coords", this.op)} = idx;
          val ${this.op}= getX(${ib(r, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function ib(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.x, ${t}.y`;
  if (n === 3)
    return `${t}.x, ${t}.y, ${t}.z`;
  if (n === 4)
    return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
function ab(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.y`;
  if (n === 3)
    return `${t}.z`;
  if (n === 4)
    return `${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RC(n, t, e, s, o, r) {
  const i = t.shape.length, a = ne([s], i);
  let l = t;
  a != null && (l = Oe({ inputs: { x: t }, backend: e, attrs: { perm: a } }));
  const c = ce(1, i)[0];
  if (c !== i - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${s}`);
  const u = l.shape[c];
  let d = ln({ inputs: { x: l }, backend: e });
  for (let h = 0; h <= Math.ceil(Math.log2(u)) - 1; h++) {
    const p = new rb(n, l.shape, !1, r), f = [[h]], m = d;
    d = e.runWebGLProgram(p, [d], d.dtype, f), e.disposeIntermediateTensorInfo(m);
  }
  if (o) {
    const h = new rb(n, l.shape, o, r), p = d;
    d = e.runWebGLProgram(h, [d], d.dtype), e.disposeIntermediateTensorInfo(p);
  }
  if (a != null) {
    const h = go(a), p = Oe({ inputs: { x: d }, backend: e, attrs: { perm: h } });
    return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(l), p;
  }
  return d;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  return RC(qi.Prod, o, e, r, i, a);
}
const WB = {
  kernelName: Bp,
  backendName: "webgl",
  kernelFunc: FB
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  return RC(qi.Sum, o, e, r, i, a);
}
const _B = {
  kernelName: iu,
  backendName: "webgl",
  kernelFunc: VB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i, binaryOutput: a } = s;
  if (o.shape.length === 1) {
    const l = e.readSync(o.dataId), c = e.readSync(r.dataId), u = lC(l, c, r.dtype, r.shape, i);
    return e.makeTensorInfo([i], r.dtype, u);
  } else if (o.shape.length === 2) {
    const l = e.bufferSync(o), c = e.bufferSync(r), u = JX(l, c, i, a);
    return e.makeTensorInfo(u.shape, r.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`);
}
const OB = {
  kernelName: Up,
  backendName: "webgl",
  kernelFunc: AB
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class XB {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = t, this.blockSize = e, this.dataFormat = s, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockSize: r, dataFormat: i } = s, a = o.shape[0], l = i === "NHWC" ? o.shape[1] : o.shape[2], c = i === "NHWC" ? o.shape[2] : o.shape[3], u = i === "NHWC" ? o.shape[3] : o.shape[1], d = l * r, h = c * r, p = u / (r * r), f = i === "NHWC" ? [a, d, h, p] : [a, p, d, h], m = new XB(f, r, i);
  return e.runWebGLProgram(m, [o], o.dtype);
}
const ZB = {
  kernelName: Yp,
  backendName: "webgl",
  kernelFunc: PB
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $C {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = Ze(this.outputShape.length);
    const i = t.filterHeight, a = t.filterWidth, l = t.outChannels / t.inChannels;
    let c = "", u = "";
    s && (o ? c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : r ? c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : c = `
          float activation(float x) {
            ${s}
          }
        `, u = "result = activation(result);");
    const d = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${d}
        ${u}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EC {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = Ze(this.outputShape.length);
    const i = t.outChannels / t.inChannels, a = t.padInfo.left, l = t.strideWidth, c = t.dilationWidth, u = t.filterHeight, d = t.filterWidth, h = d;
    let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let b = 0; b < d; b++)
      p += `
          vec4 xTexelC${b * 2};
          int xTexelC${b * 2}Ready;
          vec4 xTexelC${b * 2 + 1};
          int xTexelC${b * 2 + 1}Ready;
          vec4 xC${b};`;
    p += `
    for (int r = 0; r < ${u}; r++) {
      `;
    for (let b = 0; b < d; b++)
      p += `
          xTexelC${b * 2} = vec4(0.0);
          xTexelC${b * 2}Ready = 0;
          xTexelC${b * 2 + 1} = vec4(0.0);
          xTexelC${b * 2 + 1}Ready = 0;
          xC${b} = vec4(0.0);`;
    p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let b = 0; b < (h + 1) / 2; b++) {
      const x = b * 2;
      if (p += `
          xC = xCCorner + ${x * c};
          `, l === 1) {
        if (x < d && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }
              `, c === 1 && x > 0 ? p += `
                xC${x} = vec4(xTexelC${x - 2}.zw, xTexelC${x}.xy);
                ` : p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                  } else {
                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                  }
                  `) : p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xC${x} = xTexelC${x};
                `, x + 1 < d)) {
          const w = a % 2 === 0 ? Kc(c) : c;
          c % 2 === 0 && a % 2 === 1 || c % 2 !== 0 && a % 2 !== 1 ? (p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                    xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${x + 1}.zw = vec2(0.0);
                    }
                    xTexelC${x + 1}Ready = 1;
                  }
                  `, c > 1 ? p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${x + 1} = vec4(previous.zw, xTexelC${x + 1}.xy);
                    } else {
                     xC${x + 1} = vec4(0.0, 0.0, xTexelC${x + 1}.xy);
                    }
                    ` : p += `
                    xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.xy);
                    `) : w === 1 ? p += `
                    xC${x + 1} = xTexelC${x};
                    ` : p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                      xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${x + 1}.zw = vec2(0.0);
                      }
                      xTexelC${x + 1}Ready = 1;
                    }

                    xC${x + 1} = xTexelC${x + 1};
                    `;
        }
      } else
        x < d && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x + 1}Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.0);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
              `, x + 1 < d && (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${x + 1} = vec4(xTexelC${x + 1}.xy, final.xy);
                `)) : (p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(
                  xTexelC${x}.xy, xTexelC${x + 1}.xy);
              `, x + 1 < d && (p += `
                  xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
                `)));
      x < d && (p += `
            wTexel = getW(r, ${x}, d1, q);
            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);
          `, x + 1 < d && (p += `
              wTexel = getW(r, ${x + 1}, d1, q);
              dotProd += xC${x + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    p += `
    }
  `, p += `
      }
    `;
    let f = "", m = "";
    s && (o ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : r ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : f = `vec4 activation(vec4 x) {
          ${s}
        }`, m = "result = activation(result);");
    const g = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${m}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  let u = l;
  u == null && (u = [1, 1]), k(Fe(i, u), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  const d = $e(
    o.shape,
    r.shape,
    i,
    u,
    a,
    c,
    !0
    /* depthwise */
  );
  let h;
  V().getBool("WEBGL_PACK_DEPTHWISECONV") && d.strideWidth <= 2 && d.outChannels / d.inChannels === 1 ? h = new EC(d) : h = new $C(d);
  const p = [
    [d.padInfo.top, d.padInfo.left],
    [d.strideHeight, d.strideWidth],
    [d.dilationHeight, d.dilationWidth],
    [d.inHeight, d.inWidth]
  ];
  return e.runWebGLProgram(h, [o, r], "float32", p);
}
const BB = {
  kernelName: au,
  backendName: "webgl",
  kernelFunc: KB
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class HB {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, o = t.padInfo.top, r = t.padInfo.left, i = t.outChannels / t.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${o};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${r};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class UB {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, o = t.strideHeight, r = t.strideWidth, i = e - 1 - t.padInfo.top, a = s - 1 - t.padInfo.left, l = t.outChannels / t.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s, d = $e(
    o.shape,
    u,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), h = new HB(d);
  return e.runWebGLProgram(h, [o, r], "float32");
}
const QB = {
  kernelName: Qp,
  backendName: "webgl",
  kernelFunc: YB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s, d = $e(
    u,
    r.shape,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), h = new UB(d);
  return e.runWebGLProgram(h, [o, r], "float32");
}
const JB = {
  kernelName: jp,
  backendName: "webgl",
  kernelFunc: jB
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qB {
  constructor(t) {
    this.variableNames = ["X"], this.outputShape = [t, t], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tH(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, o = [...s.shape, ...s.shape], r = X(s.shape), i = st({ inputs: { x: s }, backend: e, attrs: { shape: [r] } }), a = new qB(r), l = e.runWebGLProgram(a, [i], i.dtype), c = st({ inputs: { x: l }, backend: e, attrs: { shape: o } });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(l), c;
}
const eH = {
  kernelName: Cx,
  backendName: "webgl",
  kernelFunc: tH
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class nH {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const { inHeight: e, inWidth: s, padInfo: o, strideHeight: r, strideWidth: i, filterHeight: a, filterWidth: l, dilationHeight: c, dilationWidth: u } = t, { top: d, left: h } = o;
    this.userCode = `
      const ivec2 strides = ivec2(${r}, ${i});
      const ivec2 pads = ivec2(${d}, ${h});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l } = s, c = al(o.shape, r.shape, i, a, "NHWC", l);
  let u;
  const d = new nH(c);
  u = e.runWebGLProgram(d, [o, r], "float32");
  const h = st({ inputs: { x: u }, backend: e, attrs: { shape: c.outShape } });
  return e.disposeIntermediateTensorInfo(u), h;
}
const oH = {
  kernelName: lu,
  backendName: "webgl",
  kernelFunc: sH
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: o } = s, r = t, { allDims: i, summedDims: a, idDims: l } = zm(o, r.length);
  Wm(i.length, l, r);
  const { path: c, steps: u } = Vm(a, l), d = u.length;
  let h = null, p = i.length;
  const f = [];
  for (let m = 0; m < d; ++m) {
    for (const g of u[m]) {
      const { permutationIndices: b, expandDims: x } = Fm(p, l[g]);
      let w;
      _m(b) ? w = r[g] : (w = Oe({ inputs: { x: r[g] }, backend: e, attrs: { perm: b } }), f.push(w));
      const y = w.shape.slice();
      for (let I = 0; I < x.length; ++I)
        y.splice(x[I], 0, 1);
      $t(w.shape, y) || (w = st({ inputs: { x: w }, backend: e, attrs: { shape: y } }), f.push(w)), h === null ? h = w : (h = Ng({ inputs: { a: w, b: h }, backend: e }), f.push(h));
    }
    m < d - 1 && (c[m] >= 0 && (h = Sd({
      inputs: { x: h },
      backend: e,
      attrs: {
        axis: c[m] - (i.length - p),
        keepDims: !1
      }
    }), f.push(h)), p--);
  }
  for (const m of f)
    m !== h && e.disposeIntermediateTensorInfo(m);
  return h;
}
const iH = {
  kernelName: vx,
  backendName: "webgl",
  kernelFunc: rH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aH = "return (x >= 0.0) ? x : (exp(x) - 1.0);", lH = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, cH = Rt({ opSnippet: aH, packedOpSnippet: lH }), uH = {
  kernelName: Ca,
  backendName: "webgl",
  kernelFunc: cH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dH = "return (b >= 1.0) ? a : a * (b + 1.0);", hH = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, pH = (n) => {
  const { inputs: t, backend: e } = n, { dy: s, y: o } = t, r = V().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Rl(hH, s.shape, o.shape) : new Br(dH, s.shape, o.shape);
  return e.runWebGLProgram(r, [s, o], s.dtype);
}, fH = {
  kernelName: Jp,
  backendName: "webgl",
  kernelFunc: pH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mH = `
  return vec4(equal(a, b));
`, gH = "return float(a == b);", bH = Ge({
  opSnippet: gH,
  packedOpSnippet: mH,
  dtype: "bool",
  cpuKernelImpl: nP
}), xH = {
  kernelName: cu,
  backendName: "webgl",
  kernelFunc: bH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yH = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${Rm};
  float a1 = ${$m};
  float a2 = ${Em};
  float a3 = ${Gm};
  float a4 = ${Lm};
  float a5 = ${Dm};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, wH = Rt({ opSnippet: yH }), IH = {
  kernelName: va,
  backendName: "webgl",
  kernelFunc: wH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CH = di + `
  return exp(x);
`, vH = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, GC = Rt({
  opSnippet: CH,
  packedOpSnippet: vH,
  cpuKernelImpl: sP,
  dtype: "float32"
}), kH = {
  kernelName: ka,
  backendName: "webgl",
  kernelFunc: GC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xp(n) {
  const { inputs: t, attrs: e, backend: s } = n, { dim: o } = e, { input: r } = t, i = r.shape.length, a = r.shape.slice();
  let l = o;
  return o < 0 && (k(-(i + 1) <= o, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + o + 1), a.splice(l, 0, 1), st({ inputs: { x: r }, backend: s, attrs: { shape: a } });
}
const SH = {
  kernelName: uu,
  backendName: "webgl",
  kernelFunc: xp
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const lb = "return exp(x) - 1.0;", TH = Rt({ opSnippet: lb, packedOpSnippet: lb, cpuKernelImpl: oP }), NH = {
  kernelName: Sa,
  backendName: "webgl",
  kernelFunc: TH
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cb {
  constructor(t, e, s) {
    this.variableNames = ["real", "imag"];
    const o = e[1];
    this.outputShape = e;
    const r = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, i = s ? `${o}.0` : "1.0";
    let a;
    if (t === "real")
      a = "return real * expR - imag * expI;";
    else if (t === "imag")
      a = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);
    this.userCode = `
      const float exponentMultiplier = ${r};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${o});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${o}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LC(n, t, e) {
  const s = e.texData.get(n.dataId), o = X(n.shape), r = n.shape[n.shape.length - 1], i = o / r, a = st({ inputs: { x: n }, backend: e, attrs: { shape: [i, r] } }), l = a.shape, c = new cb("real", l, t), u = new cb("imag", l, t), d = [
    {
      dataId: s.complexTensorInfos.real.dataId,
      dtype: s.complexTensorInfos.real.dtype,
      shape: l
    },
    {
      dataId: s.complexTensorInfos.imag.dataId,
      dtype: s.complexTensorInfos.imag.dtype,
      shape: l
    }
  ], h = e.runWebGLProgram(c, d, "float32"), p = e.runWebGLProgram(u, d, "float32"), f = Co({ inputs: { real: h, imag: p }, backend: e });
  e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(p);
  const m = st({ inputs: { x: f }, backend: e, attrs: { shape: n.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(f), m;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RH(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return LC(s, !1, e);
}
const $H = {
  kernelName: qp,
  backendName: "webgl",
  kernelFunc: RH
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EH {
  constructor(t, e) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = t, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function El(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: o } = e;
  let { dtype: r } = e;
  if (r = r || jr(o), r === "string") {
    const i = ae(r, X(s));
    return i.fill(o), t.makeTensorInfo(s, r, i);
  } else {
    const i = new EH(s, o), a = [[o]];
    return t.runWebGLProgram(i, [], r, a);
  }
}
const GH = {
  kernelName: tf,
  backendName: "webgl",
  kernelFunc: El
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LH {
  constructor(t) {
    this.variableNames = ["Image"], this.outputShape = [];
    const e = t[2];
    this.outputShape = t, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DH = {
  kernelName: ef,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { image: e } = n, s = t, o = new LH(e.shape);
    return s.runWebGLProgram(o, [e], e.dtype);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ub = "return floor(x);", MH = Rt({ opSnippet: ub, packedOpSnippet: ub, cpuKernelImpl: rP }), zH = {
  kernelName: Ta,
  backendName: "webgl",
  kernelFunc: MH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FH = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, WH = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, VH = Ge({ opSnippet: FH, packedOpSnippet: WH, dtype: "int32" }), _H = {
  kernelName: Na,
  backendName: "webgl",
  kernelFunc: VH
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AH {
  constructor(t) {
    this.variableNames = ["A"];
    const e = Pe(), [s, o] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}.0, ${s}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OH {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0;
    const e = Pe(), [s, o] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${o}.0, ${s}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XH = {
  kernelName: Gh,
  backendName: "webgl",
  kernelFunc: PH
};
let wr, Yd = V().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function PH(n) {
  const { inputs: t, backend: e, attrs: s } = n;
  let { pixels: o } = t;
  const { numChannels: r } = s, i = typeof HTMLVideoElement < "u" && o instanceof HTMLVideoElement, a = typeof HTMLImageElement < "u" && o instanceof HTMLImageElement, [l, c] = i ? [
    o.videoWidth,
    o.videoHeight
  ] : [o.width, o.height], u = [c, l], d = [c, l, r];
  if (a || i) {
    const m = V().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (wr == null || m !== Yd) && (Yd = m, wr = document.createElement("canvas").getContext("2d", { willReadFrequently: Yd })), wr.canvas.width = l, wr.canvas.height = c, wr.drawImage(o, 0, 0, l, c), o = wr.canvas;
  }
  const h = e.makeTensorInfo(u, "int32");
  e.texData.get(h.dataId).usage = gn.PIXELS, e.gpgpu.uploadPixelDataToTexture(e.getTexture(h.dataId), o);
  const p = V().getBool("WEBGL_PACK") ? new OH(d) : new AH(d), f = e.runWebGLProgram(p, [h], "int32");
  return e.disposeData(h.dataId), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: d, dimRoundingMode: h, activation: p, leakyreluAlpha: f } = s, m = Ws(u), g = $e(o.shape, r.shape, l, d, c, h, !1, m);
  let b;
  const x = [], w = i != null, y = a != null, I = p === "leakyrelu", C = () => {
    const S = [o, r], N = (R, $) => {
      if ($ === "NCHW" && R.shape.length === 1 && R.shape[0] !== 1) {
        const F = st({
          inputs: { x: R },
          backend: e,
          attrs: { shape: [R.shape[0], 1, 1] }
        });
        return x.push(F), F;
      }
      return R;
    };
    if (w && S.push(N(i, u)), y && S.push(N(a, u)), I) {
      const R = e.makeTensorInfo([], "float32", zs(f, "float32"));
      S.push(R), x.push(R);
    }
    return S;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    b = TC({
      x: o,
      filter: r,
      convInfo: g,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else if (g.strideWidth <= 2 && m === "channelsLast" && V().getBool("WEBGL_EXP_CONV")) {
    const S = p ? ji(p, !0) : null, N = new SC(g, w, S, y, I), R = [
      [g.padInfo.top, g.padInfo.left],
      [g.strideHeight, g.strideWidth],
      [g.dilationHeight, g.dilationWidth],
      [g.inHeight, g.inWidth]
    ], $ = C();
    b = e.runWebGLProgram(N, $, "float32", R);
  } else if (V().getBool("WEBGL_CONV_IM2COL"))
    b = NC({
      x: o,
      filter: r,
      convInfo: g,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else {
    const S = p ? ji(p, !1) : null, N = new kC(g, w, S, y, I), R = C();
    b = e.runWebGLProgram(N, R, "float32");
  }
  const v = st({ inputs: { x: b }, backend: e, attrs: { shape: g.outShape } });
  return x.push(b), x.forEach((S) => e.disposeIntermediateTensorInfo(S)), v;
}
const KH = {
  kernelName: pc,
  backendName: "webgl",
  kernelFunc: ZH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dilations: u, dimRoundingMode: d, activation: h, leakyreluAlpha: p } = s, f = [];
  let m = u;
  m == null && (m = [1, 1]), k(Fe(l, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);
  const g = $e(
    o.shape,
    r.shape,
    l,
    m,
    c,
    d,
    !0
    /* depthwise */
  ), b = V().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, x = h ? ji(h, b) : null, w = [o, r], y = i != null, I = a != null, C = h === "leakyrelu";
  if (y && w.push(i), I && w.push(a), C) {
    const R = e.makeTensorInfo([], "float32", zs(p, "float32"));
    w.push(R), f.push(R);
  }
  let v;
  b ? v = new EC(g, y, x, I, C) : v = new $C(g, y, x, I, C);
  const S = [
    [g.padInfo.top, g.padInfo.left],
    [g.strideHeight, g.strideWidth],
    [g.dilationHeight, g.dilationWidth],
    [g.inHeight, g.inWidth]
  ], N = e.runWebGLProgram(v, w, "float32", S);
  return f.forEach((R) => e.disposeIntermediateTensorInfo(R)), N;
}
const HH = {
  kernelName: Mx,
  backendName: "webgl",
  kernelFunc: BH
};
class UH {
  constructor(t, e, s, o) {
    this.sliceDim = t, this.strides = e, this.paramsShape = o, this.variableNames = ["x", "indices"], this.outputShape = s;
    const r = Kt(s.length);
    let i = `
    int index;`;
    for (let a = 0; a < this.sliceDim; a++)
      i += `
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;
    this.userCode = `
         void main() {
          ${r} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YH(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: o } = t, r = o.shape, i = r[r.length - 1], a = X(s.shape), [l, c, u, d] = nd(s, o), h = st({ inputs: { x: o }, backend: e, attrs: { shape: [c, i] } }), p = st({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [X(s.shape) / u, u] }
  });
  if (e.shouldExecuteOnCPU([s, o]) || s.dtype === "string") {
    const b = e.readSync(o.dataId), x = e.bufferSync(s), w = iP(b, x, s.dtype, c, i, u, d, s.shape, a);
    return e.makeTensorInfo(l, s.dtype, w.values);
  }
  const f = new UH(i, d, [c, u], s.shape), m = e.runWebGLProgram(f, [p, h], p.dtype), g = st({ inputs: { x: m }, backend: e, attrs: { shape: l } });
  return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(m), g;
}
const QH = {
  kernelName: kx,
  backendName: "webgl",
  kernelFunc: YH
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class jH {
  constructor(t, e) {
    this.variableNames = ["A", "indices"], this.outputShape = e, this.rank = e.length;
    const s = Kt(this.rank), o = JH(t);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${o}));
      }
    `;
  }
}
function JH(n, t) {
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let o = 0; o < n.length; o++)
    o === 2 ? s.push("index") : s.push(`${e[o]}`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, indices: r } = t, { axis: i, batchDims: a } = s, l = Ct(i, o.shape)[0];
  if (V().get("DEBUG")) {
    const x = e.readSync(r.dataId), w = o.shape[l];
    for (let y = 0; y < x.length; ++y) {
      const I = x[y];
      k(I <= w - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${w - 1}]`);
    }
  }
  const c = Om(o, r, l, a), u = X(r.shape), d = [], h = st({
    inputs: { x: o },
    backend: e,
    attrs: {
      shape: [
        c.batchSize,
        c.outerSize,
        c.dimSize,
        c.sliceSize
      ]
    }
  }), p = st({
    inputs: { x: r },
    backend: e,
    attrs: { shape: [c.batchSize, u / c.batchSize] }
  });
  d.push(h), d.push(p);
  const f = [
    c.batchSize,
    c.outerSize,
    u / c.batchSize,
    c.sliceSize
  ];
  if (e.shouldExecuteOnCPU([o, r]) || o.dtype === "string") {
    const x = e.bufferSync(p), w = e.bufferSync(h), y = aP(w, x, f);
    return d.forEach((I) => e.disposeIntermediateTensorInfo(I)), e.makeTensorInfo(c.outputShape, y.dtype, y.values);
  }
  const m = new jH(h.shape, f), g = e.runWebGLProgram(m, [h, p], h.dtype);
  d.push(g);
  const b = st({ inputs: { x: g }, backend: e, attrs: { shape: c.outputShape } });
  return d.forEach((x) => e.disposeIntermediateTensorInfo(x)), b;
}
const qH = {
  kernelName: hu,
  backendName: "webgl",
  kernelFunc: DC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t9 = "return float(a > b);", e9 = `
  return vec4(greaterThan(a, b));
`, n9 = Ge({
  opSnippet: t9,
  packedOpSnippet: e9,
  cpuKernelImpl: lP,
  dtype: "bool"
}), s9 = {
  kernelName: pu,
  backendName: "webgl",
  kernelFunc: n9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o9 = "return float(a >= b);", r9 = `
  return vec4(greaterThanEqual(a, b));
`, i9 = Ge({
  opSnippet: o9,
  packedOpSnippet: r9,
  dtype: "bool",
  cpuKernelImpl: cP
}), a9 = {
  kernelName: Ra,
  backendName: "webgl",
  kernelFunc: i9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l9(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return LC(s, !0, e);
}
const c9 = {
  kernelName: nf,
  backendName: "webgl",
  kernelFunc: l9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u9 = "return float(!isnan(x) && !isinf(x));", d9 = Rt({ opSnippet: u9, dtype: "bool" }), h9 = {
  kernelName: Ea,
  backendName: "webgl",
  kernelFunc: d9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p9 = "return float(isinf(x));", f9 = Rt({ opSnippet: p9, dtype: "bool" }), m9 = {
  kernelName: Ga,
  backendName: "webgl",
  kernelFunc: f9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const g9 = "return float(isnan(x));", b9 = Rt({ opSnippet: g9, dtype: "bool" }), x9 = {
  kernelName: La,
  backendName: "webgl",
  kernelFunc: b9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const y9 = "return float(a < b);", w9 = `
  return vec4(lessThan(a, b));
`, I9 = Ge({
  opSnippet: y9,
  packedOpSnippet: w9,
  cpuKernelImpl: uP,
  dtype: "bool"
}), C9 = {
  kernelName: mu,
  backendName: "webgl",
  kernelFunc: I9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const v9 = "return float(a <= b);", k9 = `
  return vec4(lessThanEqual(a, b));
`, S9 = Ge({
  opSnippet: v9,
  packedOpSnippet: k9,
  cpuKernelImpl: dP,
  dtype: "bool"
}), T9 = {
  kernelName: gu,
  backendName: "webgl",
  kernelFunc: S9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N9(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: o, num: r } = e, i = hP(s, o, r);
  return t.makeTensorInfo([i.length], "float32", i);
}
const R9 = {
  kernelName: Sx,
  backendName: "webgl",
  kernelFunc: N9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $9 = di + `
  return x < 0.0 ? 0./0. : log(x);
`, E9 = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, G9 = Rt({ opSnippet: $9, packedOpSnippet: E9, cpuKernelImpl: pP }), L9 = {
  kernelName: Da,
  backendName: "webgl",
  kernelFunc: G9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D9 = di + `
  return log(1.0 + x);
`, M9 = Rt({ opSnippet: D9 }), z9 = {
  kernelName: Ma,
  backendName: "webgl",
  kernelFunc: M9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F9 = "return float(a >= 1.0 && b >= 1.0);", W9 = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, V9 = Ge({
  opSnippet: F9,
  packedOpSnippet: W9,
  dtype: "bool"
}), _9 = {
  kernelName: bu,
  backendName: "webgl",
  kernelFunc: V9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A9 = "return float(!(x >= 1.0));", O9 = Rt({ opSnippet: A9 }), X9 = {
  kernelName: xu,
  backendName: "webgl",
  kernelFunc: O9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P9 = "return float(a >= 1.0 || b >= 1.0);", Z9 = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, K9 = Ge({ opSnippet: P9, packedOpSnippet: Z9, dtype: "bool" }), B9 = {
  kernelName: yu,
  backendName: "webgl",
  kernelFunc: K9
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class H9 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["x"], this.outputShape = [];
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${o}) * sum`;
    r === 0.5 ? l = `inversesqrt(${c})` : r === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class U9 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${o}) * sum`;
    r === 0.5 ? l = `inversesqrt(${c})` : r === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y9 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { depthRadius: r, bias: i, alpha: a, beta: l } = s, c = V().getBool("WEBGL_PACK_NORMALIZATION") ? new U9(o.shape, r, i, a, l) : new H9(o.shape, r, i, a, l);
  return e.runWebGLProgram(c, [o], o.dtype);
}, Q9 = {
  kernelName: wu,
  backendName: "webgl",
  kernelFunc: Y9
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class j9 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t, this.depth = t[3], this.depthRadius = e, this.bias = s, this.alpha = o, this.beta = r, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${o}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${o})
                * float(${r})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${r});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J9 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, y: r, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s, d = new j9(o.shape, a, l, c, u);
  return e.runWebGLProgram(d, [o, r, i], o.dtype);
}, q9 = {
  kernelName: of,
  backendName: "webgl",
  kernelFunc: J9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tU(n, t, e, s) {
  const o = X(t), i = X(n.shape) / o, a = st({ inputs: { x: n }, attrs: { shape: [i, o] }, backend: s }), l = gr(a, n.dtype, "max", s), c = st({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reductionIndices: r, keepDims: i } = s, a = o.shape.length, l = Ct(r, o.shape);
  let c = l;
  const u = ne(c, a), d = u != null, h = e.shouldExecuteOnCPU([o]);
  let p = o;
  if (d) {
    if (h) {
      const w = e.texData.get(p.dataId).values, y = new Array(a);
      for (let v = 0; v < y.length; v++)
        y[v] = o.shape[u[v]];
      const I = Sg(w, o.shape, o.dtype, u, y);
      p = e.makeTensorInfo(y, o.dtype);
      const C = e.texData.get(p.dataId);
      C.values = I;
    } else
      p = kd(o, u, e);
    c = ce(c.length, a);
  }
  Ee("max", c, a);
  const [f, m] = Ce(p.shape, c);
  let g = f;
  i && (g = le(f, l));
  let b;
  if (h) {
    const w = e.texData.get(p.dataId).values, y = fP(w, X(m), g, o.dtype);
    b = e.makeTensorInfo(g, o.dtype);
    const I = e.texData.get(b.dataId);
    I.values = y;
  } else
    b = tU(p, m, g, e);
  return d && e.disposeIntermediateTensorInfo(p), b;
}
const eU = {
  kernelName: Iu,
  backendName: "webgl",
  kernelFunc: MC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nU = Tg + `
  return max(a, b);
`, sU = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Nl + `
  return result;
`, oU = Ge({
  opSnippet: nU,
  packedOpSnippet: sU,
  cpuKernelImpl: mP
}), rU = {
  kernelName: za,
  backendName: "webgl",
  kernelFunc: oU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  Sl(o, "maxPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  k(Fe(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = An(o.shape, r, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && $t(u.inShape, u.outShape))
    return ln({ inputs: { x: o }, backend: e });
  const d = new Ji(u, "max", !1);
  return e.runWebGLProgram(d, [o], o.dtype);
}
const aU = {
  kernelName: Cu,
  backendName: "webgl",
  kernelFunc: iU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dataFormat: l, dimRoundingMode: c } = s, u = [1, 1, 1], d = Fs(o.shape, r, i, u, a, c, l), h = new Rg(d, "max", !1);
  return e.runWebGLProgram(h, [o], o.dtype);
}
const cU = {
  kernelName: vu,
  backendName: "webgl",
  kernelFunc: lU
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class uU {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideHeight, s = t.strideWidth, o = t.dilationHeight, r = t.effectiveFilterHeight, i = t.effectiveFilterWidth, a = r - 1 - t.padInfo.top, l = i - 1 - t.padInfo.left, c = r * i - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${r};
          wR += ${o}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class dU {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideDepth, s = t.strideHeight, o = t.strideWidth, r = t.dilationDepth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterDepth, c = t.effectiveFilterHeight, u = t.effectiveFilterWidth, d = l - 1 - t.padInfo.front, h = c - 1 - t.padInfo.top, p = u - 1 - t.padInfo.left, f = l * c * u - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${d}, ${h}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${r}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${o}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, d = [1, 1, 1], h = Fs(i.shape, a, l, d, c, u), p = new Rg(
    h,
    "max",
    !0
    /* get positions */
  ), f = e.runWebGLProgram(p, [i], i.dtype), m = new dU(h), g = e.runWebGLProgram(m, [o, f], i.dtype);
  return e.disposeIntermediateTensorInfo(f), g;
}
const pU = {
  kernelName: af,
  backendName: "webgl",
  kernelFunc: hU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r, output: i } = t, a = r;
  Sl([r, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: d } = s, h = An(a.shape, l, c, 1, u, d), p = !0, f = new Ji(h, "max", p), m = e.runWebGLProgram(f, [a], a.dtype), g = new uU(h), b = e.runWebGLProgram(g, [o, m], a.dtype);
  return e.disposeIntermediateTensorInfo(m), b;
}
const mU = {
  kernelName: rf,
  backendName: "webgl",
  kernelFunc: fU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gU(n, t, e, s) {
  let o = new Ji(e, "max", !1);
  const r = s.runWebGLProgram(o, [n], "float32");
  o = new Ji(e, "max", !0, !0, t);
  const i = s.runWebGLProgram(o, [n], "float32");
  return [r, i];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bU = {
  kernelName: Tx,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: o, strides: r, pad: i, includeBatchInIndex: a } = t, l = e;
    k(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
    const c = [1, 1];
    k(Fe(r, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${c}'`);
    const u = An(s.shape, o, r, c, i), [d, h] = gU(s, a, u, l);
    return [d, h];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xU(n, t, e, s) {
  const o = X(t), i = X(n.shape) / o, a = st({ inputs: { x: n }, attrs: { shape: [i, o] }, backend: s }), l = gr(a, "float32", "mean", s), c = st({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yU = {
  kernelName: ku,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { keepDims: o, axis: r } = t, i = e, a = s.shape.length, l = Ct(r, s.shape);
    let c = l;
    const u = ne(c, a), d = u != null, h = i.shouldExecuteOnCPU([s]), p = [];
    let f = s;
    if (d) {
      if (h) {
        const y = i.texData.get(f.dataId).values, I = new Array(a);
        for (let S = 0; S < I.length; S++)
          I[S] = s.shape[u[S]];
        const C = Sg(y, s.shape, s.dtype, u, I);
        f = i.makeTensorInfo(I, s.dtype);
        const v = i.texData.get(f.dataId);
        v.values = C;
      } else
        f = kd(s, u, i);
      p.push(f), c = ce(c.length, a);
    }
    Ee("sum", c, a);
    const [m, g] = Ce(f.shape, c);
    let b = m;
    o && (b = le(m, l));
    const x = xU(f, g, b, i);
    for (const w of p)
      i.disposeIntermediateTensorInfo(w);
    return x;
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = Ct(r, o.shape);
  let c = l;
  const u = ne(c, a);
  let d = o;
  u != null && (d = Oe({ inputs: { x: o }, backend: e, attrs: { perm: u } }), c = ce(c.length, o.shape.length)), Ee("min", c, a);
  const [h, p] = Ce(d.shape, c), f = X(p), m = st({ inputs: { x: d }, backend: e, attrs: { shape: [-1, f] } }), g = gr(m, m.dtype, "min", e);
  let b;
  if (i) {
    const x = le(h, l);
    b = st({ inputs: { x: g }, backend: e, attrs: { shape: x } });
  } else
    b = st({ inputs: { x: g }, backend: e, attrs: { shape: h } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(g), u != null && e.disposeIntermediateTensorInfo(d), b;
}
const IU = {
  kernelName: Su,
  backendName: "webgl",
  kernelFunc: wU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CU = Tg + `
  return min(a, b);
`, vU = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Nl + `
  return result;
`, kU = Ge({
  opSnippet: CU,
  packedOpSnippet: vU,
  cpuKernelImpl: gP
}), SU = {
  kernelName: Fa,
  backendName: "webgl",
  kernelFunc: kU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class TU {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = e.map(
      (u, d) => u[0] + t[d] + u[1]
      /* afterPad */
    );
    const o = t.length, r = Kt(o), i = e.map((u) => u[0]).join(","), a = e.map((u, d) => u[0] + t[d]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, o), c = s === "reflect" ? 0 : 1;
    if (o === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${i});
      ${r} end = ${r}(${a});

      void main() {
        ${r} outC = getOutputCoords();
        for (int i = 0; i < ${o}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${r} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class NU {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e.map(
      (f, m) => f[0] + t[m] + f[1]
      /* afterPad */
    );
    const o = t.length, r = Kt(o), i = e.map((f) => f[0]).join(","), a = e.map((f, m) => f[0] + t[m]).join(","), l = _e("rc", o), c = _e("source", o), u = `${l[o - 1]} < ${this.outputShape[o - 1]}`, d = o === 1 ? "source" : `vec2(${c.slice(-2).join()})`, h = s === "reflect" ? 0 : 1;
    let p = "";
    if (o === 1) {
      const f = `
        ${r} source = rc;
        if (source < start) {
          source = start * 2 - source - ${h};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${h};
        }
        source -= start;
      `;
      p = `
        ${r} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${d});
        ${l[o - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${d});
        }
      `;
    } else {
      const f = `
        ${r} source = rc;
        ${r} lt = ${r}(lessThan(source, start));
        ${r} gte = ${r}(greaterThanEqual(source, end));
        ${r} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${h}) +
                gte * ((end - 1) * 2 - source + ${h});
        source -= start;
      `;
      p = `
        ${r} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${d});
        ${l[o - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${d});
        }
        rc = outputLoc;
        ${l[o - 2]} += 1;
        if(${l[o - 2]} < ${this.outputShape[o - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${d});
          ${l[o - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${d});
          }
        }
      `;
    }
    this.userCode = `
      const ${r} start = ${r}(${i});
      const ${r} end = ${r}(${a});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RU = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s } = n, { paddings: o, mode: r } = e, i = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new NU(s.shape, o, r) : new TU(s.shape, o, r);
  return t.runWebGLProgram(i, [s], s.dtype);
}, $U = {
  kernelName: Tu,
  backendName: "webgl",
  kernelFunc: RU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EU = `if (b == 0.0) return NAN;
  return mod(a, b);`, GU = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + Nl + `
  return result;
`, LU = Ge({
  opSnippet: EU,
  packedOpSnippet: GU
}), DU = {
  kernelName: Wa,
  backendName: "webgl",
  kernelFunc: LU
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class MU {
  constructor(t, e, s) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [t, s], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e - 1}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zU = `
if (a == b) {
  return 1.0;
};
return a / b;`, FU = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, zC = Ge({ opSnippet: zU, packedOpSnippet: FU, checkOutOfBounds: !0 }), WU = {
  kernelName: Ia,
  backendName: "webgl",
  kernelFunc: zC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const db = "return a - b;", FC = Ge({
  opSnippet: db,
  packedOpSnippet: db,
  supportsComplex: !0,
  cpuKernelImpl: FP
}), VU = {
  kernelName: qa,
  backendName: "webgl",
  kernelFunc: FC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { dim: r } = s, i = Ct([r], o.shape), a = MC({
    inputs: { x: o },
    backend: e,
    attrs: { reductionIndices: i, keepDims: !1 }
  }), l = le(a.shape, i), c = st({ inputs: { x: a }, backend: e, attrs: { shape: l } }), u = FC({ inputs: { a: o, b: c }, backend: e }), d = GC({ inputs: { x: u }, backend: e }), h = Sd({ inputs: { x: d }, backend: e, attrs: { axis: i, keepDims: !1 } }), p = st({ inputs: { x: h }, backend: e, attrs: { shape: l } }), f = zC({ inputs: { a: d, b: p }, backend: e });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(p), f;
}
const _U = {
  kernelName: Zu,
  backendName: "webgl",
  kernelFunc: WC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { numSamples: r, seed: i, normalized: a } = s, l = a ? o : WC({ inputs: { logits: o }, backend: e, attrs: { dim: o.shape.length - 1 } }), c = l.shape[0], u = l.shape[1], d = new MU(c, u, r), h = [[i]], p = e.runWebGLProgram(d, [l], "int32", h);
  return a || e.disposeIntermediateTensorInfo(l), p;
}
const OU = {
  kernelName: Nx,
  backendName: "webgl",
  kernelFunc: AU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XU = Xn + `
  return -x;
`, PU = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function ZU(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s])) {
    const r = e.texData.get(s.dataId), [i, a] = xP(r.values, s.shape, s.dtype);
    return e.makeTensorInfo(a, s.dtype, i);
  }
  let o;
  return V().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? o = new js(s.shape, PU) : o = new hs(s.shape, XU), e.runWebGLProgram(o, [s], s.dtype);
}
const KU = {
  kernelName: Nu,
  backendName: "webgl",
  kernelFunc: ZU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BU = hm;
function HU(n) {
  fn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s, c = e.readSync(o.dataId), u = e.readSync(r.dataId), { selectedIndices: d } = BU(c, u, i, a, l);
  return e.makeTensorInfo([d.length], "int32", new Int32Array(d));
}
const UU = {
  kernelName: lf,
  backendName: "webgl",
  kernelFunc: HU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YU = pm;
function QU(n) {
  fn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s, u = e.readSync(o.dataId), d = e.readSync(r.dataId), { selectedIndices: h, validOutputs: p } = YU(u, d, i, a, l, c);
  return [
    e.makeTensorInfo([h.length], "int32", new Int32Array(h)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const jU = {
  kernelName: cf,
  backendName: "webgl",
  kernelFunc: QU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JU = fm;
function qU(n) {
  fn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s, u = e.readSync(o.dataId), d = e.readSync(r.dataId), h = i, p = a, f = l, m = c, { selectedIndices: g, selectedScores: b } = JU(u, d, h, p, f, m);
  return [
    e.makeTensorInfo([g.length], "int32", new Int32Array(g)),
    e.makeTensorInfo([b.length], "float32", new Float32Array(b))
  ];
}
const t5 = {
  kernelName: uf,
  backendName: "webgl",
  kernelFunc: qU
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class e5 {
  constructor(t, e, s, o) {
    this.variableNames = ["indices"], this.outputShape = [t, e], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${o}), float(${s}),
                      float(index == coords.y)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n5 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o } = t, { dtype: r, depth: i, onValue: a, offValue: l } = s, c = X(o.shape), u = new e5(c, i, a, l), d = st({ inputs: { x: o }, backend: e, attrs: { shape: [c] } }), h = e.runWebGLProgram(u, [d], r);
  e.disposeIntermediateTensorInfo(d);
  const p = [...o.shape, i], f = st({ inputs: { x: h }, backend: e, attrs: { shape: p } });
  return e.disposeIntermediateTensorInfo(h), f;
}, s5 = {
  kernelName: Eu,
  backendName: "webgl",
  kernelFunc: n5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ac(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "complex64") {
    const o = $l({ inputs: { input: s }, backend: e }), r = Ac({ inputs: { x: o }, backend: e }), i = Td({ inputs: { input: s }, backend: e }), a = Ac({ inputs: { x: i }, backend: e }), l = Co({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return El({
      attrs: {
        shape: s.shape,
        dtype: s.dtype,
        value: s.dtype === "string" ? "" : 0
      },
      backend: e
    });
}
const o5 = {
  kernelName: Hu,
  backendName: "webgl",
  kernelFunc: Ac
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VC(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    const o = $l({ inputs: { input: s }, backend: e }), r = VC({ inputs: { x: o }, backend: e }), i = Td({ inputs: { input: s }, backend: e }), a = Ac({ inputs: { x: i }, backend: e }), l = Co({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return El({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: e });
}
const r5 = {
  kernelName: $u,
  backendName: "webgl",
  kernelFunc: VC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function i5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s;
  if (t.length === 1)
    return xp({ inputs: { input: t[0] }, backend: e, attrs: { dim: o } });
  const r = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Xe(r, u.shape, "All tensors passed to stack must have matching shapes"), k(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const d = xp({ inputs: { input: u }, backend: e, attrs: { dim: o } });
    return a.push(d), d;
  }), c = vC({ inputs: l, backend: e, attrs: { axis: o } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const a5 = {
  kernelName: Gu,
  backendName: "webgl",
  kernelFunc: i5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class l5 {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map(
      (c, u) => c[0] + t[u] + c[1]
      /* afterPad */
    );
    const o = t.length, r = Kt(o), i = e.map((c) => c[0]).join(","), a = e.map((c, u) => c[0] + t[u]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, o);
    if (o === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${i});
      ${r} end = ${r}(${a});

      void main() {
        ${r} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${r} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class c5 {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map(
      (m, g) => m[0] + t[g] + m[1]
      /* afterPad */
    );
    const o = t.length, r = Kt(o), i = e.map((m) => m[0]).join(","), a = e.map((m, g) => m[0] + t[g]).join(","), l = _e("rc", o), c = _e("source", o), u = `${l[o - 1]} < ${this.outputShape[o - 1]}`, d = o === 1 ? "source" : `vec2(${c.slice(-2).join()})`, h = [
      `${r} rc = outputLoc;`,
      `${l[o - 1]} += 1;
       if(${u}) {
      `,
      o === 1 ? "" : `}
       rc = outputLoc;
       ${l[o - 2]} += 1;
       if(${l[o - 2]} < ${this.outputShape[o - 2]}) {`,
      o === 1 ? "" : `  ${l[o - 1]} += 1;
         if(${u}) {`
    ], p = o === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let f = "";
    for (let m = 0, g = o === 1 ? 2 : 4; m < g; m++)
      f += `
        ${h[m]}
        if (${p}) {
          result[${m}] = float(value);
        } else {
          ${r} source = rc - start;
          result[${m}] = getChannel(getX(${c.join()}), ${d});
        }
      `;
    f += o === 1 ? "} " : "}}", this.userCode = `
      const ${r} start = ${r}(${i});
      const ${r} end = ${r}(${a});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _C = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { paddings: r, constantValue: i } = s;
  if (X(o.shape) === 0) {
    const c = r.map(
      (u, d) => u[0] + o.shape[d] + u[1]
      /* afterPad */
    );
    return El({
      backend: e,
      attrs: { shape: c, value: i, dtype: o.dtype }
    });
  }
  const a = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new c5(o.shape, r, i) : new l5(o.shape, r, i), l = [[i]];
  return e.runWebGLProgram(a, [o], o.dtype, l);
}, u5 = {
  kernelName: Lu,
  backendName: "webgl",
  kernelFunc: _C
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d5 = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, h5 = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + Nl + `
  return result;
`, p5 = Ge({ opSnippet: d5, packedOpSnippet: h5 }), f5 = {
  kernelName: _a,
  backendName: "webgl",
  kernelFunc: p5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = [], c = Ct(r, o.shape);
  let u = c;
  const d = ne(u, a);
  let h = o;
  d != null && (h = Oe({ inputs: { x: o }, backend: e, attrs: { perm: d } }), u = ce(u.length, a), l.push(h)), Ee("prod", u, a);
  let p;
  if (e.shouldExecuteOnCPU([h])) {
    const f = e.texData.get(h.dataId).values, { outVals: m, outShape: g, outDtype: b } = wP(h.shape, h.dtype, f, u);
    p = e.makeTensorInfo(g, b, m);
  } else {
    const [f, m] = Ce(h.shape, u), g = X(m), b = st({ inputs: { x: h }, backend: e, attrs: { shape: [-1, g] } }), x = Ef(o.dtype), w = gr(b, x, "prod", e);
    p = st({ inputs: { x: w }, backend: e, attrs: { shape: f } }), l.push(b), l.push(w);
  }
  if (i) {
    l.push(p);
    const f = le(p.shape, c);
    p = st({ inputs: { x: p }, backend: e, attrs: { shape: f } });
  }
  return l.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const g5 = {
  kernelName: Mu,
  backendName: "webgl",
  kernelFunc: m5
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: o, paramsDenseValues: r, indices: i } = t, { outputRaggedRank: a } = s, l = o.map((b) => e.readSync(b.dataId)), c = o.map((b) => b.shape), u = e.readSync(r.dataId), d = e.readSync(i.dataId), [h, p, f] = IP(l, c, u, r.shape, r.dtype, d, i.shape, a), m = h.map((b) => e.makeTensorInfo([b.length], "int32", b)), g = e.makeTensorInfo(f, r.dtype, p);
  return m.concat([g]);
}
const x5 = {
  kernelName: Rx,
  backendName: "webgl",
  kernelFunc: b5
};
/**
 * @license
 * Copyright 2022 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y5(n) {
  const { inputs: t, backend: e } = n, { starts: s, limits: o, deltas: r } = t, i = e.readSync(s.dataId), a = e.readSync(o.dataId), l = e.readSync(r.dataId), [c, u] = CP(i, s.shape, s.dtype, a, o.shape, l, r.shape), d = e.makeTensorInfo([c.length], "int32", c), h = e.makeTensorInfo([u.length], s.dtype, u);
  return [d, h];
}
const w5 = {
  kernelName: $x,
  backendName: "webgl",
  kernelFunc: y5
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function I5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: o, values: r, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.readSync(o.dataId), u = e.readSync(r.dataId), d = e.readSync(i.dataId), h = a.map((g) => e.readSync(g.dataId)), p = a.map((g) => g.shape), [f, m] = vP(c, o.shape, u, r.shape, r.dtype, d, i.shape, h, p, l);
  return e.makeTensorInfo(f, r.dtype, m);
}
const C5 = {
  kernelName: Ex,
  backendName: "webgl",
  kernelFunc: I5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AC = (n) => {
  const { backend: t, attrs: e } = n, { start: s, stop: o, step: r, dtype: i } = e, a = kP(s, o, r, i);
  return t.makeTensorInfo([a.length], i, a);
}, v5 = {
  kernelName: df,
  backendName: "webgl",
  kernelFunc: AC
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k5 = "return 1.0 / x;", S5 = Rt({ opSnippet: k5 }), T5 = {
  kernelName: Aa,
  backendName: "webgl",
  kernelFunc: S5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N5 = Xn + `
  return (x < 0.0) ? 0.0 : x;
`, R5 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, $5 = Rt({ opSnippet: N5, packedOpSnippet: R5 }), E5 = {
  kernelName: Oa,
  backendName: "webgl",
  kernelFunc: $5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G5 = Xn + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, L5 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, D5 = Rt({ opSnippet: G5, packedOpSnippet: L5 }), M5 = {
  kernelName: Xa,
  backendName: "webgl",
  kernelFunc: D5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class z5 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], d = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ];
    let h;
    r ? h = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : h = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / d[0]},
          ${u[1] / d[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${h};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class F5 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], d = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ];
    let h;
    r ? h = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : h = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / d[0]},
          ${u[1] / d[1]},
          ${u[1] / d[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${h};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s, [l, c] = a, u = V().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new F5(o.shape, l, c, r, i) : new z5(o.shape, l, c, r, i);
  return e.runWebGLProgram(u, [o], "float32");
}
const V5 = {
  kernelName: Wu,
  backendName: "webgl",
  kernelFunc: W5
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class _5 {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, o, r] = e, [, i, a] = t, l = [
      s && i > 1 ? o - 1 : o,
      s && a > 1 ? r - 1 : r
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], d = l[1] / c[1], h = 1 / u, p = 1 / d, f = Math.ceil(h) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${o - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${r - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s, a = new _5(r.shape, o.shape, i);
  return e.runWebGLProgram(a, [r], r.dtype);
}
const O5 = {
  kernelName: ff,
  backendName: "webgl",
  kernelFunc: A5
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class X5 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], d = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ], h = o ? "0.5" : "0.0";
    let p;
    r ? p = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / d[0]},
          ${u[1] / d[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class P5 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], d = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ], h = o ? "0.5" : "0.0";
    let p;
    r ? p = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / d[0]},
          ${u[1] / d[1]},
          ${u[1] / d[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s, [l, c] = a, u = V().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new P5(o.shape, l, c, r, i) : new X5(o.shape, l, c, r, i);
  return e.runWebGLProgram(u, [o], o.dtype);
}
const K5 = {
  kernelName: Fu,
  backendName: "webgl",
  kernelFunc: Z5
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class B5 {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, o, r] = e, [, i, a] = t, l = [
      s && i > 1 ? o - 1 : o,
      s && a > 1 ? r - 1 : r
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], d = l[1] / c[1], h = 1 / u, p = 1 / d, f = Math.ceil(h) * 2 + 2, m = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${d});

        const float invHeightScale = float(${h});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${m});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s, a = new B5(r.shape, o.shape, i);
  return e.runWebGLProgram(a, [r], r.dtype);
}
const U5 = {
  kernelName: pf,
  backendName: "webgl",
  kernelFunc: H5
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Y5 {
  constructor(t, e) {
    this.variableNames = ["x"];
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    if (this.outputShape = t, s === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;
      return;
    }
    const o = (a) => e.indexOf(a) !== -1 && t[a] !== 1 ? `${t[a]} - coords[${a}] - 1` : `coords[${a}]`, r = t.map((a, l) => o(l)).join(","), i = Kt(s);
    this.userCode = `
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${r}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Q5 {
  constructor(t, e) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0;
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    this.outputShape = t;
    const o = _e("rc", s), r = `${o[s - 1]} + 1 < ${this.outputShape[s - 1]}`, i = `${o[s - 2]} + 1 < ${this.outputShape[s - 2]}`, a = Kt(s);
    s === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${r}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(o.slice())};
          if(${r}){
            result.g = ${c(o.slice())};
          }
          if(${i}) {
            result.b = ${u(o.slice())};
            if(${r}) {
              result.a = ${d(o.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function l(f) {
      return h(f);
    }
    function c(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", h(f);
    }
    function u(f) {
      return f[s - 2] = "(" + f[s - 2] + " + 1)", h(f);
    }
    function d(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", f[s - 2] = "(" + f[s - 2] + " + 1)", h(f);
    }
    function h(f) {
      const m = t.map((x, w) => p(w, f)), g = m.join(","), b = m.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${b}))`;
    }
    function p(f, m) {
      return e.indexOf(f) !== -1 && t[f] !== 1 ? `${t[f]} - ${m[f]} - 1` : `${m[f]}`;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j5(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dims: r } = s, i = o.shape.length, a = Ct(r, o.shape);
  if (i === 0)
    return ln({ inputs: { x: o }, backend: e });
  const l = V().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Q5(o.shape, a) : new Y5(o.shape, a);
  return e.runWebGLProgram(l, [o], o.dtype);
}
const J5 = {
  kernelName: Vu,
  backendName: "webgl",
  kernelFunc: j5
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class q5 {
  constructor(t, e) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const s = t[1], o = t[2];
    this.outputShape = t;
    let r = "";
    typeof e == "number" ? r = `float outputValue = ${e.toFixed(2)};` : r = `
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${r}
          if(coordX >= 0 && coordX < ${o} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t4 = {
  kernelName: Nf,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: o, fillValue: r, center: i } = t, a = e, l = new q5(s.shape, r), [c, u] = Sm(i, s.shape[1], s.shape[2]), d = [[c, u, Math.sin(o), Math.cos(o)]];
    return a.runWebGLProgram(l, [s], s.dtype, d);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const e4 = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, n4 = Rt({ opSnippet: e4 }), s4 = {
  kernelName: Pa,
  backendName: "webgl",
  kernelFunc: n4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o4 = "return inversesqrt(x);", r4 = Rt({ opSnippet: o4, cpuKernelImpl: SP }), i4 = {
  kernelName: Za,
  backendName: "webgl",
  kernelFunc: r4
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OC {
  constructor(t, e, s, o, r, i, a = !0) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = i;
    const l = Kt(r.length), c = Kt(i.length);
    let u = "";
    s === 1 ? u = "i" : s === 2 && (u = "i, j");
    const d = `getIndices(${u})`;
    let h = "";
    o === 1 ? h = "i" : o === 2 && (h = "i, coords[1]");
    const p = `getUpdates(${h})`, f = e > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${r});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${d});
              flattenedIndex += index * ${f};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${p};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o, updates: r } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: d } = ni(r, o, i), h = [d / c, c];
  if (d === 0)
    return e.makeTensorInfo(i, o.dtype);
  const p = st({ inputs: { x: o }, backend: e, attrs: { shape: [l, a] } }), f = st({ inputs: { x: r }, backend: e, attrs: { shape: [l, c] } }), m = e.makeTensorInfo([], "float32", new Float32Array([0])), g = new OC(l, a, p.shape.length, f.shape.length, u, h), b = e.runWebGLProgram(g, [f, p, m], f.dtype), x = st({ inputs: { x: b }, backend: e, attrs: { shape: i } });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(m), x;
}
const l4 = {
  kernelName: Gx,
  backendName: "webgl",
  kernelFunc: a4
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class c4 {
  constructor(t, e, s, o) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [t, s];
    const r = "while (left < right) {", i = `for (int i = 0; i < ${Math.ceil(Math.log2(e + 1))}; ++i) { if (left >= right) break;`, a = V().getNumber("WEBGL_VERSION") === 2 ? r : i, l = o === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function u4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: o, values: r } = t, { side: i } = s, a = new c4(o.shape[0], o.shape[1], r.shape[1], i), l = [[o.shape[1]]];
  return e.runWebGLProgram(a, [o, r], "int32", l);
}
const d4 = {
  kernelName: Lx,
  backendName: "webgl",
  kernelFunc: u4
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class h4 {
  constructor(t, e, s) {
    this.variableNames = ["c", "a", "b"], this.outputShape = e;
    let o, r;
    if (s > 4)
      throw Error(`Where for rank ${s} is not yet supported`);
    if (s === 1)
      r = "resRC", o = "resRC";
    else {
      const a = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], l = [], c = [];
      for (let u = 0; u < e.length; u++)
        c.push(`${a[u]}`), u < t && l.push(`${a[u]}`);
      o = l.join(), r = c.join();
    }
    const i = Kt(s);
    this.userCode = `
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${o});
        if (cVal >= 1.0) {
          setOutput(getA(${r}));
        } else {
          setOutput(getB(${r}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p4(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: o, e: r } = t, i = new h4(s.shape.length, o.shape, o.shape.length);
  return e.runWebGLProgram(i, [s, o, r], rn(o.dtype, r.dtype));
}
const f4 = {
  kernelName: _u,
  backendName: "webgl",
  kernelFunc: p4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const m4 = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${id};
  float scale = ${ad};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, g4 = Rt({ opSnippet: m4 }), b4 = {
  kernelName: Ka,
  backendName: "webgl",
  kernelFunc: g4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const x4 = di + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, y4 = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, w4 = Rt({
  opSnippet: x4,
  packedOpSnippet: y4,
  cpuKernelImpl: NP
}), I4 = {
  kernelName: Ya,
  backendName: "webgl",
  kernelFunc: w4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const C4 = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, v4 = Rt({ opSnippet: C4 }), k4 = {
  kernelName: Ua,
  backendName: "webgl",
  kernelFunc: v4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const S4 = di + `
  return sin(x);
`, T4 = Rt({ opSnippet: S4 }), N4 = {
  kernelName: Ba,
  backendName: "webgl",
  kernelFunc: T4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const R4 = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, $4 = Rt({ opSnippet: R4 }), E4 = {
  kernelName: Ha,
  backendName: "webgl",
  kernelFunc: $4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G4 = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, L4 = Rt({ opSnippet: G4 }), D4 = {
  kernelName: Qa,
  backendName: "webgl",
  kernelFunc: L4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M4 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, paddings: i } = s;
  k(o.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const a = r.reduce((b, x) => b * x), l = [[0, 0]];
  l.push(...i);
  for (let b = 1 + r.length; b < o.shape.length; ++b)
    l.push([0, 0]);
  const c = [], u = _C({
    inputs: { x: o },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), d = hl(u.shape, r, a, !1), h = pl(d.length, r.length, !1), p = fl(u.shape, r, a, !1), f = st({ inputs: { x: u }, backend: e, attrs: { shape: d } }), m = Oe({
    inputs: { x: f },
    backend: e,
    attrs: { perm: h }
  }), g = st({ inputs: { x: m }, backend: e, attrs: { shape: p } });
  return c.push(u), c.push(f), c.push(m), c.forEach((b) => e.disposeIntermediateTensorInfo(b)), g;
}, z4 = {
  kernelName: Xu,
  backendName: "webgl",
  kernelFunc: M4
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function F4(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: o, denseShape: r, defaultValue: i } = t;
  if (r.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${r.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.readSync(s.dataId), l = e.readSync(o.dataId), c = e.readSync(r.dataId), u = e.readSync(i.dataId)[0], [d, h, p, f, m] = $P(a, s.shape, s.dtype, l, o.dtype, c, u);
  return [
    e.makeTensorInfo(h, s.dtype, d),
    e.makeTensorInfo([h[0]], o.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))),
    e.makeTensorInfo([m.length], s.dtype, new Int32Array(m))
  ];
}
const W4 = {
  kernelName: mf,
  backendName: "webgl",
  kernelFunc: F4
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function V4(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: o, newShape: r } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${r.shape}`);
  const i = Array.from(e.readSync(o.dataId)), a = e.readSync(s.dataId), l = Array.from(e.readSync(r.dataId)), [c, u, d] = EP(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([d.length], r.dtype, new Int32Array(d))
  ];
}
const _4 = {
  kernelName: gf,
  backendName: "webgl",
  kernelFunc: V4
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A4(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${r.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(o.dataId), l = e.readSync(r.dataId), [c, u] = uC(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const O4 = {
  kernelName: bf,
  backendName: "webgl",
  kernelFunc: A4
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function X4(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${r.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(o.dataId), l = e.readSync(r.dataId), [c, u] = uC(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const P4 = {
  kernelName: xf,
  backendName: "webgl",
  kernelFunc: X4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: o, sparseValues: r, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: d, outputSize: h } = ni(r, o, a), p = !1;
  if (r.dtype === "string") {
    const b = e.bufferSync(o), x = e.bufferSync(r), w = Gs(e.readSync(i.dataId)[0]), y = TP(b, x, a, h, u, c, l, d, w, p);
    return e.makeTensorInfo(a, y.dtype, y.values);
  }
  const f = new OC(c, l, o.shape.length, r.shape.length, d, [h, 1], p), m = e.runWebGLProgram(f, [r, o, i], r.dtype), g = st({ inputs: { x: m }, backend: e, attrs: { shape: a } });
  return e.disposeIntermediateTensorInfo(m), g;
}
const K4 = {
  kernelName: Dx,
  backendName: "webgl",
  kernelFunc: Z4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B4(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { numOrSizeSplits: r, axis: i } = s, a = Ct(i, o.shape)[0], l = Am(o, r, a), c = o.shape.length, u = new Array(c).fill(0), d = o.shape.slice();
  return l.map((h) => {
    const p = [...d];
    p[a] = h;
    const f = hi({ inputs: { x: o }, backend: e, attrs: { begin: u, size: p } });
    return u[a] += h, f;
  });
}
const H4 = {
  kernelName: Pu,
  backendName: "webgl",
  kernelFunc: B4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hb = "return sqrt(x);", U4 = Rt({ opSnippet: hb, packedOpSnippet: hb, cpuKernelImpl: GP }), Y4 = {
  kernelName: ja,
  backendName: "webgl",
  kernelFunc: U4
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q4 = "return x * x;", j4 = Rt({ opSnippet: Q4 }), J4 = {
  kernelName: yf,
  backendName: "webgl",
  kernelFunc: j4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pb = "return (a - b) * (a - b);", q4 = Ge({ opSnippet: pb, packedOpSnippet: pb }), tY = {
  kernelName: Ja,
  backendName: "webgl",
  kernelFunc: q4
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eY({ inputs: n, attrs: t, backend: e }) {
  const { x: s } = n, o = Xn + `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `, r = new hs(s.shape, o);
  return e.runWebGLProgram(r, [s], s.dtype);
}
const nY = {
  kernelName: sl,
  backendName: "webgl",
  kernelFunc: eY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class sY {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = s;
    const o = s.length, r = Kt(s.length), i = Kt(s.length);
    let a = "";
    if (o === 1)
      a = "coords * strides + begin";
    else {
      let l = 0;
      a = s.map((c, u) => (l++, s.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${l - 1}] * strides[${u}] + begin[${u}]`)).join(",");
    }
    this.userCode = `
      ${r} begin = ${r}(${t});
      ${r} strides = ${r}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: d, shrinkAxisMask: h } = s, { finalShapeSparse: p, finalShape: f, isIdentity: m, sliceDim0: g, isSimpleSlice: b, begin: x, end: w, strides: y } = Cm(o.shape, r, i, a, l, c, u, d, h);
  let I;
  if (m)
    I = st({ inputs: { x: o }, backend: e, attrs: { shape: f } });
  else if (g || b) {
    k(o.shape.length >= 1, () => `Input must have rank at least 1, got: ${o.shape.length}`);
    const v = ym(x, w, y), S = hi({ inputs: { x: o }, backend: e, attrs: { begin: x, size: v } });
    I = st({ inputs: { x: S }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(S);
  } else if (e.shouldExecuteOnCPU([o])) {
    const S = e.readSync(o.dataId), N = vt(o.shape, o.dtype, S), R = LP(p, N, y, x);
    I = e.makeTensorInfo(f, o.dtype, R.values);
  } else {
    const S = new sY(x, y, p);
    I = e.runWebGLProgram(S, [o], o.dtype);
  }
  const C = st({ inputs: { x: I }, backend: e, attrs: { shape: f } });
  return e.disposeIntermediateTensorInfo(I), C;
}
const rY = {
  kernelName: wf,
  backendName: "webgl",
  kernelFunc: oY
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: o, nGramWidths: r, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: d } = t, h = e.readSync(u.dataId), p = e.readSync(d.dataId), [f, m] = DP(h, p, o, r, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(d.shape, "int32", m)
  ];
}
const aY = {
  kernelName: If,
  backendName: "webgl",
  kernelFunc: iY
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: o } = s, { input: r, delimiter: i } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.readSync(r.dataId), l = e.readSync(i.dataId)[0], [c, u, d] = MP(a, l, o), h = u.length;
  return [
    e.makeTensorInfo([h, 2], "int32", c),
    e.makeTensorInfo([h], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(d))
  ];
}
const cY = {
  kernelName: Cf,
  backendName: "webgl",
  kernelFunc: lY
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: o } = s, { input: r } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.readSync(r.dataId), a = zP(i, o);
  return e.makeTensorInfo(r.shape, "int32", a);
}
const dY = {
  kernelName: vf,
  backendName: "webgl",
  kernelFunc: uY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hY = "return tan(x);", pY = Rt({ opSnippet: hY }), fY = {
  kernelName: tl,
  backendName: "webgl",
  kernelFunc: pY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mY = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, gY = Rt({ opSnippet: mY }), bY = {
  kernelName: el,
  backendName: "webgl",
  kernelFunc: gY
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class xY {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[i] * e[i];
    this.outputShape = s, this.rank = s.length;
    const o = Kt(this.rank), r = yY(t);
    this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        setOutput(getA(${r}));
      }
    `;
  }
}
function yY(n) {
  const t = n.length;
  if (t > 5)
    throw Error(`Tile for rank ${t} is not yet supported`);
  if (t === 1)
    return `imod(resRC, ${n[0]})`;
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], s = [];
  for (let o = 0; o < n.length; o++)
    s.push(`imod(${e[o]}, ${n[o]})`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XC(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reps: r } = s;
  if (o.dtype === "string" || o.shape.length > 5) {
    const l = e.readSync(o.dataId), c = o.dtype === "string" ? l.map((h) => Gs(h)) : l, u = vt(o.shape, o.dtype, c), d = WP(u, r);
    return e.makeTensorInfo(d.shape, d.dtype, d.values);
  }
  const i = new xY(o.shape, r);
  return e.runWebGLProgram(i, [o], o.dtype);
}
const wY = {
  kernelName: nl,
  backendName: "webgl",
  kernelFunc: XC
};
class IY {
  /**
   * @param shape desired output shape (can be larger than input shape, output
   *                                    will be padded with -Infinity)
   */
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "negativeInf", type: "float" },
      { name: "dir", type: "int" },
      { name: "inc", type: "int" }
    ], this.outputShape = t, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class CY {
  /**
   * @param shape desired output shape (must be half of the input size)
   */
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "k", type: "int" }
    ], this.outputShape = t, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function To(n, t) {
  t !== null && n.disposeIntermediateTensorInfo(t);
}
function fb(n) {
  let t = 1;
  for (; t < n; )
    t *= 2;
  return t;
}
function vY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { k: r, sorted: i } = s, a = V().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = V().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), c = o.shape, u = c[c.length - 1];
  if (e.shouldExecuteOnCPU([o]) || u < a || r > l) {
    const R = e.readSync(o.dataId), [$, F] = VP(R, c, o.dtype, r, i);
    return [
      e.makeTensorInfo($.shape, $.dtype, $.values),
      e.makeTensorInfo(F.shape, F.dtype, F.values)
    ];
  }
  if (r === 0)
    return c[c.length - 1] = 0, [
      e.makeTensorInfo(c, o.dtype, []),
      e.makeTensorInfo(c, "int32", [])
    ];
  if (u === 1)
    return [
      o,
      El({ attrs: { shape: c, dtype: "int32", value: 0 }, backend: e })
    ];
  const d = e.texData.get(o.dataId), h = d !== null && d.isPacked, p = h ? e.unpackTensor(o) : o, m = X(c) / u, g = st({ inputs: { x: p }, attrs: { shape: [m, u] }, backend: e });
  h && To(e, p);
  const b = fb(r), x = fb(u);
  let w = null;
  const y = () => w === null ? [g, g] : [g, w], I = (R, $, F) => {
    const W = y(), _ = new IY(F), O = [[u], [w === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [R], [$]], K = w;
    w = e.runWebGLProgram(_, W, "int32", O), To(e, K);
  };
  for (let R = 1; R < b; R *= 2) {
    const $ = R * 2;
    for (let F = R; F >= 1; F /= 2)
      I($, F, [m, x]);
  }
  for (let R = x; R > b; R /= 2) {
    const $ = y(), F = new CY([m, R / 2]), _ = [[u], [w === null ? 1 : 0], [b]], A = w;
    w = e.runWebGLProgram(F, $, "int32", _), To(e, A);
    const O = b / 2, K = O * 2;
    for (let Z = O; Z >= 1; Z /= 2)
      I(K, Z, w.shape);
  }
  let C = w;
  w = hi({ inputs: { x: w }, backend: e, attrs: { begin: 0, size: [m, r] } }), To(e, C);
  let v = DC({ inputs: { x: g, indices: w }, backend: e, attrs: { axis: 1, batchDims: 1 } });
  To(e, g);
  const S = c.slice(0, -1);
  S.push(r), C = w, w = st({ inputs: { x: w }, attrs: { shape: S }, backend: e }), To(e, C);
  const N = v;
  return v = st({ inputs: { x: v }, attrs: { shape: S }, backend: e }), To(e, N), [v, w];
}
const kY = {
  kernelName: kf,
  backendName: "webgl",
  kernelFunc: vY
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class SY {
  constructor(t, e, s, o, r, i) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = i;
    const a = s === "nearest" ? 1 : 2;
    let l;
    switch (o) {
      case "constant":
        l = 1;
        break;
      case "reflect":
        l = 2;
        break;
      case "wrap":
        l = 3;
        break;
      case "nearest":
        l = 4;
        break;
      default:
        l = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${r});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${r});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: o, transforms: r } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = s, [u, d, h, p] = o.shape, [f, m] = c ?? [d, h], g = [
    u,
    f,
    m,
    p
  ], b = new SY(d, h, i, a, l, g);
  return e.runWebGLProgram(b, [o, r], "float32");
}
const NY = {
  kernelName: Sf,
  backendName: "webgl",
  kernelFunc: TY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RY(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: o } = e, { x: r } = t;
  Sl(r, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const i = s.readSync(r.dataId), { outputValues: a, outputShape: l, indices: c } = _P(i, o, r.shape, r.dtype);
  return [
    s.makeTensorInfo(l, r.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const $Y = {
  kernelName: Tf,
  backendName: "webgl",
  kernelFunc: RY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: o } = t;
  let { axis: r } = s;
  r < 0 && (r += o.shape.length);
  const i = o, a = i.shape.length, l = o.shape[r], c = new Array(a - 1);
  let u = 0;
  for (let m = 0; m < a; m++)
    m !== r && (c[u++] = i.shape[m]);
  const d = [], h = new Array(a).fill(0), p = i.shape.slice();
  p[r] = 1;
  const f = new Array(l);
  for (let m = 0; m < f.length; m++) {
    h[r] = m;
    const g = hi({ inputs: { x: i }, backend: e, attrs: { begin: h, size: p } }), b = st({ inputs: { x: g }, backend: e, attrs: { shape: c } });
    f[m] = b, d.push(g);
  }
  return d.forEach((m) => e.disposeIntermediateTensorInfo(m)), f;
}
const GY = {
  kernelName: Ku,
  backendName: "webgl",
  kernelFunc: EY
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class LY {
  constructor(t, e) {
    this.variableNames = ["x", "segmentIds"];
    const s = t.windowSize, o = t.batchSize, r = t.inSize, i = t.numSegments, a = i * Math.ceil(r / s);
    this.outputShape = [o, a];
    const l = "0.0", c = "sumValue", u = Math.floor(s / 4) * 4, d = s % 4, h = `
        sumValue += dot(values, segFilter);
    `;
    let p = "";
    r % s > 0 && (p = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `);
    let f = "";
    r % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${h}
        }

        int inIdx = inOffset + ${u};
        if (${d === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${h}
        } else if (${d === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${h}
        } else if (${d === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${h}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DY(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, segmentIds: r } = t, { numSegments: i } = s, a = o.shape.length, l = [];
  let c = 0;
  const u = ne([c], a);
  let d = o;
  u != null && (d = Oe({ inputs: { x: o }, backend: e, attrs: { perm: u } }), l.push(d), c = ce(1, a)[0]);
  const h = vy(d.shape, c, i), p = X([d.shape[c]]), f = st({ inputs: { x: d }, backend: e, attrs: { shape: [-1, p] } });
  l.push(f);
  const m = Ef(o.dtype), g = (y, I, C, v, S) => {
    const N = y.shape[0], R = y.shape[1], $ = Cy(R, S), F = { windowSize: $, inSize: R, batchSize: N, numSegments: S }, W = new LY(F, I), _ = e.compileAndRun(W, [y, C], v);
    if (l.push(_), _.shape[1] === S)
      return _;
    const A = AC({
      backend: e,
      attrs: { start: 0, stop: S, step: 1, dtype: "float32" }
    }), O = XC({
      inputs: { x: A },
      backend: e,
      attrs: { reps: [R / $] }
    });
    return l.push(A), l.push(O), g(_, I, O, v, S);
  }, b = g(f, "unsortedSegmentSum", r, m, i), x = st({ inputs: { x: b }, backend: e, attrs: { shape: h } });
  let w = x;
  if (u != null) {
    l.push(x);
    const y = go(u);
    w = Oe({ inputs: { x: w }, backend: e, attrs: { perm: y } });
  }
  return l.forEach((y) => e.disposeIntermediateTensorInfo(y)), w;
}
const MY = {
  kernelName: Bu,
  backendName: "webgl",
  kernelFunc: DY
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zY = [
  EZ,
  LZ,
  zZ,
  VZ,
  AZ,
  PZ,
  KZ,
  HZ,
  jZ,
  qZ,
  nK,
  rK,
  lK,
  hK,
  mK,
  bK,
  yK,
  vK,
  SK,
  NK,
  GK,
  VK,
  AK,
  XK,
  UK,
  QK,
  tB,
  pZ,
  sB,
  lB,
  hB,
  xB,
  wB,
  CB,
  kB,
  TB,
  $B,
  LB,
  zB,
  WB,
  _B,
  OB,
  ZB,
  BB,
  QB,
  JB,
  eH,
  oH,
  iH,
  uH,
  fH,
  xH,
  IH,
  kH,
  SH,
  NH,
  $H,
  GH,
  DH,
  zH,
  _H,
  XH,
  KH,
  HH,
  QH,
  qH,
  s9,
  a9,
  hZ,
  c9,
  iB,
  h9,
  m9,
  x9,
  mZ,
  C9,
  T9,
  R9,
  L9,
  z9,
  _9,
  X9,
  B9,
  Q9,
  q9,
  eU,
  rU,
  aU,
  cU,
  pU,
  mU,
  bU,
  yU,
  IU,
  SU,
  $U,
  DU,
  OU,
  xZ,
  KU,
  UU,
  jU,
  t5,
  ZK,
  s5,
  r5,
  a5,
  u5,
  f5,
  bZ,
  g5,
  x5,
  w5,
  C5,
  v5,
  KK,
  WU,
  T5,
  E5,
  M5,
  wZ,
  V5,
  O5,
  K5,
  U5,
  J5,
  t4,
  s4,
  i4,
  l4,
  d4,
  f4,
  b4,
  I4,
  k4,
  N4,
  E4,
  FK,
  _U,
  D4,
  z4,
  W4,
  _4,
  O4,
  P4,
  K4,
  H4,
  Y4,
  J4,
  tY,
  nY,
  rY,
  aY,
  cY,
  dY,
  VU,
  NZ,
  fY,
  bY,
  wY,
  kY,
  NY,
  RZ,
  $Y,
  GY,
  MY,
  o5
];
for (const n of zY)
  cn(n);
/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
const FY = 4, mb = 0, gb = 1, WY = 2;
function pi(n) {
  let t = n.length;
  for (; --t >= 0; )
    n[t] = 0;
}
const VY = 0, PC = 1, _Y = 2, AY = 3, OY = 258, $g = 29, Gl = 256, ta = Gl + 1 + $g, Dr = 30, Eg = 19, ZC = 2 * ta + 1, zo = 15, Qd = 16, XY = 7, Gg = 256, KC = 16, BC = 17, HC = 18, yp = (
  /* extra bits for each length code */
  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0])
), lc = (
  /* extra bits for each distance code */
  new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13])
), PY = (
  /* extra bits for each bit length code */
  new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7])
), UC = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), ZY = 512, Ts = new Array((ta + 2) * 2);
pi(Ts);
const Mi = new Array(Dr * 2);
pi(Mi);
const ea = new Array(ZY);
pi(ea);
const na = new Array(OY - AY + 1);
pi(na);
const Lg = new Array($g);
pi(Lg);
const Oc = new Array(Dr);
pi(Oc);
function jd(n, t, e, s, o) {
  this.static_tree = n, this.extra_bits = t, this.extra_base = e, this.elems = s, this.max_length = o, this.has_stree = n && n.length;
}
let YC, QC, jC;
function Jd(n, t) {
  this.dyn_tree = n, this.max_code = 0, this.stat_desc = t;
}
const JC = (n) => n < 256 ? ea[n] : ea[256 + (n >>> 7)], sa = (n, t) => {
  n.pending_buf[n.pending++] = t & 255, n.pending_buf[n.pending++] = t >>> 8 & 255;
}, on = (n, t, e) => {
  n.bi_valid > Qd - e ? (n.bi_buf |= t << n.bi_valid & 65535, sa(n, n.bi_buf), n.bi_buf = t >> Qd - n.bi_valid, n.bi_valid += e - Qd) : (n.bi_buf |= t << n.bi_valid & 65535, n.bi_valid += e);
}, us = (n, t, e) => {
  on(
    n,
    e[t * 2],
    e[t * 2 + 1]
    /*.Len*/
  );
}, qC = (n, t) => {
  let e = 0;
  do
    e |= n & 1, n >>>= 1, e <<= 1;
  while (--t > 0);
  return e >>> 1;
}, KY = (n) => {
  n.bi_valid === 16 ? (sa(n, n.bi_buf), n.bi_buf = 0, n.bi_valid = 0) : n.bi_valid >= 8 && (n.pending_buf[n.pending++] = n.bi_buf & 255, n.bi_buf >>= 8, n.bi_valid -= 8);
}, BY = (n, t) => {
  const e = t.dyn_tree, s = t.max_code, o = t.stat_desc.static_tree, r = t.stat_desc.has_stree, i = t.stat_desc.extra_bits, a = t.stat_desc.extra_base, l = t.stat_desc.max_length;
  let c, u, d, h, p, f, m = 0;
  for (h = 0; h <= zo; h++)
    n.bl_count[h] = 0;
  for (e[n.heap[n.heap_max] * 2 + 1] = 0, c = n.heap_max + 1; c < ZC; c++)
    u = n.heap[c], h = e[e[u * 2 + 1] * 2 + 1] + 1, h > l && (h = l, m++), e[u * 2 + 1] = h, !(u > s) && (n.bl_count[h]++, p = 0, u >= a && (p = i[u - a]), f = e[u * 2], n.opt_len += f * (h + p), r && (n.static_len += f * (o[u * 2 + 1] + p)));
  if (m !== 0) {
    do {
      for (h = l - 1; n.bl_count[h] === 0; )
        h--;
      n.bl_count[h]--, n.bl_count[h + 1] += 2, n.bl_count[l]--, m -= 2;
    } while (m > 0);
    for (h = l; h !== 0; h--)
      for (u = n.bl_count[h]; u !== 0; )
        d = n.heap[--c], !(d > s) && (e[d * 2 + 1] !== h && (n.opt_len += (h - e[d * 2 + 1]) * e[d * 2], e[d * 2 + 1] = h), u--);
  }
}, tv = (n, t, e) => {
  const s = new Array(zo + 1);
  let o = 0, r, i;
  for (r = 1; r <= zo; r++)
    o = o + e[r - 1] << 1, s[r] = o;
  for (i = 0; i <= t; i++) {
    let a = n[i * 2 + 1];
    a !== 0 && (n[i * 2] = qC(s[a]++, a));
  }
}, HY = () => {
  let n, t, e, s, o;
  const r = new Array(zo + 1);
  for (e = 0, s = 0; s < $g - 1; s++)
    for (Lg[s] = e, n = 0; n < 1 << yp[s]; n++)
      na[e++] = s;
  for (na[e - 1] = s, o = 0, s = 0; s < 16; s++)
    for (Oc[s] = o, n = 0; n < 1 << lc[s]; n++)
      ea[o++] = s;
  for (o >>= 7; s < Dr; s++)
    for (Oc[s] = o << 7, n = 0; n < 1 << lc[s] - 7; n++)
      ea[256 + o++] = s;
  for (t = 0; t <= zo; t++)
    r[t] = 0;
  for (n = 0; n <= 143; )
    Ts[n * 2 + 1] = 8, n++, r[8]++;
  for (; n <= 255; )
    Ts[n * 2 + 1] = 9, n++, r[9]++;
  for (; n <= 279; )
    Ts[n * 2 + 1] = 7, n++, r[7]++;
  for (; n <= 287; )
    Ts[n * 2 + 1] = 8, n++, r[8]++;
  for (tv(Ts, ta + 1, r), n = 0; n < Dr; n++)
    Mi[n * 2 + 1] = 5, Mi[n * 2] = qC(n, 5);
  YC = new jd(Ts, yp, Gl + 1, ta, zo), QC = new jd(Mi, lc, 0, Dr, zo), jC = new jd(new Array(0), PY, 0, Eg, XY);
}, ev = (n) => {
  let t;
  for (t = 0; t < ta; t++)
    n.dyn_ltree[t * 2] = 0;
  for (t = 0; t < Dr; t++)
    n.dyn_dtree[t * 2] = 0;
  for (t = 0; t < Eg; t++)
    n.bl_tree[t * 2] = 0;
  n.dyn_ltree[Gg * 2] = 1, n.opt_len = n.static_len = 0, n.sym_next = n.matches = 0;
}, nv = (n) => {
  n.bi_valid > 8 ? sa(n, n.bi_buf) : n.bi_valid > 0 && (n.pending_buf[n.pending++] = n.bi_buf), n.bi_buf = 0, n.bi_valid = 0;
}, bb = (n, t, e, s) => {
  const o = t * 2, r = e * 2;
  return n[o] < n[r] || n[o] === n[r] && s[t] <= s[e];
}, qd = (n, t, e) => {
  const s = n.heap[e];
  let o = e << 1;
  for (; o <= n.heap_len && (o < n.heap_len && bb(t, n.heap[o + 1], n.heap[o], n.depth) && o++, !bb(t, s, n.heap[o], n.depth)); )
    n.heap[e] = n.heap[o], e = o, o <<= 1;
  n.heap[e] = s;
}, xb = (n, t, e) => {
  let s, o, r = 0, i, a;
  if (n.sym_next !== 0)
    do
      s = n.pending_buf[n.sym_buf + r++] & 255, s += (n.pending_buf[n.sym_buf + r++] & 255) << 8, o = n.pending_buf[n.sym_buf + r++], s === 0 ? us(n, o, t) : (i = na[o], us(n, i + Gl + 1, t), a = yp[i], a !== 0 && (o -= Lg[i], on(n, o, a)), s--, i = JC(s), us(n, i, e), a = lc[i], a !== 0 && (s -= Oc[i], on(n, s, a)));
    while (r < n.sym_next);
  us(n, Gg, t);
}, wp = (n, t) => {
  const e = t.dyn_tree, s = t.stat_desc.static_tree, o = t.stat_desc.has_stree, r = t.stat_desc.elems;
  let i, a, l = -1, c;
  for (n.heap_len = 0, n.heap_max = ZC, i = 0; i < r; i++)
    e[i * 2] !== 0 ? (n.heap[++n.heap_len] = l = i, n.depth[i] = 0) : e[i * 2 + 1] = 0;
  for (; n.heap_len < 2; )
    c = n.heap[++n.heap_len] = l < 2 ? ++l : 0, e[c * 2] = 1, n.depth[c] = 0, n.opt_len--, o && (n.static_len -= s[c * 2 + 1]);
  for (t.max_code = l, i = n.heap_len >> 1; i >= 1; i--)
    qd(n, e, i);
  c = r;
  do
    i = n.heap[
      1
      /*SMALLEST*/
    ], n.heap[
      1
      /*SMALLEST*/
    ] = n.heap[n.heap_len--], qd(
      n,
      e,
      1
      /*SMALLEST*/
    ), a = n.heap[
      1
      /*SMALLEST*/
    ], n.heap[--n.heap_max] = i, n.heap[--n.heap_max] = a, e[c * 2] = e[i * 2] + e[a * 2], n.depth[c] = (n.depth[i] >= n.depth[a] ? n.depth[i] : n.depth[a]) + 1, e[i * 2 + 1] = e[a * 2 + 1] = c, n.heap[
      1
      /*SMALLEST*/
    ] = c++, qd(
      n,
      e,
      1
      /*SMALLEST*/
    );
  while (n.heap_len >= 2);
  n.heap[--n.heap_max] = n.heap[
    1
    /*SMALLEST*/
  ], BY(n, t), tv(e, l, n.bl_count);
}, yb = (n, t, e) => {
  let s, o = -1, r, i = t[0 * 2 + 1], a = 0, l = 7, c = 4;
  for (i === 0 && (l = 138, c = 3), t[(e + 1) * 2 + 1] = 65535, s = 0; s <= e; s++)
    r = i, i = t[(s + 1) * 2 + 1], !(++a < l && r === i) && (a < c ? n.bl_tree[r * 2] += a : r !== 0 ? (r !== o && n.bl_tree[r * 2]++, n.bl_tree[KC * 2]++) : a <= 10 ? n.bl_tree[BC * 2]++ : n.bl_tree[HC * 2]++, a = 0, o = r, i === 0 ? (l = 138, c = 3) : r === i ? (l = 6, c = 3) : (l = 7, c = 4));
}, wb = (n, t, e) => {
  let s, o = -1, r, i = t[0 * 2 + 1], a = 0, l = 7, c = 4;
  for (i === 0 && (l = 138, c = 3), s = 0; s <= e; s++)
    if (r = i, i = t[(s + 1) * 2 + 1], !(++a < l && r === i)) {
      if (a < c)
        do
          us(n, r, n.bl_tree);
        while (--a !== 0);
      else
        r !== 0 ? (r !== o && (us(n, r, n.bl_tree), a--), us(n, KC, n.bl_tree), on(n, a - 3, 2)) : a <= 10 ? (us(n, BC, n.bl_tree), on(n, a - 3, 3)) : (us(n, HC, n.bl_tree), on(n, a - 11, 7));
      a = 0, o = r, i === 0 ? (l = 138, c = 3) : r === i ? (l = 6, c = 3) : (l = 7, c = 4);
    }
}, UY = (n) => {
  let t;
  for (yb(n, n.dyn_ltree, n.l_desc.max_code), yb(n, n.dyn_dtree, n.d_desc.max_code), wp(n, n.bl_desc), t = Eg - 1; t >= 3 && n.bl_tree[UC[t] * 2 + 1] === 0; t--)
    ;
  return n.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
}, YY = (n, t, e, s) => {
  let o;
  for (on(n, t - 257, 5), on(n, e - 1, 5), on(n, s - 4, 4), o = 0; o < s; o++)
    on(n, n.bl_tree[UC[o] * 2 + 1], 3);
  wb(n, n.dyn_ltree, t - 1), wb(n, n.dyn_dtree, e - 1);
}, QY = (n) => {
  let t = 4093624447, e;
  for (e = 0; e <= 31; e++, t >>>= 1)
    if (t & 1 && n.dyn_ltree[e * 2] !== 0)
      return mb;
  if (n.dyn_ltree[9 * 2] !== 0 || n.dyn_ltree[10 * 2] !== 0 || n.dyn_ltree[13 * 2] !== 0)
    return gb;
  for (e = 32; e < Gl; e++)
    if (n.dyn_ltree[e * 2] !== 0)
      return gb;
  return mb;
};
let Ib = !1;
const jY = (n) => {
  Ib || (HY(), Ib = !0), n.l_desc = new Jd(n.dyn_ltree, YC), n.d_desc = new Jd(n.dyn_dtree, QC), n.bl_desc = new Jd(n.bl_tree, jC), n.bi_buf = 0, n.bi_valid = 0, ev(n);
}, sv = (n, t, e, s) => {
  on(n, (VY << 1) + (s ? 1 : 0), 3), nv(n), sa(n, e), sa(n, ~e), e && n.pending_buf.set(n.window.subarray(t, t + e), n.pending), n.pending += e;
}, JY = (n) => {
  on(n, PC << 1, 3), us(n, Gg, Ts), KY(n);
}, qY = (n, t, e, s) => {
  let o, r, i = 0;
  n.level > 0 ? (n.strm.data_type === WY && (n.strm.data_type = QY(n)), wp(n, n.l_desc), wp(n, n.d_desc), i = UY(n), o = n.opt_len + 3 + 7 >>> 3, r = n.static_len + 3 + 7 >>> 3, r <= o && (o = r)) : o = r = e + 5, e + 4 <= o && t !== -1 ? sv(n, t, e, s) : n.strategy === FY || r === o ? (on(n, (PC << 1) + (s ? 1 : 0), 3), xb(n, Ts, Mi)) : (on(n, (_Y << 1) + (s ? 1 : 0), 3), YY(n, n.l_desc.max_code + 1, n.d_desc.max_code + 1, i + 1), xb(n, n.dyn_ltree, n.dyn_dtree)), ev(n), s && nv(n);
}, tQ = (n, t, e) => (n.pending_buf[n.sym_buf + n.sym_next++] = t, n.pending_buf[n.sym_buf + n.sym_next++] = t >> 8, n.pending_buf[n.sym_buf + n.sym_next++] = e, t === 0 ? n.dyn_ltree[e * 2]++ : (n.matches++, t--, n.dyn_ltree[(na[e] + Gl + 1) * 2]++, n.dyn_dtree[JC(t) * 2]++), n.sym_next === n.sym_end);
var eQ = jY, nQ = sv, sQ = qY, oQ = tQ, rQ = JY, iQ = {
  _tr_init: eQ,
  _tr_stored_block: nQ,
  _tr_flush_block: sQ,
  _tr_tally: oQ,
  _tr_align: rQ
};
const aQ = (n, t, e, s) => {
  let o = n & 65535 | 0, r = n >>> 16 & 65535 | 0, i = 0;
  for (; e !== 0; ) {
    i = e > 2e3 ? 2e3 : e, e -= i;
    do
      o = o + t[s++] | 0, r = r + o | 0;
    while (--i);
    o %= 65521, r %= 65521;
  }
  return o | r << 16 | 0;
};
var oa = aQ;
const lQ = () => {
  let n, t = [];
  for (var e = 0; e < 256; e++) {
    n = e;
    for (var s = 0; s < 8; s++)
      n = n & 1 ? 3988292384 ^ n >>> 1 : n >>> 1;
    t[e] = n;
  }
  return t;
}, cQ = new Uint32Array(lQ()), uQ = (n, t, e, s) => {
  const o = cQ, r = s + e;
  n ^= -1;
  for (let i = s; i < r; i++)
    n = n >>> 8 ^ o[(n ^ t[i]) & 255];
  return n ^ -1;
};
var Se = uQ, Hr = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
}, Ll = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  Z_MEM_ERROR: -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
const { _tr_init: dQ, _tr_stored_block: Ip, _tr_flush_block: hQ, _tr_tally: no, _tr_align: pQ } = iQ, {
  Z_NO_FLUSH: so,
  Z_PARTIAL_FLUSH: fQ,
  Z_FULL_FLUSH: mQ,
  Z_FINISH: Rn,
  Z_BLOCK: Cb,
  Z_OK: Le,
  Z_STREAM_END: vb,
  Z_STREAM_ERROR: gs,
  Z_DATA_ERROR: gQ,
  Z_BUF_ERROR: th,
  Z_DEFAULT_COMPRESSION: bQ,
  Z_FILTERED: xQ,
  Z_HUFFMAN_ONLY: Yl,
  Z_RLE: yQ,
  Z_FIXED: wQ,
  Z_DEFAULT_STRATEGY: IQ,
  Z_UNKNOWN: CQ,
  Z_DEFLATED: Nd
} = Ll, vQ = 9, kQ = 15, SQ = 8, TQ = 29, NQ = 256, Cp = NQ + 1 + TQ, RQ = 30, $Q = 19, EQ = 2 * Cp + 1, GQ = 15, Tt = 3, Js = 258, bs = Js + Tt + 1, LQ = 32, Ur = 42, Dg = 57, vp = 69, kp = 73, Sp = 91, Tp = 103, Fo = 113, Ei = 666, He = 1, fi = 2, sr = 3, mi = 4, DQ = 3, Wo = (n, t) => (n.msg = Hr[t], t), kb = (n) => n * 2 - (n > 4 ? 9 : 0), Bs = (n) => {
  let t = n.length;
  for (; --t >= 0; )
    n[t] = 0;
}, MQ = (n) => {
  let t, e, s, o = n.w_size;
  t = n.hash_size, s = t;
  do
    e = n.head[--s], n.head[s] = e >= o ? e - o : 0;
  while (--t);
  t = o, s = t;
  do
    e = n.prev[--s], n.prev[s] = e >= o ? e - o : 0;
  while (--t);
};
let zQ = (n, t, e) => (t << n.hash_shift ^ e) & n.hash_mask, oo = zQ;
const pn = (n) => {
  const t = n.state;
  let e = t.pending;
  e > n.avail_out && (e = n.avail_out), e !== 0 && (n.output.set(t.pending_buf.subarray(t.pending_out, t.pending_out + e), n.next_out), n.next_out += e, t.pending_out += e, n.total_out += e, n.avail_out -= e, t.pending -= e, t.pending === 0 && (t.pending_out = 0));
}, bn = (n, t) => {
  hQ(n, n.block_start >= 0 ? n.block_start : -1, n.strstart - n.block_start, t), n.block_start = n.strstart, pn(n.strm);
}, Lt = (n, t) => {
  n.pending_buf[n.pending++] = t;
}, wi = (n, t) => {
  n.pending_buf[n.pending++] = t >>> 8 & 255, n.pending_buf[n.pending++] = t & 255;
}, Np = (n, t, e, s) => {
  let o = n.avail_in;
  return o > s && (o = s), o === 0 ? 0 : (n.avail_in -= o, t.set(n.input.subarray(n.next_in, n.next_in + o), e), n.state.wrap === 1 ? n.adler = oa(n.adler, t, o, e) : n.state.wrap === 2 && (n.adler = Se(n.adler, t, o, e)), n.next_in += o, n.total_in += o, o);
}, ov = (n, t) => {
  let e = n.max_chain_length, s = n.strstart, o, r, i = n.prev_length, a = n.nice_match;
  const l = n.strstart > n.w_size - bs ? n.strstart - (n.w_size - bs) : 0, c = n.window, u = n.w_mask, d = n.prev, h = n.strstart + Js;
  let p = c[s + i - 1], f = c[s + i];
  n.prev_length >= n.good_match && (e >>= 2), a > n.lookahead && (a = n.lookahead);
  do
    if (o = t, !(c[o + i] !== f || c[o + i - 1] !== p || c[o] !== c[s] || c[++o] !== c[s + 1])) {
      s += 2, o++;
      do
        ;
      while (c[++s] === c[++o] && c[++s] === c[++o] && c[++s] === c[++o] && c[++s] === c[++o] && c[++s] === c[++o] && c[++s] === c[++o] && c[++s] === c[++o] && c[++s] === c[++o] && s < h);
      if (r = Js - (h - s), s = h - Js, r > i) {
        if (n.match_start = t, i = r, r >= a)
          break;
        p = c[s + i - 1], f = c[s + i];
      }
    }
  while ((t = d[t & u]) > l && --e !== 0);
  return i <= n.lookahead ? i : n.lookahead;
}, Yr = (n) => {
  const t = n.w_size;
  let e, s, o;
  do {
    if (s = n.window_size - n.lookahead - n.strstart, n.strstart >= t + (t - bs) && (n.window.set(n.window.subarray(t, t + t - s), 0), n.match_start -= t, n.strstart -= t, n.block_start -= t, n.insert > n.strstart && (n.insert = n.strstart), MQ(n), s += t), n.strm.avail_in === 0)
      break;
    if (e = Np(n.strm, n.window, n.strstart + n.lookahead, s), n.lookahead += e, n.lookahead + n.insert >= Tt)
      for (o = n.strstart - n.insert, n.ins_h = n.window[o], n.ins_h = oo(n, n.ins_h, n.window[o + 1]); n.insert && (n.ins_h = oo(n, n.ins_h, n.window[o + Tt - 1]), n.prev[o & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = o, o++, n.insert--, !(n.lookahead + n.insert < Tt)); )
        ;
  } while (n.lookahead < bs && n.strm.avail_in !== 0);
}, rv = (n, t) => {
  let e = n.pending_buf_size - 5 > n.w_size ? n.w_size : n.pending_buf_size - 5, s, o, r, i = 0, a = n.strm.avail_in;
  do {
    if (s = 65535, r = n.bi_valid + 42 >> 3, n.strm.avail_out < r || (r = n.strm.avail_out - r, o = n.strstart - n.block_start, s > o + n.strm.avail_in && (s = o + n.strm.avail_in), s > r && (s = r), s < e && (s === 0 && t !== Rn || t === so || s !== o + n.strm.avail_in)))
      break;
    i = t === Rn && s === o + n.strm.avail_in ? 1 : 0, Ip(n, 0, 0, i), n.pending_buf[n.pending - 4] = s, n.pending_buf[n.pending - 3] = s >> 8, n.pending_buf[n.pending - 2] = ~s, n.pending_buf[n.pending - 1] = ~s >> 8, pn(n.strm), o && (o > s && (o = s), n.strm.output.set(n.window.subarray(n.block_start, n.block_start + o), n.strm.next_out), n.strm.next_out += o, n.strm.avail_out -= o, n.strm.total_out += o, n.block_start += o, s -= o), s && (Np(n.strm, n.strm.output, n.strm.next_out, s), n.strm.next_out += s, n.strm.avail_out -= s, n.strm.total_out += s);
  } while (i === 0);
  return a -= n.strm.avail_in, a && (a >= n.w_size ? (n.matches = 2, n.window.set(n.strm.input.subarray(n.strm.next_in - n.w_size, n.strm.next_in), 0), n.strstart = n.w_size, n.insert = n.strstart) : (n.window_size - n.strstart <= a && (n.strstart -= n.w_size, n.window.set(n.window.subarray(n.w_size, n.w_size + n.strstart), 0), n.matches < 2 && n.matches++, n.insert > n.strstart && (n.insert = n.strstart)), n.window.set(n.strm.input.subarray(n.strm.next_in - a, n.strm.next_in), n.strstart), n.strstart += a, n.insert += a > n.w_size - n.insert ? n.w_size - n.insert : a), n.block_start = n.strstart), n.high_water < n.strstart && (n.high_water = n.strstart), i ? mi : t !== so && t !== Rn && n.strm.avail_in === 0 && n.strstart === n.block_start ? fi : (r = n.window_size - n.strstart, n.strm.avail_in > r && n.block_start >= n.w_size && (n.block_start -= n.w_size, n.strstart -= n.w_size, n.window.set(n.window.subarray(n.w_size, n.w_size + n.strstart), 0), n.matches < 2 && n.matches++, r += n.w_size, n.insert > n.strstart && (n.insert = n.strstart)), r > n.strm.avail_in && (r = n.strm.avail_in), r && (Np(n.strm, n.window, n.strstart, r), n.strstart += r, n.insert += r > n.w_size - n.insert ? n.w_size - n.insert : r), n.high_water < n.strstart && (n.high_water = n.strstart), r = n.bi_valid + 42 >> 3, r = n.pending_buf_size - r > 65535 ? 65535 : n.pending_buf_size - r, e = r > n.w_size ? n.w_size : r, o = n.strstart - n.block_start, (o >= e || (o || t === Rn) && t !== so && n.strm.avail_in === 0 && o <= r) && (s = o > r ? r : o, i = t === Rn && n.strm.avail_in === 0 && s === o ? 1 : 0, Ip(n, n.block_start, s, i), n.block_start += s, pn(n.strm)), i ? sr : He);
}, eh = (n, t) => {
  let e, s;
  for (; ; ) {
    if (n.lookahead < bs) {
      if (Yr(n), n.lookahead < bs && t === so)
        return He;
      if (n.lookahead === 0)
        break;
    }
    if (e = 0, n.lookahead >= Tt && (n.ins_h = oo(n, n.ins_h, n.window[n.strstart + Tt - 1]), e = n.prev[n.strstart & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = n.strstart), e !== 0 && n.strstart - e <= n.w_size - bs && (n.match_length = ov(n, e)), n.match_length >= Tt)
      if (s = no(n, n.strstart - n.match_start, n.match_length - Tt), n.lookahead -= n.match_length, n.match_length <= n.max_lazy_match && n.lookahead >= Tt) {
        n.match_length--;
        do
          n.strstart++, n.ins_h = oo(n, n.ins_h, n.window[n.strstart + Tt - 1]), e = n.prev[n.strstart & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = n.strstart;
        while (--n.match_length !== 0);
        n.strstart++;
      } else
        n.strstart += n.match_length, n.match_length = 0, n.ins_h = n.window[n.strstart], n.ins_h = oo(n, n.ins_h, n.window[n.strstart + 1]);
    else
      s = no(n, 0, n.window[n.strstart]), n.lookahead--, n.strstart++;
    if (s && (bn(n, !1), n.strm.avail_out === 0))
      return He;
  }
  return n.insert = n.strstart < Tt - 1 ? n.strstart : Tt - 1, t === Rn ? (bn(n, !0), n.strm.avail_out === 0 ? sr : mi) : n.sym_next && (bn(n, !1), n.strm.avail_out === 0) ? He : fi;
}, Ir = (n, t) => {
  let e, s, o;
  for (; ; ) {
    if (n.lookahead < bs) {
      if (Yr(n), n.lookahead < bs && t === so)
        return He;
      if (n.lookahead === 0)
        break;
    }
    if (e = 0, n.lookahead >= Tt && (n.ins_h = oo(n, n.ins_h, n.window[n.strstart + Tt - 1]), e = n.prev[n.strstart & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = n.strstart), n.prev_length = n.match_length, n.prev_match = n.match_start, n.match_length = Tt - 1, e !== 0 && n.prev_length < n.max_lazy_match && n.strstart - e <= n.w_size - bs && (n.match_length = ov(n, e), n.match_length <= 5 && (n.strategy === xQ || n.match_length === Tt && n.strstart - n.match_start > 4096) && (n.match_length = Tt - 1)), n.prev_length >= Tt && n.match_length <= n.prev_length) {
      o = n.strstart + n.lookahead - Tt, s = no(n, n.strstart - 1 - n.prev_match, n.prev_length - Tt), n.lookahead -= n.prev_length - 1, n.prev_length -= 2;
      do
        ++n.strstart <= o && (n.ins_h = oo(n, n.ins_h, n.window[n.strstart + Tt - 1]), e = n.prev[n.strstart & n.w_mask] = n.head[n.ins_h], n.head[n.ins_h] = n.strstart);
      while (--n.prev_length !== 0);
      if (n.match_available = 0, n.match_length = Tt - 1, n.strstart++, s && (bn(n, !1), n.strm.avail_out === 0))
        return He;
    } else if (n.match_available) {
      if (s = no(n, 0, n.window[n.strstart - 1]), s && bn(n, !1), n.strstart++, n.lookahead--, n.strm.avail_out === 0)
        return He;
    } else
      n.match_available = 1, n.strstart++, n.lookahead--;
  }
  return n.match_available && (s = no(n, 0, n.window[n.strstart - 1]), n.match_available = 0), n.insert = n.strstart < Tt - 1 ? n.strstart : Tt - 1, t === Rn ? (bn(n, !0), n.strm.avail_out === 0 ? sr : mi) : n.sym_next && (bn(n, !1), n.strm.avail_out === 0) ? He : fi;
}, FQ = (n, t) => {
  let e, s, o, r;
  const i = n.window;
  for (; ; ) {
    if (n.lookahead <= Js) {
      if (Yr(n), n.lookahead <= Js && t === so)
        return He;
      if (n.lookahead === 0)
        break;
    }
    if (n.match_length = 0, n.lookahead >= Tt && n.strstart > 0 && (o = n.strstart - 1, s = i[o], s === i[++o] && s === i[++o] && s === i[++o])) {
      r = n.strstart + Js;
      do
        ;
      while (s === i[++o] && s === i[++o] && s === i[++o] && s === i[++o] && s === i[++o] && s === i[++o] && s === i[++o] && s === i[++o] && o < r);
      n.match_length = Js - (r - o), n.match_length > n.lookahead && (n.match_length = n.lookahead);
    }
    if (n.match_length >= Tt ? (e = no(n, 1, n.match_length - Tt), n.lookahead -= n.match_length, n.strstart += n.match_length, n.match_length = 0) : (e = no(n, 0, n.window[n.strstart]), n.lookahead--, n.strstart++), e && (bn(n, !1), n.strm.avail_out === 0))
      return He;
  }
  return n.insert = 0, t === Rn ? (bn(n, !0), n.strm.avail_out === 0 ? sr : mi) : n.sym_next && (bn(n, !1), n.strm.avail_out === 0) ? He : fi;
}, WQ = (n, t) => {
  let e;
  for (; ; ) {
    if (n.lookahead === 0 && (Yr(n), n.lookahead === 0)) {
      if (t === so)
        return He;
      break;
    }
    if (n.match_length = 0, e = no(n, 0, n.window[n.strstart]), n.lookahead--, n.strstart++, e && (bn(n, !1), n.strm.avail_out === 0))
      return He;
  }
  return n.insert = 0, t === Rn ? (bn(n, !0), n.strm.avail_out === 0 ? sr : mi) : n.sym_next && (bn(n, !1), n.strm.avail_out === 0) ? He : fi;
};
function os(n, t, e, s, o) {
  this.good_length = n, this.max_lazy = t, this.nice_length = e, this.max_chain = s, this.func = o;
}
const Gi = [
  /*      good lazy nice chain */
  new os(0, 0, 0, 0, rv),
  /* 0 store only */
  new os(4, 4, 8, 4, eh),
  /* 1 max speed, no lazy matches */
  new os(4, 5, 16, 8, eh),
  /* 2 */
  new os(4, 6, 32, 32, eh),
  /* 3 */
  new os(4, 4, 16, 16, Ir),
  /* 4 lazy matches */
  new os(8, 16, 32, 32, Ir),
  /* 5 */
  new os(8, 16, 128, 128, Ir),
  /* 6 */
  new os(8, 32, 128, 256, Ir),
  /* 7 */
  new os(32, 128, 258, 1024, Ir),
  /* 8 */
  new os(32, 258, 258, 4096, Ir)
  /* 9 max compression */
], VQ = (n) => {
  n.window_size = 2 * n.w_size, Bs(n.head), n.max_lazy_match = Gi[n.level].max_lazy, n.good_match = Gi[n.level].good_length, n.nice_match = Gi[n.level].nice_length, n.max_chain_length = Gi[n.level].max_chain, n.strstart = 0, n.block_start = 0, n.lookahead = 0, n.insert = 0, n.match_length = n.prev_length = Tt - 1, n.match_available = 0, n.ins_h = 0;
};
function _Q() {
  this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = Nd, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new Uint16Array(EQ * 2), this.dyn_dtree = new Uint16Array((2 * RQ + 1) * 2), this.bl_tree = new Uint16Array((2 * $Q + 1) * 2), Bs(this.dyn_ltree), Bs(this.dyn_dtree), Bs(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new Uint16Array(GQ + 1), this.heap = new Uint16Array(2 * Cp + 1), Bs(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new Uint16Array(2 * Cp + 1), Bs(this.depth), this.sym_buf = 0, this.lit_bufsize = 0, this.sym_next = 0, this.sym_end = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
}
const Dl = (n) => {
  if (!n)
    return 1;
  const t = n.state;
  return !t || t.strm !== n || t.status !== Ur && //#ifdef GZIP
  t.status !== Dg && //#endif
  t.status !== vp && t.status !== kp && t.status !== Sp && t.status !== Tp && t.status !== Fo && t.status !== Ei ? 1 : 0;
}, iv = (n) => {
  if (Dl(n))
    return Wo(n, gs);
  n.total_in = n.total_out = 0, n.data_type = CQ;
  const t = n.state;
  return t.pending = 0, t.pending_out = 0, t.wrap < 0 && (t.wrap = -t.wrap), t.status = //#ifdef GZIP
  t.wrap === 2 ? Dg : (
    //#endif
    t.wrap ? Ur : Fo
  ), n.adler = t.wrap === 2 ? 0 : 1, t.last_flush = -2, dQ(t), Le;
}, av = (n) => {
  const t = iv(n);
  return t === Le && VQ(n.state), t;
}, AQ = (n, t) => Dl(n) || n.state.wrap !== 2 ? gs : (n.state.gzhead = t, Le), lv = (n, t, e, s, o, r) => {
  if (!n)
    return gs;
  let i = 1;
  if (t === bQ && (t = 6), s < 0 ? (i = 0, s = -s) : s > 15 && (i = 2, s -= 16), o < 1 || o > vQ || e !== Nd || s < 8 || s > 15 || t < 0 || t > 9 || r < 0 || r > wQ || s === 8 && i !== 1)
    return Wo(n, gs);
  s === 8 && (s = 9);
  const a = new _Q();
  return n.state = a, a.strm = n, a.status = Ur, a.wrap = i, a.gzhead = null, a.w_bits = s, a.w_size = 1 << a.w_bits, a.w_mask = a.w_size - 1, a.hash_bits = o + 7, a.hash_size = 1 << a.hash_bits, a.hash_mask = a.hash_size - 1, a.hash_shift = ~~((a.hash_bits + Tt - 1) / Tt), a.window = new Uint8Array(a.w_size * 2), a.head = new Uint16Array(a.hash_size), a.prev = new Uint16Array(a.w_size), a.lit_bufsize = 1 << o + 6, a.pending_buf_size = a.lit_bufsize * 4, a.pending_buf = new Uint8Array(a.pending_buf_size), a.sym_buf = a.lit_bufsize, a.sym_end = (a.lit_bufsize - 1) * 3, a.level = t, a.strategy = r, a.method = e, av(n);
}, OQ = (n, t) => lv(n, t, Nd, kQ, SQ, IQ), XQ = (n, t) => {
  if (Dl(n) || t > Cb || t < 0)
    return n ? Wo(n, gs) : gs;
  const e = n.state;
  if (!n.output || n.avail_in !== 0 && !n.input || e.status === Ei && t !== Rn)
    return Wo(n, n.avail_out === 0 ? th : gs);
  const s = e.last_flush;
  if (e.last_flush = t, e.pending !== 0) {
    if (pn(n), n.avail_out === 0)
      return e.last_flush = -1, Le;
  } else if (n.avail_in === 0 && kb(t) <= kb(s) && t !== Rn)
    return Wo(n, th);
  if (e.status === Ei && n.avail_in !== 0)
    return Wo(n, th);
  if (e.status === Ur && e.wrap === 0 && (e.status = Fo), e.status === Ur) {
    let o = Nd + (e.w_bits - 8 << 4) << 8, r = -1;
    if (e.strategy >= Yl || e.level < 2 ? r = 0 : e.level < 6 ? r = 1 : e.level === 6 ? r = 2 : r = 3, o |= r << 6, e.strstart !== 0 && (o |= LQ), o += 31 - o % 31, wi(e, o), e.strstart !== 0 && (wi(e, n.adler >>> 16), wi(e, n.adler & 65535)), n.adler = 1, e.status = Fo, pn(n), e.pending !== 0)
      return e.last_flush = -1, Le;
  }
  if (e.status === Dg) {
    if (n.adler = 0, Lt(e, 31), Lt(e, 139), Lt(e, 8), e.gzhead)
      Lt(
        e,
        (e.gzhead.text ? 1 : 0) + (e.gzhead.hcrc ? 2 : 0) + (e.gzhead.extra ? 4 : 0) + (e.gzhead.name ? 8 : 0) + (e.gzhead.comment ? 16 : 0)
      ), Lt(e, e.gzhead.time & 255), Lt(e, e.gzhead.time >> 8 & 255), Lt(e, e.gzhead.time >> 16 & 255), Lt(e, e.gzhead.time >> 24 & 255), Lt(e, e.level === 9 ? 2 : e.strategy >= Yl || e.level < 2 ? 4 : 0), Lt(e, e.gzhead.os & 255), e.gzhead.extra && e.gzhead.extra.length && (Lt(e, e.gzhead.extra.length & 255), Lt(e, e.gzhead.extra.length >> 8 & 255)), e.gzhead.hcrc && (n.adler = Se(n.adler, e.pending_buf, e.pending, 0)), e.gzindex = 0, e.status = vp;
    else if (Lt(e, 0), Lt(e, 0), Lt(e, 0), Lt(e, 0), Lt(e, 0), Lt(e, e.level === 9 ? 2 : e.strategy >= Yl || e.level < 2 ? 4 : 0), Lt(e, DQ), e.status = Fo, pn(n), e.pending !== 0)
      return e.last_flush = -1, Le;
  }
  if (e.status === vp) {
    if (e.gzhead.extra) {
      let o = e.pending, r = (e.gzhead.extra.length & 65535) - e.gzindex;
      for (; e.pending + r > e.pending_buf_size; ) {
        let a = e.pending_buf_size - e.pending;
        if (e.pending_buf.set(e.gzhead.extra.subarray(e.gzindex, e.gzindex + a), e.pending), e.pending = e.pending_buf_size, e.gzhead.hcrc && e.pending > o && (n.adler = Se(n.adler, e.pending_buf, e.pending - o, o)), e.gzindex += a, pn(n), e.pending !== 0)
          return e.last_flush = -1, Le;
        o = 0, r -= a;
      }
      let i = new Uint8Array(e.gzhead.extra);
      e.pending_buf.set(i.subarray(e.gzindex, e.gzindex + r), e.pending), e.pending += r, e.gzhead.hcrc && e.pending > o && (n.adler = Se(n.adler, e.pending_buf, e.pending - o, o)), e.gzindex = 0;
    }
    e.status = kp;
  }
  if (e.status === kp) {
    if (e.gzhead.name) {
      let o = e.pending, r;
      do {
        if (e.pending === e.pending_buf_size) {
          if (e.gzhead.hcrc && e.pending > o && (n.adler = Se(n.adler, e.pending_buf, e.pending - o, o)), pn(n), e.pending !== 0)
            return e.last_flush = -1, Le;
          o = 0;
        }
        e.gzindex < e.gzhead.name.length ? r = e.gzhead.name.charCodeAt(e.gzindex++) & 255 : r = 0, Lt(e, r);
      } while (r !== 0);
      e.gzhead.hcrc && e.pending > o && (n.adler = Se(n.adler, e.pending_buf, e.pending - o, o)), e.gzindex = 0;
    }
    e.status = Sp;
  }
  if (e.status === Sp) {
    if (e.gzhead.comment) {
      let o = e.pending, r;
      do {
        if (e.pending === e.pending_buf_size) {
          if (e.gzhead.hcrc && e.pending > o && (n.adler = Se(n.adler, e.pending_buf, e.pending - o, o)), pn(n), e.pending !== 0)
            return e.last_flush = -1, Le;
          o = 0;
        }
        e.gzindex < e.gzhead.comment.length ? r = e.gzhead.comment.charCodeAt(e.gzindex++) & 255 : r = 0, Lt(e, r);
      } while (r !== 0);
      e.gzhead.hcrc && e.pending > o && (n.adler = Se(n.adler, e.pending_buf, e.pending - o, o));
    }
    e.status = Tp;
  }
  if (e.status === Tp) {
    if (e.gzhead.hcrc) {
      if (e.pending + 2 > e.pending_buf_size && (pn(n), e.pending !== 0))
        return e.last_flush = -1, Le;
      Lt(e, n.adler & 255), Lt(e, n.adler >> 8 & 255), n.adler = 0;
    }
    if (e.status = Fo, pn(n), e.pending !== 0)
      return e.last_flush = -1, Le;
  }
  if (n.avail_in !== 0 || e.lookahead !== 0 || t !== so && e.status !== Ei) {
    let o = e.level === 0 ? rv(e, t) : e.strategy === Yl ? WQ(e, t) : e.strategy === yQ ? FQ(e, t) : Gi[e.level].func(e, t);
    if ((o === sr || o === mi) && (e.status = Ei), o === He || o === sr)
      return n.avail_out === 0 && (e.last_flush = -1), Le;
    if (o === fi && (t === fQ ? pQ(e) : t !== Cb && (Ip(e, 0, 0, !1), t === mQ && (Bs(e.head), e.lookahead === 0 && (e.strstart = 0, e.block_start = 0, e.insert = 0))), pn(n), n.avail_out === 0))
      return e.last_flush = -1, Le;
  }
  return t !== Rn ? Le : e.wrap <= 0 ? vb : (e.wrap === 2 ? (Lt(e, n.adler & 255), Lt(e, n.adler >> 8 & 255), Lt(e, n.adler >> 16 & 255), Lt(e, n.adler >> 24 & 255), Lt(e, n.total_in & 255), Lt(e, n.total_in >> 8 & 255), Lt(e, n.total_in >> 16 & 255), Lt(e, n.total_in >> 24 & 255)) : (wi(e, n.adler >>> 16), wi(e, n.adler & 65535)), pn(n), e.wrap > 0 && (e.wrap = -e.wrap), e.pending !== 0 ? Le : vb);
}, PQ = (n) => {
  if (Dl(n))
    return gs;
  const t = n.state.status;
  return n.state = null, t === Fo ? Wo(n, gQ) : Le;
}, ZQ = (n, t) => {
  let e = t.length;
  if (Dl(n))
    return gs;
  const s = n.state, o = s.wrap;
  if (o === 2 || o === 1 && s.status !== Ur || s.lookahead)
    return gs;
  if (o === 1 && (n.adler = oa(n.adler, t, e, 0)), s.wrap = 0, e >= s.w_size) {
    o === 0 && (Bs(s.head), s.strstart = 0, s.block_start = 0, s.insert = 0);
    let l = new Uint8Array(s.w_size);
    l.set(t.subarray(e - s.w_size, e), 0), t = l, e = s.w_size;
  }
  const r = n.avail_in, i = n.next_in, a = n.input;
  for (n.avail_in = e, n.next_in = 0, n.input = t, Yr(s); s.lookahead >= Tt; ) {
    let l = s.strstart, c = s.lookahead - (Tt - 1);
    do
      s.ins_h = oo(s, s.ins_h, s.window[l + Tt - 1]), s.prev[l & s.w_mask] = s.head[s.ins_h], s.head[s.ins_h] = l, l++;
    while (--c);
    s.strstart = l, s.lookahead = Tt - 1, Yr(s);
  }
  return s.strstart += s.lookahead, s.block_start = s.strstart, s.insert = s.lookahead, s.lookahead = 0, s.match_length = s.prev_length = Tt - 1, s.match_available = 0, n.next_in = i, n.input = a, n.avail_in = r, s.wrap = o, Le;
};
var KQ = OQ, BQ = lv, HQ = av, UQ = iv, YQ = AQ, QQ = XQ, jQ = PQ, JQ = ZQ, qQ = "pako deflate (from Nodeca project)", zi = {
  deflateInit: KQ,
  deflateInit2: BQ,
  deflateReset: HQ,
  deflateResetKeep: UQ,
  deflateSetHeader: YQ,
  deflate: QQ,
  deflateEnd: jQ,
  deflateSetDictionary: JQ,
  deflateInfo: qQ
};
const tj = (n, t) => Object.prototype.hasOwnProperty.call(n, t);
var ej = function(n) {
  const t = Array.prototype.slice.call(arguments, 1);
  for (; t.length; ) {
    const e = t.shift();
    if (e) {
      if (typeof e != "object")
        throw new TypeError(e + "must be non-object");
      for (const s in e)
        tj(e, s) && (n[s] = e[s]);
    }
  }
  return n;
}, nj = (n) => {
  let t = 0;
  for (let s = 0, o = n.length; s < o; s++)
    t += n[s].length;
  const e = new Uint8Array(t);
  for (let s = 0, o = 0, r = n.length; s < r; s++) {
    let i = n[s];
    e.set(i, o), o += i.length;
  }
  return e;
}, Rd = {
  assign: ej,
  flattenChunks: nj
};
let cv = !0;
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch {
  cv = !1;
}
const ra = new Uint8Array(256);
for (let n = 0; n < 256; n++)
  ra[n] = n >= 252 ? 6 : n >= 248 ? 5 : n >= 240 ? 4 : n >= 224 ? 3 : n >= 192 ? 2 : 1;
ra[254] = ra[254] = 1;
var sj = (n) => {
  if (typeof TextEncoder == "function" && TextEncoder.prototype.encode)
    return new TextEncoder().encode(n);
  let t, e, s, o, r, i = n.length, a = 0;
  for (o = 0; o < i; o++)
    e = n.charCodeAt(o), (e & 64512) === 55296 && o + 1 < i && (s = n.charCodeAt(o + 1), (s & 64512) === 56320 && (e = 65536 + (e - 55296 << 10) + (s - 56320), o++)), a += e < 128 ? 1 : e < 2048 ? 2 : e < 65536 ? 3 : 4;
  for (t = new Uint8Array(a), r = 0, o = 0; r < a; o++)
    e = n.charCodeAt(o), (e & 64512) === 55296 && o + 1 < i && (s = n.charCodeAt(o + 1), (s & 64512) === 56320 && (e = 65536 + (e - 55296 << 10) + (s - 56320), o++)), e < 128 ? t[r++] = e : e < 2048 ? (t[r++] = 192 | e >>> 6, t[r++] = 128 | e & 63) : e < 65536 ? (t[r++] = 224 | e >>> 12, t[r++] = 128 | e >>> 6 & 63, t[r++] = 128 | e & 63) : (t[r++] = 240 | e >>> 18, t[r++] = 128 | e >>> 12 & 63, t[r++] = 128 | e >>> 6 & 63, t[r++] = 128 | e & 63);
  return t;
};
const oj = (n, t) => {
  if (t < 65534 && n.subarray && cv)
    return String.fromCharCode.apply(null, n.length === t ? n : n.subarray(0, t));
  let e = "";
  for (let s = 0; s < t; s++)
    e += String.fromCharCode(n[s]);
  return e;
};
var rj = (n, t) => {
  const e = t || n.length;
  if (typeof TextDecoder == "function" && TextDecoder.prototype.decode)
    return new TextDecoder().decode(n.subarray(0, t));
  let s, o;
  const r = new Array(e * 2);
  for (o = 0, s = 0; s < e; ) {
    let i = n[s++];
    if (i < 128) {
      r[o++] = i;
      continue;
    }
    let a = ra[i];
    if (a > 4) {
      r[o++] = 65533, s += a - 1;
      continue;
    }
    for (i &= a === 2 ? 31 : a === 3 ? 15 : 7; a > 1 && s < e; )
      i = i << 6 | n[s++] & 63, a--;
    if (a > 1) {
      r[o++] = 65533;
      continue;
    }
    i < 65536 ? r[o++] = i : (i -= 65536, r[o++] = 55296 | i >> 10 & 1023, r[o++] = 56320 | i & 1023);
  }
  return oj(r, o);
}, ij = (n, t) => {
  t = t || n.length, t > n.length && (t = n.length);
  let e = t - 1;
  for (; e >= 0 && (n[e] & 192) === 128; )
    e--;
  return e < 0 || e === 0 ? t : e + ra[n[e]] > t ? e : t;
}, ia = {
  string2buf: sj,
  buf2string: rj,
  utf8border: ij
};
function aj() {
  this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
}
var uv = aj;
const dv = Object.prototype.toString, {
  Z_NO_FLUSH: lj,
  Z_SYNC_FLUSH: cj,
  Z_FULL_FLUSH: uj,
  Z_FINISH: dj,
  Z_OK: Xc,
  Z_STREAM_END: hj,
  Z_DEFAULT_COMPRESSION: pj,
  Z_DEFAULT_STRATEGY: fj,
  Z_DEFLATED: mj
} = Ll;
function Mg(n) {
  this.options = Rd.assign({
    level: pj,
    method: mj,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: fj
  }, n || {});
  let t = this.options;
  t.raw && t.windowBits > 0 ? t.windowBits = -t.windowBits : t.gzip && t.windowBits > 0 && t.windowBits < 16 && (t.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new uv(), this.strm.avail_out = 0;
  let e = zi.deflateInit2(
    this.strm,
    t.level,
    t.method,
    t.windowBits,
    t.memLevel,
    t.strategy
  );
  if (e !== Xc)
    throw new Error(Hr[e]);
  if (t.header && zi.deflateSetHeader(this.strm, t.header), t.dictionary) {
    let s;
    if (typeof t.dictionary == "string" ? s = ia.string2buf(t.dictionary) : dv.call(t.dictionary) === "[object ArrayBuffer]" ? s = new Uint8Array(t.dictionary) : s = t.dictionary, e = zi.deflateSetDictionary(this.strm, s), e !== Xc)
      throw new Error(Hr[e]);
    this._dict_set = !0;
  }
}
Mg.prototype.push = function(n, t) {
  const e = this.strm, s = this.options.chunkSize;
  let o, r;
  if (this.ended)
    return !1;
  for (t === ~~t ? r = t : r = t === !0 ? dj : lj, typeof n == "string" ? e.input = ia.string2buf(n) : dv.call(n) === "[object ArrayBuffer]" ? e.input = new Uint8Array(n) : e.input = n, e.next_in = 0, e.avail_in = e.input.length; ; ) {
    if (e.avail_out === 0 && (e.output = new Uint8Array(s), e.next_out = 0, e.avail_out = s), (r === cj || r === uj) && e.avail_out <= 6) {
      this.onData(e.output.subarray(0, e.next_out)), e.avail_out = 0;
      continue;
    }
    if (o = zi.deflate(e, r), o === hj)
      return e.next_out > 0 && this.onData(e.output.subarray(0, e.next_out)), o = zi.deflateEnd(this.strm), this.onEnd(o), this.ended = !0, o === Xc;
    if (e.avail_out === 0) {
      this.onData(e.output);
      continue;
    }
    if (r > 0 && e.next_out > 0) {
      this.onData(e.output.subarray(0, e.next_out)), e.avail_out = 0;
      continue;
    }
    if (e.avail_in === 0)
      break;
  }
  return !0;
};
Mg.prototype.onData = function(n) {
  this.chunks.push(n);
};
Mg.prototype.onEnd = function(n) {
  n === Xc && (this.result = Rd.flattenChunks(this.chunks)), this.chunks = [], this.err = n, this.msg = this.strm.msg;
};
const Ql = 16209, gj = 16191;
var bj = function(t, e) {
  let s, o, r, i, a, l, c, u, d, h, p, f, m, g, b, x, w, y, I, C, v, S, N, R;
  const $ = t.state;
  s = t.next_in, N = t.input, o = s + (t.avail_in - 5), r = t.next_out, R = t.output, i = r - (e - t.avail_out), a = r + (t.avail_out - 257), l = $.dmax, c = $.wsize, u = $.whave, d = $.wnext, h = $.window, p = $.hold, f = $.bits, m = $.lencode, g = $.distcode, b = (1 << $.lenbits) - 1, x = (1 << $.distbits) - 1;
  t:
    do {
      f < 15 && (p += N[s++] << f, f += 8, p += N[s++] << f, f += 8), w = m[p & b];
      e:
        for (; ; ) {
          if (y = w >>> 24, p >>>= y, f -= y, y = w >>> 16 & 255, y === 0)
            R[r++] = w & 65535;
          else if (y & 16) {
            I = w & 65535, y &= 15, y && (f < y && (p += N[s++] << f, f += 8), I += p & (1 << y) - 1, p >>>= y, f -= y), f < 15 && (p += N[s++] << f, f += 8, p += N[s++] << f, f += 8), w = g[p & x];
            n:
              for (; ; ) {
                if (y = w >>> 24, p >>>= y, f -= y, y = w >>> 16 & 255, y & 16) {
                  if (C = w & 65535, y &= 15, f < y && (p += N[s++] << f, f += 8, f < y && (p += N[s++] << f, f += 8)), C += p & (1 << y) - 1, C > l) {
                    t.msg = "invalid distance too far back", $.mode = Ql;
                    break t;
                  }
                  if (p >>>= y, f -= y, y = r - i, C > y) {
                    if (y = C - y, y > u && $.sane) {
                      t.msg = "invalid distance too far back", $.mode = Ql;
                      break t;
                    }
                    if (v = 0, S = h, d === 0) {
                      if (v += c - y, y < I) {
                        I -= y;
                        do
                          R[r++] = h[v++];
                        while (--y);
                        v = r - C, S = R;
                      }
                    } else if (d < y) {
                      if (v += c + d - y, y -= d, y < I) {
                        I -= y;
                        do
                          R[r++] = h[v++];
                        while (--y);
                        if (v = 0, d < I) {
                          y = d, I -= y;
                          do
                            R[r++] = h[v++];
                          while (--y);
                          v = r - C, S = R;
                        }
                      }
                    } else if (v += d - y, y < I) {
                      I -= y;
                      do
                        R[r++] = h[v++];
                      while (--y);
                      v = r - C, S = R;
                    }
                    for (; I > 2; )
                      R[r++] = S[v++], R[r++] = S[v++], R[r++] = S[v++], I -= 3;
                    I && (R[r++] = S[v++], I > 1 && (R[r++] = S[v++]));
                  } else {
                    v = r - C;
                    do
                      R[r++] = R[v++], R[r++] = R[v++], R[r++] = R[v++], I -= 3;
                    while (I > 2);
                    I && (R[r++] = R[v++], I > 1 && (R[r++] = R[v++]));
                  }
                } else if (y & 64) {
                  t.msg = "invalid distance code", $.mode = Ql;
                  break t;
                } else {
                  w = g[(w & 65535) + (p & (1 << y) - 1)];
                  continue n;
                }
                break;
              }
          } else if (y & 64)
            if (y & 32) {
              $.mode = gj;
              break t;
            } else {
              t.msg = "invalid literal/length code", $.mode = Ql;
              break t;
            }
          else {
            w = m[(w & 65535) + (p & (1 << y) - 1)];
            continue e;
          }
          break;
        }
    } while (s < o && r < a);
  I = f >> 3, s -= I, f -= I << 3, p &= (1 << f) - 1, t.next_in = s, t.next_out = r, t.avail_in = s < o ? 5 + (o - s) : 5 - (s - o), t.avail_out = r < a ? 257 + (a - r) : 257 - (r - a), $.hold = p, $.bits = f;
};
const Cr = 15, Sb = 852, Tb = 592, Nb = 0, nh = 1, Rb = 2, xj = new Uint16Array([
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
]), yj = new Uint8Array([
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
]), wj = new Uint16Array([
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
]), Ij = new Uint8Array([
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
]), Cj = (n, t, e, s, o, r, i, a) => {
  const l = a.bits;
  let c = 0, u = 0, d = 0, h = 0, p = 0, f = 0, m = 0, g = 0, b = 0, x = 0, w, y, I, C, v, S = null, N;
  const R = new Uint16Array(Cr + 1), $ = new Uint16Array(Cr + 1);
  let F = null, W, _, A;
  for (c = 0; c <= Cr; c++)
    R[c] = 0;
  for (u = 0; u < s; u++)
    R[t[e + u]]++;
  for (p = l, h = Cr; h >= 1 && R[h] === 0; h--)
    ;
  if (p > h && (p = h), h === 0)
    return o[r++] = 1 << 24 | 64 << 16 | 0, o[r++] = 1 << 24 | 64 << 16 | 0, a.bits = 1, 0;
  for (d = 1; d < h && R[d] === 0; d++)
    ;
  for (p < d && (p = d), g = 1, c = 1; c <= Cr; c++)
    if (g <<= 1, g -= R[c], g < 0)
      return -1;
  if (g > 0 && (n === Nb || h !== 1))
    return -1;
  for ($[1] = 0, c = 1; c < Cr; c++)
    $[c + 1] = $[c] + R[c];
  for (u = 0; u < s; u++)
    t[e + u] !== 0 && (i[$[t[e + u]]++] = u);
  if (n === Nb ? (S = F = i, N = 20) : n === nh ? (S = xj, F = yj, N = 257) : (S = wj, F = Ij, N = 0), x = 0, u = 0, c = d, v = r, f = p, m = 0, I = -1, b = 1 << p, C = b - 1, n === nh && b > Sb || n === Rb && b > Tb)
    return 1;
  for (; ; ) {
    W = c - m, i[u] + 1 < N ? (_ = 0, A = i[u]) : i[u] >= N ? (_ = F[i[u] - N], A = S[i[u] - N]) : (_ = 32 + 64, A = 0), w = 1 << c - m, y = 1 << f, d = y;
    do
      y -= w, o[v + (x >> m) + y] = W << 24 | _ << 16 | A | 0;
    while (y !== 0);
    for (w = 1 << c - 1; x & w; )
      w >>= 1;
    if (w !== 0 ? (x &= w - 1, x += w) : x = 0, u++, --R[c] === 0) {
      if (c === h)
        break;
      c = t[e + i[u]];
    }
    if (c > p && (x & C) !== I) {
      for (m === 0 && (m = p), v += d, f = c - m, g = 1 << f; f + m < h && (g -= R[f + m], !(g <= 0)); )
        f++, g <<= 1;
      if (b += 1 << f, n === nh && b > Sb || n === Rb && b > Tb)
        return 1;
      I = x & C, o[I] = p << 24 | f << 16 | v - r | 0;
    }
  }
  return x !== 0 && (o[v + x] = c - m << 24 | 64 << 16 | 0), a.bits = p, 0;
};
var Fi = Cj;
const vj = 0, hv = 1, pv = 2, {
  Z_FINISH: $b,
  Z_BLOCK: kj,
  Z_TREES: jl,
  Z_OK: or,
  Z_STREAM_END: Sj,
  Z_NEED_DICT: Tj,
  Z_STREAM_ERROR: _n,
  Z_DATA_ERROR: fv,
  Z_MEM_ERROR: mv,
  Z_BUF_ERROR: Nj,
  Z_DEFLATED: Eb
} = Ll, $d = 16180, Gb = 16181, Lb = 16182, Db = 16183, Mb = 16184, zb = 16185, Fb = 16186, Wb = 16187, Vb = 16188, _b = 16189, Pc = 16190, ks = 16191, sh = 16192, Ab = 16193, oh = 16194, Ob = 16195, Xb = 16196, Pb = 16197, Zb = 16198, Jl = 16199, ql = 16200, Kb = 16201, Bb = 16202, Hb = 16203, Ub = 16204, Yb = 16205, rh = 16206, Qb = 16207, jb = 16208, qt = 16209, gv = 16210, bv = 16211, Rj = 852, $j = 592, Ej = 15, Gj = Ej, Jb = (n) => (n >>> 24 & 255) + (n >>> 8 & 65280) + ((n & 65280) << 8) + ((n & 255) << 24);
function Lj() {
  this.strm = null, this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new Uint16Array(320), this.work = new Uint16Array(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
}
const br = (n) => {
  if (!n)
    return 1;
  const t = n.state;
  return !t || t.strm !== n || t.mode < $d || t.mode > bv ? 1 : 0;
}, xv = (n) => {
  if (br(n))
    return _n;
  const t = n.state;
  return n.total_in = n.total_out = t.total = 0, n.msg = "", t.wrap && (n.adler = t.wrap & 1), t.mode = $d, t.last = 0, t.havedict = 0, t.flags = -1, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new Int32Array(Rj), t.distcode = t.distdyn = new Int32Array($j), t.sane = 1, t.back = -1, or;
}, yv = (n) => {
  if (br(n))
    return _n;
  const t = n.state;
  return t.wsize = 0, t.whave = 0, t.wnext = 0, xv(n);
}, wv = (n, t) => {
  let e;
  if (br(n))
    return _n;
  const s = n.state;
  return t < 0 ? (e = 0, t = -t) : (e = (t >> 4) + 5, t < 48 && (t &= 15)), t && (t < 8 || t > 15) ? _n : (s.window !== null && s.wbits !== t && (s.window = null), s.wrap = e, s.wbits = t, yv(n));
}, Iv = (n, t) => {
  if (!n)
    return _n;
  const e = new Lj();
  n.state = e, e.strm = n, e.window = null, e.mode = $d;
  const s = wv(n, t);
  return s !== or && (n.state = null), s;
}, Dj = (n) => Iv(n, Gj);
let qb = !0, ih, ah;
const Mj = (n) => {
  if (qb) {
    ih = new Int32Array(512), ah = new Int32Array(32);
    let t = 0;
    for (; t < 144; )
      n.lens[t++] = 8;
    for (; t < 256; )
      n.lens[t++] = 9;
    for (; t < 280; )
      n.lens[t++] = 7;
    for (; t < 288; )
      n.lens[t++] = 8;
    for (Fi(hv, n.lens, 0, 288, ih, 0, n.work, { bits: 9 }), t = 0; t < 32; )
      n.lens[t++] = 5;
    Fi(pv, n.lens, 0, 32, ah, 0, n.work, { bits: 5 }), qb = !1;
  }
  n.lencode = ih, n.lenbits = 9, n.distcode = ah, n.distbits = 5;
}, Cv = (n, t, e, s) => {
  let o;
  const r = n.state;
  return r.window === null && (r.wsize = 1 << r.wbits, r.wnext = 0, r.whave = 0, r.window = new Uint8Array(r.wsize)), s >= r.wsize ? (r.window.set(t.subarray(e - r.wsize, e), 0), r.wnext = 0, r.whave = r.wsize) : (o = r.wsize - r.wnext, o > s && (o = s), r.window.set(t.subarray(e - s, e - s + o), r.wnext), s -= o, s ? (r.window.set(t.subarray(e - s, e), 0), r.wnext = s, r.whave = r.wsize) : (r.wnext += o, r.wnext === r.wsize && (r.wnext = 0), r.whave < r.wsize && (r.whave += o))), 0;
}, zj = (n, t) => {
  let e, s, o, r, i, a, l, c, u, d, h, p, f, m, g = 0, b, x, w, y, I, C, v, S;
  const N = new Uint8Array(4);
  let R, $;
  const F = (
    /* permutation of code lengths */
    new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
  );
  if (br(n) || !n.output || !n.input && n.avail_in !== 0)
    return _n;
  e = n.state, e.mode === ks && (e.mode = sh), i = n.next_out, o = n.output, l = n.avail_out, r = n.next_in, s = n.input, a = n.avail_in, c = e.hold, u = e.bits, d = a, h = l, S = or;
  t:
    for (; ; )
      switch (e.mode) {
        case $d:
          if (e.wrap === 0) {
            e.mode = sh;
            break;
          }
          for (; u < 16; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          if (e.wrap & 2 && c === 35615) {
            e.wbits === 0 && (e.wbits = 15), e.check = 0, N[0] = c & 255, N[1] = c >>> 8 & 255, e.check = Se(e.check, N, 2, 0), c = 0, u = 0, e.mode = Gb;
            break;
          }
          if (e.head && (e.head.done = !1), !(e.wrap & 1) || /* check if zlib header allowed */
          (((c & 255) << 8) + (c >> 8)) % 31) {
            n.msg = "incorrect header check", e.mode = qt;
            break;
          }
          if ((c & 15) !== Eb) {
            n.msg = "unknown compression method", e.mode = qt;
            break;
          }
          if (c >>>= 4, u -= 4, v = (c & 15) + 8, e.wbits === 0 && (e.wbits = v), v > 15 || v > e.wbits) {
            n.msg = "invalid window size", e.mode = qt;
            break;
          }
          e.dmax = 1 << e.wbits, e.flags = 0, n.adler = e.check = 1, e.mode = c & 512 ? _b : ks, c = 0, u = 0;
          break;
        case Gb:
          for (; u < 16; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          if (e.flags = c, (e.flags & 255) !== Eb) {
            n.msg = "unknown compression method", e.mode = qt;
            break;
          }
          if (e.flags & 57344) {
            n.msg = "unknown header flags set", e.mode = qt;
            break;
          }
          e.head && (e.head.text = c >> 8 & 1), e.flags & 512 && e.wrap & 4 && (N[0] = c & 255, N[1] = c >>> 8 & 255, e.check = Se(e.check, N, 2, 0)), c = 0, u = 0, e.mode = Lb;
        case Lb:
          for (; u < 32; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          e.head && (e.head.time = c), e.flags & 512 && e.wrap & 4 && (N[0] = c & 255, N[1] = c >>> 8 & 255, N[2] = c >>> 16 & 255, N[3] = c >>> 24 & 255, e.check = Se(e.check, N, 4, 0)), c = 0, u = 0, e.mode = Db;
        case Db:
          for (; u < 16; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          e.head && (e.head.xflags = c & 255, e.head.os = c >> 8), e.flags & 512 && e.wrap & 4 && (N[0] = c & 255, N[1] = c >>> 8 & 255, e.check = Se(e.check, N, 2, 0)), c = 0, u = 0, e.mode = Mb;
        case Mb:
          if (e.flags & 1024) {
            for (; u < 16; ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            e.length = c, e.head && (e.head.extra_len = c), e.flags & 512 && e.wrap & 4 && (N[0] = c & 255, N[1] = c >>> 8 & 255, e.check = Se(e.check, N, 2, 0)), c = 0, u = 0;
          } else
            e.head && (e.head.extra = null);
          e.mode = zb;
        case zb:
          if (e.flags & 1024 && (p = e.length, p > a && (p = a), p && (e.head && (v = e.head.extra_len - e.length, e.head.extra || (e.head.extra = new Uint8Array(e.head.extra_len)), e.head.extra.set(
            s.subarray(
              r,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              r + p
            ),
            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
            v
          )), e.flags & 512 && e.wrap & 4 && (e.check = Se(e.check, s, p, r)), a -= p, r += p, e.length -= p), e.length))
            break t;
          e.length = 0, e.mode = Fb;
        case Fb:
          if (e.flags & 2048) {
            if (a === 0)
              break t;
            p = 0;
            do
              v = s[r + p++], e.head && v && e.length < 65536 && (e.head.name += String.fromCharCode(v));
            while (v && p < a);
            if (e.flags & 512 && e.wrap & 4 && (e.check = Se(e.check, s, p, r)), a -= p, r += p, v)
              break t;
          } else
            e.head && (e.head.name = null);
          e.length = 0, e.mode = Wb;
        case Wb:
          if (e.flags & 4096) {
            if (a === 0)
              break t;
            p = 0;
            do
              v = s[r + p++], e.head && v && e.length < 65536 && (e.head.comment += String.fromCharCode(v));
            while (v && p < a);
            if (e.flags & 512 && e.wrap & 4 && (e.check = Se(e.check, s, p, r)), a -= p, r += p, v)
              break t;
          } else
            e.head && (e.head.comment = null);
          e.mode = Vb;
        case Vb:
          if (e.flags & 512) {
            for (; u < 16; ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            if (e.wrap & 4 && c !== (e.check & 65535)) {
              n.msg = "header crc mismatch", e.mode = qt;
              break;
            }
            c = 0, u = 0;
          }
          e.head && (e.head.hcrc = e.flags >> 9 & 1, e.head.done = !0), n.adler = e.check = 0, e.mode = ks;
          break;
        case _b:
          for (; u < 32; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          n.adler = e.check = Jb(c), c = 0, u = 0, e.mode = Pc;
        case Pc:
          if (e.havedict === 0)
            return n.next_out = i, n.avail_out = l, n.next_in = r, n.avail_in = a, e.hold = c, e.bits = u, Tj;
          n.adler = e.check = 1, e.mode = ks;
        case ks:
          if (t === kj || t === jl)
            break t;
        case sh:
          if (e.last) {
            c >>>= u & 7, u -= u & 7, e.mode = rh;
            break;
          }
          for (; u < 3; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          switch (e.last = c & 1, c >>>= 1, u -= 1, c & 3) {
            case 0:
              e.mode = Ab;
              break;
            case 1:
              if (Mj(e), e.mode = Jl, t === jl) {
                c >>>= 2, u -= 2;
                break t;
              }
              break;
            case 2:
              e.mode = Xb;
              break;
            case 3:
              n.msg = "invalid block type", e.mode = qt;
          }
          c >>>= 2, u -= 2;
          break;
        case Ab:
          for (c >>>= u & 7, u -= u & 7; u < 32; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          if ((c & 65535) !== (c >>> 16 ^ 65535)) {
            n.msg = "invalid stored block lengths", e.mode = qt;
            break;
          }
          if (e.length = c & 65535, c = 0, u = 0, e.mode = oh, t === jl)
            break t;
        case oh:
          e.mode = Ob;
        case Ob:
          if (p = e.length, p) {
            if (p > a && (p = a), p > l && (p = l), p === 0)
              break t;
            o.set(s.subarray(r, r + p), i), a -= p, r += p, l -= p, i += p, e.length -= p;
            break;
          }
          e.mode = ks;
          break;
        case Xb:
          for (; u < 14; ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          if (e.nlen = (c & 31) + 257, c >>>= 5, u -= 5, e.ndist = (c & 31) + 1, c >>>= 5, u -= 5, e.ncode = (c & 15) + 4, c >>>= 4, u -= 4, e.nlen > 286 || e.ndist > 30) {
            n.msg = "too many length or distance symbols", e.mode = qt;
            break;
          }
          e.have = 0, e.mode = Pb;
        case Pb:
          for (; e.have < e.ncode; ) {
            for (; u < 3; ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            e.lens[F[e.have++]] = c & 7, c >>>= 3, u -= 3;
          }
          for (; e.have < 19; )
            e.lens[F[e.have++]] = 0;
          if (e.lencode = e.lendyn, e.lenbits = 7, R = { bits: e.lenbits }, S = Fi(vj, e.lens, 0, 19, e.lencode, 0, e.work, R), e.lenbits = R.bits, S) {
            n.msg = "invalid code lengths set", e.mode = qt;
            break;
          }
          e.have = 0, e.mode = Zb;
        case Zb:
          for (; e.have < e.nlen + e.ndist; ) {
            for (; g = e.lencode[c & (1 << e.lenbits) - 1], b = g >>> 24, x = g >>> 16 & 255, w = g & 65535, !(b <= u); ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            if (w < 16)
              c >>>= b, u -= b, e.lens[e.have++] = w;
            else {
              if (w === 16) {
                for ($ = b + 2; u < $; ) {
                  if (a === 0)
                    break t;
                  a--, c += s[r++] << u, u += 8;
                }
                if (c >>>= b, u -= b, e.have === 0) {
                  n.msg = "invalid bit length repeat", e.mode = qt;
                  break;
                }
                v = e.lens[e.have - 1], p = 3 + (c & 3), c >>>= 2, u -= 2;
              } else if (w === 17) {
                for ($ = b + 3; u < $; ) {
                  if (a === 0)
                    break t;
                  a--, c += s[r++] << u, u += 8;
                }
                c >>>= b, u -= b, v = 0, p = 3 + (c & 7), c >>>= 3, u -= 3;
              } else {
                for ($ = b + 7; u < $; ) {
                  if (a === 0)
                    break t;
                  a--, c += s[r++] << u, u += 8;
                }
                c >>>= b, u -= b, v = 0, p = 11 + (c & 127), c >>>= 7, u -= 7;
              }
              if (e.have + p > e.nlen + e.ndist) {
                n.msg = "invalid bit length repeat", e.mode = qt;
                break;
              }
              for (; p--; )
                e.lens[e.have++] = v;
            }
          }
          if (e.mode === qt)
            break;
          if (e.lens[256] === 0) {
            n.msg = "invalid code -- missing end-of-block", e.mode = qt;
            break;
          }
          if (e.lenbits = 9, R = { bits: e.lenbits }, S = Fi(hv, e.lens, 0, e.nlen, e.lencode, 0, e.work, R), e.lenbits = R.bits, S) {
            n.msg = "invalid literal/lengths set", e.mode = qt;
            break;
          }
          if (e.distbits = 6, e.distcode = e.distdyn, R = { bits: e.distbits }, S = Fi(pv, e.lens, e.nlen, e.ndist, e.distcode, 0, e.work, R), e.distbits = R.bits, S) {
            n.msg = "invalid distances set", e.mode = qt;
            break;
          }
          if (e.mode = Jl, t === jl)
            break t;
        case Jl:
          e.mode = ql;
        case ql:
          if (a >= 6 && l >= 258) {
            n.next_out = i, n.avail_out = l, n.next_in = r, n.avail_in = a, e.hold = c, e.bits = u, bj(n, h), i = n.next_out, o = n.output, l = n.avail_out, r = n.next_in, s = n.input, a = n.avail_in, c = e.hold, u = e.bits, e.mode === ks && (e.back = -1);
            break;
          }
          for (e.back = 0; g = e.lencode[c & (1 << e.lenbits) - 1], b = g >>> 24, x = g >>> 16 & 255, w = g & 65535, !(b <= u); ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          if (x && !(x & 240)) {
            for (y = b, I = x, C = w; g = e.lencode[C + ((c & (1 << y + I) - 1) >> y)], b = g >>> 24, x = g >>> 16 & 255, w = g & 65535, !(y + b <= u); ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            c >>>= y, u -= y, e.back += y;
          }
          if (c >>>= b, u -= b, e.back += b, e.length = w, x === 0) {
            e.mode = Yb;
            break;
          }
          if (x & 32) {
            e.back = -1, e.mode = ks;
            break;
          }
          if (x & 64) {
            n.msg = "invalid literal/length code", e.mode = qt;
            break;
          }
          e.extra = x & 15, e.mode = Kb;
        case Kb:
          if (e.extra) {
            for ($ = e.extra; u < $; ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            e.length += c & (1 << e.extra) - 1, c >>>= e.extra, u -= e.extra, e.back += e.extra;
          }
          e.was = e.length, e.mode = Bb;
        case Bb:
          for (; g = e.distcode[c & (1 << e.distbits) - 1], b = g >>> 24, x = g >>> 16 & 255, w = g & 65535, !(b <= u); ) {
            if (a === 0)
              break t;
            a--, c += s[r++] << u, u += 8;
          }
          if (!(x & 240)) {
            for (y = b, I = x, C = w; g = e.distcode[C + ((c & (1 << y + I) - 1) >> y)], b = g >>> 24, x = g >>> 16 & 255, w = g & 65535, !(y + b <= u); ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            c >>>= y, u -= y, e.back += y;
          }
          if (c >>>= b, u -= b, e.back += b, x & 64) {
            n.msg = "invalid distance code", e.mode = qt;
            break;
          }
          e.offset = w, e.extra = x & 15, e.mode = Hb;
        case Hb:
          if (e.extra) {
            for ($ = e.extra; u < $; ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            e.offset += c & (1 << e.extra) - 1, c >>>= e.extra, u -= e.extra, e.back += e.extra;
          }
          if (e.offset > e.dmax) {
            n.msg = "invalid distance too far back", e.mode = qt;
            break;
          }
          e.mode = Ub;
        case Ub:
          if (l === 0)
            break t;
          if (p = h - l, e.offset > p) {
            if (p = e.offset - p, p > e.whave && e.sane) {
              n.msg = "invalid distance too far back", e.mode = qt;
              break;
            }
            p > e.wnext ? (p -= e.wnext, f = e.wsize - p) : f = e.wnext - p, p > e.length && (p = e.length), m = e.window;
          } else
            m = o, f = i - e.offset, p = e.length;
          p > l && (p = l), l -= p, e.length -= p;
          do
            o[i++] = m[f++];
          while (--p);
          e.length === 0 && (e.mode = ql);
          break;
        case Yb:
          if (l === 0)
            break t;
          o[i++] = e.length, l--, e.mode = ql;
          break;
        case rh:
          if (e.wrap) {
            for (; u < 32; ) {
              if (a === 0)
                break t;
              a--, c |= s[r++] << u, u += 8;
            }
            if (h -= l, n.total_out += h, e.total += h, e.wrap & 4 && h && (n.adler = e.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/
            e.flags ? Se(e.check, o, h, i - h) : oa(e.check, o, h, i - h)), h = l, e.wrap & 4 && (e.flags ? c : Jb(c)) !== e.check) {
              n.msg = "incorrect data check", e.mode = qt;
              break;
            }
            c = 0, u = 0;
          }
          e.mode = Qb;
        case Qb:
          if (e.wrap && e.flags) {
            for (; u < 32; ) {
              if (a === 0)
                break t;
              a--, c += s[r++] << u, u += 8;
            }
            if (e.wrap & 4 && c !== (e.total & 4294967295)) {
              n.msg = "incorrect length check", e.mode = qt;
              break;
            }
            c = 0, u = 0;
          }
          e.mode = jb;
        case jb:
          S = Sj;
          break t;
        case qt:
          S = fv;
          break t;
        case gv:
          return mv;
        case bv:
        default:
          return _n;
      }
  return n.next_out = i, n.avail_out = l, n.next_in = r, n.avail_in = a, e.hold = c, e.bits = u, (e.wsize || h !== n.avail_out && e.mode < qt && (e.mode < rh || t !== $b)) && Cv(n, n.output, n.next_out, h - n.avail_out), d -= n.avail_in, h -= n.avail_out, n.total_in += d, n.total_out += h, e.total += h, e.wrap & 4 && h && (n.adler = e.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
  e.flags ? Se(e.check, o, h, n.next_out - h) : oa(e.check, o, h, n.next_out - h)), n.data_type = e.bits + (e.last ? 64 : 0) + (e.mode === ks ? 128 : 0) + (e.mode === Jl || e.mode === oh ? 256 : 0), (d === 0 && h === 0 || t === $b) && S === or && (S = Nj), S;
}, Fj = (n) => {
  if (br(n))
    return _n;
  let t = n.state;
  return t.window && (t.window = null), n.state = null, or;
}, Wj = (n, t) => {
  if (br(n))
    return _n;
  const e = n.state;
  return e.wrap & 2 ? (e.head = t, t.done = !1, or) : _n;
}, Vj = (n, t) => {
  const e = t.length;
  let s, o, r;
  return br(n) || (s = n.state, s.wrap !== 0 && s.mode !== Pc) ? _n : s.mode === Pc && (o = 1, o = oa(o, t, e, 0), o !== s.check) ? fv : (r = Cv(n, t, e, e), r ? (s.mode = gv, mv) : (s.havedict = 1, or));
};
var _j = yv, Aj = wv, Oj = xv, Xj = Dj, Pj = Iv, Zj = zj, Kj = Fj, Bj = Wj, Hj = Vj, Uj = "pako inflate (from Nodeca project)", Ns = {
  inflateReset: _j,
  inflateReset2: Aj,
  inflateResetKeep: Oj,
  inflateInit: Xj,
  inflateInit2: Pj,
  inflate: Zj,
  inflateEnd: Kj,
  inflateGetHeader: Bj,
  inflateSetDictionary: Hj,
  inflateInfo: Uj
};
function Yj() {
  this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
}
var Qj = Yj;
const vv = Object.prototype.toString, {
  Z_NO_FLUSH: jj,
  Z_FINISH: Jj,
  Z_OK: aa,
  Z_STREAM_END: lh,
  Z_NEED_DICT: ch,
  Z_STREAM_ERROR: qj,
  Z_DATA_ERROR: tx,
  Z_MEM_ERROR: tJ
} = Ll;
function Ml(n) {
  this.options = Rd.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ""
  }, n || {});
  const t = this.options;
  t.raw && t.windowBits >= 0 && t.windowBits < 16 && (t.windowBits = -t.windowBits, t.windowBits === 0 && (t.windowBits = -15)), t.windowBits >= 0 && t.windowBits < 16 && !(n && n.windowBits) && (t.windowBits += 32), t.windowBits > 15 && t.windowBits < 48 && (t.windowBits & 15 || (t.windowBits |= 15)), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new uv(), this.strm.avail_out = 0;
  let e = Ns.inflateInit2(
    this.strm,
    t.windowBits
  );
  if (e !== aa)
    throw new Error(Hr[e]);
  if (this.header = new Qj(), Ns.inflateGetHeader(this.strm, this.header), t.dictionary && (typeof t.dictionary == "string" ? t.dictionary = ia.string2buf(t.dictionary) : vv.call(t.dictionary) === "[object ArrayBuffer]" && (t.dictionary = new Uint8Array(t.dictionary)), t.raw && (e = Ns.inflateSetDictionary(this.strm, t.dictionary), e !== aa)))
    throw new Error(Hr[e]);
}
Ml.prototype.push = function(n, t) {
  const e = this.strm, s = this.options.chunkSize, o = this.options.dictionary;
  let r, i, a;
  if (this.ended)
    return !1;
  for (t === ~~t ? i = t : i = t === !0 ? Jj : jj, vv.call(n) === "[object ArrayBuffer]" ? e.input = new Uint8Array(n) : e.input = n, e.next_in = 0, e.avail_in = e.input.length; ; ) {
    for (e.avail_out === 0 && (e.output = new Uint8Array(s), e.next_out = 0, e.avail_out = s), r = Ns.inflate(e, i), r === ch && o && (r = Ns.inflateSetDictionary(e, o), r === aa ? r = Ns.inflate(e, i) : r === tx && (r = ch)); e.avail_in > 0 && r === lh && e.state.wrap > 0 && n[e.next_in] !== 0; )
      Ns.inflateReset(e), r = Ns.inflate(e, i);
    switch (r) {
      case qj:
      case tx:
      case ch:
      case tJ:
        return this.onEnd(r), this.ended = !0, !1;
    }
    if (a = e.avail_out, e.next_out && (e.avail_out === 0 || r === lh))
      if (this.options.to === "string") {
        let l = ia.utf8border(e.output, e.next_out), c = e.next_out - l, u = ia.buf2string(e.output, l);
        e.next_out = c, e.avail_out = s - c, c && e.output.set(e.output.subarray(l, l + c), 0), this.onData(u);
      } else
        this.onData(e.output.length === e.next_out ? e.output : e.output.subarray(0, e.next_out));
    if (!(r === aa && a === 0)) {
      if (r === lh)
        return r = Ns.inflateEnd(this.strm), this.onEnd(r), this.ended = !0, !0;
      if (e.avail_in === 0)
        break;
    }
  }
  return !0;
};
Ml.prototype.onData = function(n) {
  this.chunks.push(n);
};
Ml.prototype.onEnd = function(n) {
  n === aa && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = Rd.flattenChunks(this.chunks)), this.chunks = [], this.err = n, this.msg = this.strm.msg;
};
function zg(n, t) {
  const e = new Ml(t);
  if (e.push(n), e.err)
    throw e.msg || Hr[e.err];
  return e.result;
}
function eJ(n, t) {
  return t = t || {}, t.raw = !0, zg(n, t);
}
var nJ = Ml, sJ = zg, oJ = eJ, rJ = zg, iJ = Ll, aJ = {
  Inflate: nJ,
  inflate: sJ,
  inflateRaw: oJ,
  ungzip: rJ,
  constants: iJ
};
const { Inflate: g6, inflate: lJ, inflateRaw: b6, ungzip: x6 } = aJ;
var cJ = lJ;
const kv = "", ex = typeof window < "u" && window.Blob && new Blob([atob(kv)], { type: "text/javascript;charset=utf-8" });
function uJ() {
  const n = ex && (window.URL || window.webkitURL).createObjectURL(ex);
  try {
    return n ? new Worker(n) : new Worker("data:application/javascript;base64," + kv);
  } finally {
    n && (window.URL || window.webkitURL).revokeObjectURL(n);
  }
}
const dJ = (n, t) => [
  [
    n[0][0] * t[0][0] + n[0][2] * t[2][0],
    n[0][0] * t[0][1] + n[0][2] * t[2][1],
    n[0][0] * t[0][2] + n[0][2] * t[2][2],
    n[0][0] * t[0][3] + n[0][2] * t[2][3]
  ],
  [
    n[1][1] * t[1][0] + n[1][2] * t[2][0],
    n[1][1] * t[1][1] + n[1][2] * t[2][1],
    n[1][1] * t[1][2] + n[1][2] * t[2][2],
    n[1][1] * t[1][3] + n[1][2] * t[2][3]
  ],
  [
    t[2][0],
    t[2][1],
    t[2][2],
    t[2][3]
  ]
], hJ = (n, t, e, s) => {
  const o = n[0][0] * t + n[0][1] * e + n[0][3], r = n[1][0] * t + n[1][1] * e + n[1][3], i = n[2][0] * t + n[2][1] * e + n[2][3];
  return { x: o, y: r, z: i };
}, pJ = (n, t, e, s) => {
  const { x: o, y: r, z: i } = hJ(n, t, e);
  return { x: o / i, y: r / i };
}, fJ = 6, mJ = 1, gJ = 10, bJ = 1, xJ = 0.8, yJ = 1, rs = 1e3;
class wJ {
  constructor(t, e, s, o, r, i = !1) {
    this.markerDimensions = t, this.trackingDataList = e, this.projectionTransform = s, this.debugMode = i, this.trackingKeyframeList = [];
    for (let l = 0; l < e.length; l++)
      this.trackingKeyframeList.push(e[l][yJ]);
    let a = 0;
    for (let l = 0; l < this.trackingKeyframeList.length; l++)
      a = Math.max(a, this.trackingKeyframeList[l].points.length);
    this.featurePointsListT = [], this.imagePixelsListT = [], this.imagePropertiesListT = [];
    for (let l = 0; l < this.trackingKeyframeList.length; l++) {
      const { featurePoints: c, imagePixels: u, imageProperties: d } = this._prebuild(this.trackingKeyframeList[l], a);
      this.featurePointsListT[l] = c, this.imagePixelsListT[l] = u, this.imagePropertiesListT[l] = d;
    }
    this.kernelCaches = {};
  }
  dummyRun(t) {
    let e = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]];
    for (let s = 0; s < this.featurePointsListT.length; s++)
      this.track(t, e, s);
  }
  track(t, e, s) {
    let o = {};
    const r = dJ(this.projectionTransform, e), i = this._buildAdjustedModelViewTransform(r);
    this.markerDimensions[s][0], this.markerDimensions[s][1], this.trackingKeyframeList[s].width, this.trackingKeyframeList[s].height;
    const a = this.featurePointsListT[s], l = this.imagePixelsListT[s], c = this.imagePropertiesListT[s], u = this._computeProjection(i, t, s), { matchingPointsT: d, simT: h } = this._computeMatching(a, l, c, u), p = d.arraySync(), f = h.arraySync(), m = this.trackingKeyframeList[s], g = [], b = [], x = [];
    for (let w = 0; w < p.length; w++)
      if (f[w] > xJ && w < m.points.length) {
        x.push(w);
        const y = pJ(r, p[w][0], p[w][1]);
        b.push(y), g.push({ x: m.points[w].x / m.scale, y: m.points[w].y / m.scale, z: 0 });
      }
    return this.debugMode && (o = {
      projectedImage: u.arraySync(),
      matchingPoints: d.arraySync(),
      goodTrack: x,
      trackedPoints: b
    }), i.dispose(), u.dispose(), d.dispose(), h.dispose(), { worldCoords: g, screenCoords: b, debugExtra: o };
  }
  _computeMatching(t, e, s, o) {
    const r = fJ, i = r * 2 + 1, l = gJ * mJ, c = bJ, u = l * 2 + 1, d = o.shape[0], h = o.shape[1], p = t.shape[0];
    if (!this.kernelCaches.computeMatching) {
      const f = {
        variableNames: ["features", "markerPixels", "markerProperties", "targetPixels"],
        outputShape: [p, u * u],
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int searchOffsetIndex = coords[1];

	    int markerWidth = int(getMarkerProperties(0));
	    int markerHeight = int(getMarkerProperties(1));
	    float markerScale = getMarkerProperties(2);

	    int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	    int searchOffsetY = searchOffsetIndex / ${u} * ${c};

	    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);
	    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);

	    int sx = sCenterX + searchOffsetX - ${l};
	    int sy = sCenterY + searchOffsetY - ${l};

	    if (sx < ${r} || sx >= (${h} - ${r}) || sy < ${r} || sy >= (${d} - ${r})) {
	      setOutput(-2.);
	    } 
	    else {
	      float sumPoint = 0.;
	      float sumPointSquare = 0.;
	      float sumTemplate = 0.;
	      float sumTemplateSquare = 0.;
	      float sumPointTemplate = 0.;

	      for (int templateOffsetY = 0; templateOffsetY < ${i}; templateOffsetY++) {
		for (int templateOffsetX = 0; templateOffsetX < ${i}; templateOffsetX++) {
		  int fx2 = sCenterX + templateOffsetX - ${r};
		  int fy2 = sCenterY + templateOffsetY - ${r};

		  int sx2 = sx + templateOffsetX - ${r};
		  int sy2 = sy + templateOffsetY - ${r};

		  int markerPixelIndex = fy2 * markerWidth + fx2;
		  float markerPixel = getMarkerPixels(markerPixelIndex);
		  float targetPixel = getTargetPixels(sy2, sx2);

		  sumTemplate += markerPixel;
		  sumTemplateSquare += markerPixel * markerPixel;
		  sumPoint += targetPixel;
		  sumPointSquare += targetPixel * targetPixel;
		  sumPointTemplate += targetPixel * markerPixel;
		}
	      }

	      // Normalized cross-correlation
	      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)
	      float count = float(${i} * ${i});
	      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);
	      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);

	      if (pointVariance < 0.0000001) {
		setOutput(-3.);
	      } else if (templateVariance < 0.0000001) {
		//setOutput(sumTemplate);
		setOutput(-4.);
	      } else {
		sumPointTemplate -= sumPoint / count * sumTemplate;
		float sim = sumPointTemplate / pointVariance / templateVariance;  
		setOutput(sim);
	      }
	    }
	  }
	`
      }, m = {
        variableNames: ["featurePoints", "markerProperties", "maxIndex"],
        outputShape: [p, 2],
        // [x, y]
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float markerScale = getMarkerProperties(2);

	    int featureIndex = coords[0];

	    int maxIndex = int(getMaxIndex(featureIndex));
	    int searchLocationIndex = maxIndex / ${u * u};
	    int searchOffsetIndex = imod(maxIndex, ${u * u});

	    if (coords[1] == 0) {
	      int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - ${l}) / markerScale);
	    }
	    else if (coords[1] == 1) {
	      int searchOffsetY = searchOffsetIndex / ${u} * ${c};
	      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - ${l}) / markerScale);
	    }
	  }
	`
      }, g = {
        variableNames: ["sims", "maxIndex"],
        outputShape: [p],
        userCode: `
	  void main() {
	    int featureIndex = getOutputCoords();
	    int maxIndex = int(getMaxIndex(featureIndex));
	    setOutput(getSims(featureIndex, maxIndex));
	  }
	`
      };
      this.kernelCaches.computeMatching = [f, m, g];
    }
    return z(() => {
      const f = this.kernelCaches.computeMatching, m = this._compileAndRun(f[0], [t, e, s, o]), g = m.argMax(1), b = this._compileAndRun(f[1], [t, s, g]), x = this._compileAndRun(f[2], [m, g]);
      return { matchingPointsT: b, simT: x };
    });
  }
  _computeProjection(t, e, s) {
    const o = this.trackingKeyframeList[s].width, r = this.trackingKeyframeList[s].height, i = this.trackingKeyframeList[s].scale, a = o + "-" + r + "-" + i;
    if (this.kernelCaches.computeProjection || (this.kernelCaches.computeProjection = {}), !this.kernelCaches.computeProjection[a]) {
      const l = {
        variableNames: ["M", "pixel"],
        outputShape: [r, o],
        userCode: `
	  void main() {
	      ivec2 coords = getOutputCoords();

	      float m00 = getM(0, 0) * ${rs}.;
	      float m01 = getM(0, 1) * ${rs}.;
	      float m03 = getM(0, 3) * ${rs}.;
	      float m10 = getM(1, 0) * ${rs}.;
	      float m11 = getM(1, 1) * ${rs}.;
	      float m13 = getM(1, 3) * ${rs}.;
	      float m20 = getM(2, 0) * ${rs}.;
	      float m21 = getM(2, 1) * ${rs}.;
	      float m23 = getM(2, 3) * ${rs}.;

	      float y = float(coords[0]) / float(${i});
	      float x = float(coords[1]) / float(${i});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux)));
	    }
	`
      };
      this.kernelCaches.computeProjection[a] = l;
    }
    return z(() => {
      const l = this.kernelCaches.computeProjection[a];
      return this._compileAndRun(l, [t, e]);
    });
  }
  _buildAdjustedModelViewTransform(t) {
    return z(() => {
      let e = [];
      for (let o = 0; o < t.length; o++) {
        e.push([]);
        for (let r = 0; r < t[o].length; r++)
          e[o].push(t[o][r] / rs);
      }
      return De(e, [3, 4]);
    });
  }
  _prebuild(t, e) {
    return z(() => {
      const s = t.scale, o = [];
      for (let l = 0; l < e; l++)
        l < t.points.length ? o.push([t.points[l].x / s, t.points[l].y / s]) : o.push([-1, -1]);
      const r = De(t.data, [t.width * t.height]), i = De([t.width, t.height, t.scale], [3]);
      return {
        featurePoints: De(o, [o.length, 2], "float32"),
        imagePixels: r,
        imageProperties: i
      };
    });
  }
  _compileAndRun(t, e) {
    const s = Us().compileAndRun(t, e);
    return Ot().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
}
const tc = [
  // ring 5
  {
    sigma: 0.55,
    points: [
      [-1, 0],
      [-0.5, -0.866025],
      [0.5, -0.866025],
      [1, -0],
      [0.5, 0.866025],
      [-0.5, 0.866025]
    ]
  },
  // ring 4
  {
    sigma: 0.475,
    points: [
      [0, 0.930969],
      [-0.806243, 0.465485],
      [-0.806243, -0.465485],
      [-0, -0.930969],
      [0.806243, -0.465485],
      [0.806243, 0.465485]
    ]
  },
  // ring 3
  {
    sigma: 0.4,
    points: [
      [0.847306, -0],
      [0.423653, 0.733789],
      [-0.423653, 0.733789],
      [-0.847306, 0],
      [-0.423653, -0.733789],
      [0.423653, -0.733789]
    ]
  },
  // ring 2
  {
    sigma: 0.325,
    points: [
      [-0, -0.741094],
      [0.641806, -0.370547],
      [0.641806, 0.370547],
      [0, 0.741094],
      [-0.641806, 0.370547],
      [-0.641806, -0.370547]
    ]
  },
  // ring 1
  {
    sigma: 0.25,
    points: [
      [-0.595502, 0],
      [-0.297751, -0.51572],
      [0.297751, -0.51572],
      [0.595502, -0],
      [0.297751, 0.51572],
      [-0.297751, 0.51572]
    ]
  },
  // ring 0
  {
    sigma: 0.175,
    points: [
      [0, 0.362783],
      [-0.314179, 0.181391],
      [-0.314179, -0.181391],
      [-0, -0.362783],
      [0.314179, -0.181391],
      [0.314179, 0.181391]
    ]
  },
  // center
  {
    sigma: 0.1,
    points: [
      [0, 0]
    ]
  }
], rr = [];
for (let n = 0; n < tc.length; n++) {
  const t = tc[n].sigma;
  for (let e = 0; e < tc[n].points.length; e++) {
    const s = tc[n].points[e];
    rr.push([t, s[0], s[1]]);
  }
}
const uh = {};
function IJ(n) {
  const t = n.shape[1], e = n.shape[0], s = "w" + t + "h" + e;
  if (!uh.hasOwnProperty(s)) {
    const o = {
      variableNames: ["p"],
      outputShape: [e, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0], coords[1]-2);
          sum += getP(coords[0], coords[1]-1) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0], coords[1]+1) * 4.;
          sum += getP(coords[0], coords[1]+2);
          setOutput(sum);
        }
      `
    }, r = {
      variableNames: ["p"],
      outputShape: [e, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0]-2, coords[1]);
          sum += getP(coords[0]-1, coords[1]) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0]+1, coords[1]) * 4.;
          sum += getP(coords[0]+2, coords[1]);
          sum /= 256.;
          setOutput(sum);
        }
      `
    };
    uh[s] = [o, r];
  }
  return uh[s];
}
const CJ = (n) => {
  const t = n.inputs.image, e = n.backend, [s, o] = IJ(t), r = e.runWebGLProgram(s, [t], t.dtype), i = e.runWebGLProgram(o, [r], t.dtype);
  return e.disposeIntermediateTensorInfo(r), i;
}, vJ = {
  //: KernelConfig
  kernelName: "BinomialFilter",
  backendName: "webgl",
  kernelFunc: CJ
  // as {} as KernelFunc,
}, ec = 7, nx = 3, kJ = nx * nx, dh = 4, SJ = (dh + 1) * (dh + 1) / dh, hh = {};
function TJ(n) {
  const t = n.shape[1], e = n.shape[0], s = "w" + t + "h" + e;
  if (!hh.hasOwnProperty(s)) {
    const o = {
      variableNames: ["image0", "image1", "image2"],
      outputShape: [e, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();
    
          int y = coords[0];
          int x = coords[1];
    
          float value = getImage1(y, x);
    
          // Step 1: find local maxima/minima
          if (value * value < ${kJ}.) {
            setOutput(0.);
            return;
          }
          if (y < ${ec} || y > ${e - 1 - ec}) {
            setOutput(0.);
            return;
          }
          if (x < ${ec} || x > ${t - 1 - ec}) {
            setOutput(0.);
            return;
          }
    
          bool isMax = true;
          bool isMin = true;
          for (int dy = -1; dy <= 1; dy++) {
            for (int dx = -1; dx <= 1; dx++) {
              float value0 = getImage0(y+dy, x+dx);
              float value1 = getImage1(y+dy, x+dx);
              float value2 = getImage2(y+dy, x+dx);
    
        if (value < value0 || value < value1 || value < value2) {
          isMax = false;
        }
        if (value > value0 || value > value1 || value > value2) {
          isMin = false;
        }
            }
          }
    
          if (!isMax && !isMin) {
            setOutput(0.);
            return;
          }
    
          // compute edge score and reject based on threshold
          float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);
          float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);
          float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));
    
          float det = (dxx * dyy) - (dxy * dxy);
    
          if (abs(det) < 0.0001) { // determinant undefined. no solution
            setOutput(0.);
            return;
          }
    
          float edgeScore = (dxx + dyy) * (dxx + dyy) / det;
    
          if (abs(edgeScore) >= ${SJ} ) {
            setOutput(0.);
            return;
          }
          setOutput(getImage1(y,x));
        }
      `
    };
    hh[s] = o;
  }
  return hh[s];
}
const NJ = (n) => {
  let { image0: t, image1: e, image2: s } = n.inputs;
  const o = n.backend, r = TJ(e);
  return t = Ot().runKernel("DownsampleBilinear", { image: t }), s = Ot().runKernel("UpsampleBilinear", { image: s, targetImage: e }), o.runWebGLProgram(r, [t, e, s], e.dtype);
}, RJ = {
  //: KernelConfig
  kernelName: "BuildExtremas",
  backendName: "webgl",
  kernelFunc: NJ
  // as {} as KernelFunc,
}, Ii = 36, ph = {};
function $J(n) {
  const t = n.shape[0];
  if (!ph.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0]],
      userCode: `
            void main() {
                int featureIndex = getOutputCoords();

                int maxIndex = 0;
                for (int i = 1; i < ${Ii}; i++) {
                    if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {
                        maxIndex = i;
                    }
                }

                int prev = imod(maxIndex - 1 + ${Ii}, ${Ii});
                int next = imod(maxIndex + 1, ${Ii});

                /**
                 * Fit a quatratic to 3 points. The system of equations is:
                 *
                 * y0 = A*x0^2 + B*x0 + C
                 * y1 = A*x1^2 + B*x1 + C
                 * y2 = A*x2^2 + B*x2 + C
                 *
                 * This system of equations is solved for A,B,C.
                 */
                float p10 = float(maxIndex - 1);
                float p11 = getHistogram(featureIndex, prev); 
                float p20 = float(maxIndex);
                float p21 = getHistogram(featureIndex, maxIndex); 
                float p30 = float(maxIndex + 1);
                float p31 = getHistogram(featureIndex, next); 

                float d1 = (p30-p20)*(p30-p10);
                float d2 = (p10-p20)*(p30-p10);
                float d3 = p10-p20;

                // If any of the denominators are zero then, just use maxIndex.
                    float fbin = float(maxIndex);
                if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {
                float a = p10*p10;
                float b = p20*p20;

                // Solve for the coefficients A,B,C
                float A = ((p31-p21)/d1)-((p11-p21)/d2);
                float B = ((p11-p21)+(A*(b-a)))/d3;
                float C = p11-(A*a)-(B*p10);
                fbin = -B / (2. * A);
                }

                float an = 2.0 *${Math.PI} * (fbin + 0.5) / ${Ii}. - ${Math.PI};
                setOutput(an);
            }
            `
    };
    ph[t] = e;
  }
  return ph[t];
}
const EJ = (n) => {
  const { histograms: t } = n.inputs, e = n.backend, s = $J(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, GJ = {
  //: KernelConfig
  kernelName: "ComputeExtremaAngles",
  backendName: "webgl",
  kernelFunc: EJ
  // as {} as KernelFunc,
}, sx = 7, fh = {};
function LJ(n, t) {
  const e = `${n}|${t.shape[0]}`;
  if (!fh.hasOwnProperty(e)) {
    const s = [];
    for (let i = 1; i < n; i++)
      s.push("image" + i);
    let o = "float getPixel(int octave, int y, int x) {";
    for (let i = 1; i < n; i++)
      o += `
  if (octave == ${i}) {
	return getImage${i}(y, x);
  }
`;
    o += "}";
    const r = {
      variableNames: [...s, "extrema", "angles", "freakPoints"],
      outputShape: [t.shape[0], rr.length],
      userCode: `
  ${o}
  void main() {
	ivec2 coords = getOutputCoords();
	int featureIndex = coords[0];
	int freakIndex = coords[1];

	float freakSigma = getFreakPoints(freakIndex, 0);
	float freakX = getFreakPoints(freakIndex, 1);
	float freakY = getFreakPoints(freakIndex, 2);

	int octave = int(getExtrema(featureIndex, 1));
	float inputY = getExtrema(featureIndex, 2);
	float inputX = getExtrema(featureIndex, 3);
	float inputAngle = getAngles(featureIndex);
	float cos = ${sx}. * cos(inputAngle);
	float sin = ${sx}. * sin(inputAngle);

	float yp = inputY + freakX * sin + freakY * cos;
	float xp = inputX + freakX * cos + freakY * -sin;

	int x0 = int(floor(xp));
	int x1 = x0 + 1;
	int y0 = int(floor(yp));
	int y1 = y0 + 1;

	float f1 = getPixel(octave, y0, x0);
	float f2 = getPixel(octave, y0, x1);
	float f3 = getPixel(octave, y1, x0);
	float f4 = getPixel(octave, y1, x1);

	float x1f = float(x1);
	float y1f = float(y1);
	float x0f = float(x0);
	float y0f = float(y0);

	// ratio for interpolation between four neighbouring points
	float value = (x1f - xp) * (y1f - yp) * f1
		+ (xp - x0f) * (y1f - yp) * f2
		+ (x1f - xp) * (yp - y0f) * f3
		+ (xp - x0f) * (yp - y0f) * f4;

	setOutput(value);
  }
`
    };
    fh[e] = r;
  }
  return fh[e];
}
const DJ = (n) => {
  const { gaussianImagesT: t, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: o, pyramidImagesLength: r } = n.inputs, i = n.backend, a = LJ(r, e);
  return i.runWebGLProgram(a, [...t, e, s, o], "float32");
}, MJ = {
  //: KernelConfig
  kernelName: "ComputeExtremaFreak",
  backendName: "webgl",
  kernelFunc: DJ
  // as {} as KernelFunc,
}, Sv = (rr.length - 1) * rr.length / 2, zJ = Math.ceil(Sv / 8), mh = {};
function FJ(n) {
  const t = `${n.shape[0]}`;
  if (!mh.hasOwnProperty(t)) {
    const e = {
      variableNames: ["freak", "p"],
      outputShape: [n.shape[0], zJ],
      userCode: `
  void main() {
    ivec2 coords = getOutputCoords();
    int featureIndex = coords[0];
    int descIndex = coords[1] * 8;

    int sum = 0;
    for (int i = 0; i < 8; i++) {
      if (descIndex + i >= ${Sv}) {
        continue;
      }

      int p1 = int(getP(descIndex + i, 0));
      int p2 = int(getP(descIndex + i, 1));

      float v1 = getFreak(featureIndex, p1);
      float v2 = getFreak(featureIndex, p2);

      if (v1 < v2 + 0.01) {
        sum += int(pow(2.0, float(7 - i)));
      }
    }
    setOutput(float(sum));
  }
`
    };
    mh[t] = e;
  }
  return mh[t];
}
const WJ = (n) => {
  const { extremaFreaks: t, positionT: e } = n.inputs, { backend: s } = n, o = FJ(t);
  return s.runWebGLProgram(o, [t, e], "int32");
}, VJ = {
  //: KernelConfig
  kernelName: "ComputeFreakDescriptors",
  backendName: "webgl",
  kernelFunc: WJ
  // as {} as KernelFunc,
}, gh = {};
function _J(n, t) {
  const e = `${n}|${t}`;
  if (!gh.hasOwnProperty(e)) {
    const s = [];
    let o = "float getPixel(int octave, int y, int x) {";
    for (let r = 1; r < n; r++)
      s.push("image" + r), o += `
				if (octave == ${r}) {
					return getImage${r}(y, x);
				}
			`;
    o += "}", gh[e] = {
      variableNames: [...s, "extrema"],
      outputShape: [t, 3, 3],
      // 3x3 pixels around the extrema
      userCode: `
			${o}
		
			void main() {
				ivec3 coords = getOutputCoords();
				int featureIndex = coords[0];
				float score = getExtrema(featureIndex, 0);
				if (score == 0.0) {
					return;
				}
		
				int dy = coords[1]-1;
				int dx = coords[2]-1;
				int octave = int(getExtrema(featureIndex, 1));
				int y = int(getExtrema(featureIndex, 2));
				int x = int(getExtrema(featureIndex, 3));
				setOutput(getPixel(octave, y+dy, x+dx));
			}
			`
    };
  }
  return gh[e];
}
const AJ = (n) => {
  const { prunedExtremasList: t, dogPyramidImagesT: e } = n.inputs, s = n.backend, o = _J(e.length, t.length), r = De(t, [t.length, t[0].length], "int32");
  return s.runWebGLProgram(o, [...e.slice(1), r], e[0].dtype);
}, OJ = {
  //: KernelConfig
  kernelName: "ComputeLocalization",
  backendName: "webgl",
  kernelFunc: AJ
  // as {} as KernelFunc,
}, XJ = 0.159154943091895, vr = 36, bh = {};
function PJ(n, t, e) {
  const s = `${e}|${n.shape[0]}|${t.shape[0]}`;
  if (!bh.hasOwnProperty(s)) {
    const o = [];
    for (let l = 1; l < e; l++)
      o.push("image" + l);
    let r = "float getPixel(int octave, int y, int x) {";
    for (let l = 1; l < e; l++)
      r += `
            if (octave == ${l}) {
                return getImage${l}(y, x);
            }
            `;
    r += "}";
    const i = {
      variableNames: [...o, "extrema", "radial"],
      outputShape: [n.shape[0], t.shape[0], 2],
      // last dimension: [fbin, magnitude]
      userCode: `
                ${r}

                void main() {
                    ivec3 coords = getOutputCoords();
                    int featureIndex = coords[0];
                    int radialIndex = coords[1];
                    int propertyIndex = coords[2];

                    int radialY = int(getRadial(radialIndex, 0));
                    int radialX = int(getRadial(radialIndex, 1));
                    float radialW = getRadial(radialIndex, 2);

                    int octave = int(getExtrema(featureIndex, 1));
                    int y = int(getExtrema(featureIndex, 2));
                    int x = int(getExtrema(featureIndex, 3));

                    int xp = x + radialX;
                    int yp = y + radialY;

                    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);
                    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);

                    if (propertyIndex == 0) {
                    // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0
                    
                    float angle = atan(dy, dx) + ${Math.PI};
                    float fbin = angle * ${vr}. * ${XJ};
                    setOutput(fbin);
                    return;
                    }

                    if (propertyIndex == 1) {
                        float mag = sqrt(dx * dx + dy * dy);
                        float magnitude = radialW * mag;
                        setOutput(magnitude);
                        return;
                    }
                }

                `
    }, a = {
      variableNames: ["fbinMag"],
      outputShape: [n.shape[0], vr],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int featureIndex = coords[0];
                int binIndex = coords[1];

                float sum = 0.;
                for (int i = 0; i < ${t.shape[0]}; i++) {
                    float fbin = getFbinMag(featureIndex, i, 0);
                    int bin = int(floor(fbin - 0.5));
                    int b1 = imod(bin + ${vr}, ${vr});
                    int b2 = imod(bin + 1 + ${vr}, ${vr});

                    if (b1 == binIndex || b2 == binIndex) {
                        float magnitude = getFbinMag(featureIndex, i, 1);
                        float w2 = fbin - float(bin) - 0.5;
                        float w1 = w2 * -1. + 1.;

                        if (b1 == binIndex) {
                            sum += w1 * magnitude;
                        }
                        if (b2 == binIndex) {
                            sum += w2 * magnitude;
                        }
                    }
                }
                setOutput(sum);
            }
            `
    };
    bh[s] = [i, a];
  }
  return bh[s];
}
const ZJ = (n) => {
  const { gaussianImagesT: t, prunedExtremasT: e, radialPropertiesT: s, pyramidImagesLength: o } = n.inputs, r = n.backend, [i, a] = PJ(e, s, o), l = r.runWebGLProgram(i, [...t, e, s], s.dtype), c = r.runWebGLProgram(a, [l], s.dtype);
  return r.disposeIntermediateTensorInfo(l), c;
}, KJ = {
  kernelName: "ComputeOrientationHistograms",
  backendName: "webgl",
  kernelFunc: ZJ
  // as {} as KernelFunc,
}, xh = {};
function BJ(n) {
  const t = n.shape[1], e = n.shape[0], s = "w" + t + "h" + e;
  if (!xh.hasOwnProperty(s)) {
    const o = {
      variableNames: ["p"],
      outputShape: [Math.floor(e / 2), Math.floor(t / 2)],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int y = coords[0] * 2;
                int x = coords[1] * 2;
        
                float sum = getP(y, x) * 0.25;
                sum += getP(y+1,x) * 0.25; 
                sum += getP(y, x+1) * 0.25; 
                sum += getP(y+1,x+1) * 0.25;
                setOutput(sum);
            }
            `
    };
    xh[s] = o;
  }
  return xh[s];
}
const HJ = (n) => {
  const t = n.inputs.image, e = n.backend, s = BJ(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, UJ = {
  //: KernelConfig
  kernelName: "DownsampleBilinear",
  backendName: "webgl",
  kernelFunc: HJ
  // as {} as KernelFunc,
}, YJ = (n) => {
  const { extremasResultT: t } = n.inputs, e = n.backend, s = t.shape[0], o = t.shape[1], r = {
    variableNames: ["extrema"],
    outputShape: [Math.floor(s / 2), Math.floor(o / 2)],
    userCode: `
		  void main() {
			ivec2 coords = getOutputCoords();
			int y = coords[0] * 2;
			int x = coords[1] * 2;
  
			float location = 0.0;
			float values = getExtrema(y, x);
  
			if (getExtrema(y+1, x) != 0.0) {
			  location = 1.0;
		  values = getExtrema(y+1, x);
			}
			else if (getExtrema(y, x+1) != 0.0) {
			  location = 2.0;
		  values = getExtrema(y, x+1);
			}
			else if (getExtrema(y+1, x+1) != 0.0) {
			  location = 3.0;
		  values = getExtrema(y+1, x+1);
			}
  
			if (values < 0.0) {
			  setOutput(location * -1000.0 + values);
			} else {
			  setOutput(location * 1000.0 + values);
			}
		  }
		`
  };
  return e.runWebGLProgram(r, [t], t.dtype);
}, QJ = {
  //: KernelConfig
  kernelName: "ExtremaReduction",
  backendName: "webgl",
  kernelFunc: YJ
  // as {} as KernelFunc,
}, nc = 36, jJ = 5, yh = {};
function JJ(n) {
  const t = `h${n.shape[0]}`;
  if (!yh.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0], nc],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();

                int featureIndex = coords[0];
                int binIndex = coords[1];

                int prevBin = imod(binIndex - 1 + ${nc}, ${nc});
                int nextBin = imod(binIndex + 1, ${nc});
                float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);

                setOutput(result);
            }
            `
    };
    yh[t] = e;
  }
  return yh[t];
}
const qJ = (n) => {
  let { histograms: t } = n.inputs;
  const e = n.backend, s = JJ(t);
  for (let o = 0; o < jJ; o++) {
    const r = t;
    t = e.runWebGLProgram(s, [t], t.dtype), o > 0 && e.disposeIntermediateTensorInfo(r);
  }
  return t;
}, t7 = {
  //: KernelConfig
  kernelName: "SmoothHistograms",
  backendName: "webgl",
  kernelFunc: qJ
  // as {} as KernelFunc,
}, wh = {};
function e7(n, t) {
  const e = t.shape[1], s = t.shape[0], o = "w" + e + "h" + s;
  if (!wh.hasOwnProperty(o)) {
    const r = {
      variableNames: ["p"],
      outputShape: [s, e],
      userCode: `
              void main() {
                ivec2 coords = getOutputCoords();
                int j = coords[0];
                int i = coords[1];
        
                float sj = 0.5 * float(j) - 0.25; 
                float si = 0.5 * float(i) - 0.25;
        
                float sj0 = floor(sj);
                float sj1 = ceil(sj);
                float si0 = floor(si);
                float si1 = ceil(si);
        
                int sj0I = int(sj0);
                int sj1I = int(sj1);
                int si0I = int(si0);
                int si1I = int(si1);
        
                float sum = 0.0;
                sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
                sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
                sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
                sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
                setOutput(sum);
              }
            `
    };
    wh[o] = r;
  }
  return wh[o];
}
const n7 = (n) => {
  const { image: t, targetImage: e } = n.inputs, s = n.backend, o = e7(t, e);
  return s.runWebGLProgram(o, [t], t.dtype);
}, s7 = {
  //: KernelConfig
  kernelName: "UpsampleBilinear",
  backendName: "webgl",
  kernelFunc: n7
  // as {} as KernelFunc,
};
cn(vJ);
cn(RJ);
cn(GJ);
cn(MJ);
cn(VJ);
cn(OJ);
cn(KJ);
cn(UJ);
cn(QJ);
cn(t7);
cn(s7);
const ox = 8, o7 = 5, Ci = 10, r7 = 5, Ih = 3, i7 = 1.5;
(rr.length - 1) * rr.length / 2;
class Tv {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let o = 0;
    for (; t >= ox && e >= ox && (t /= 2, e /= 2, o++, o !== o7); )
      ;
    this.numOctaves = o, this.tensorCaches = {}, this.kernelCaches = {};
  }
  // used in compiler
  detectImageData(t) {
    const e = new Uint8ClampedArray(4 * t.length);
    for (let o = 0; o < t.length; o++)
      e[4 * o] = t[o], e[4 * o + 1] = t[o], e[4 * o + 2] = t[o], e[4 * o + 3] = 255;
    const s = new ImageData(e, this.width, this.height);
    return this.detect(s);
  }
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} inputImageT 
   * @returns 
   */
  detect(t) {
    let e = null;
    const s = [];
    for (let b = 0; b < this.numOctaves; b++) {
      let x, w;
      b === 0 ? x = this._applyFilter(t) : x = this._downsampleBilinear(s[b - 1][s[b - 1].length - 1]), w = this._applyFilter(x), s.push([x, w]);
    }
    const o = [];
    for (let b = 0; b < this.numOctaves; b++) {
      let x = this._differenceImageBinomial(s[b][0], s[b][1]);
      o.push(x);
    }
    const r = [];
    for (let b = 1; b < this.numOctaves - 1; b++) {
      const x = this._buildExtremas(o[b - 1], o[b], o[b + 1]);
      r.push(x);
    }
    const i = this._applyPrune(r), a = this._computeLocalization(i, o), l = this._computeOrientationHistograms(a, s), c = this._smoothHistograms(l), u = this._computeExtremaAngles(c), d = this._computeExtremaFreak(s, a, u), h = this._computeFreakDescriptors(d), p = a.arraySync(), f = u.arraySync(), m = h.arraySync();
    this.debugMode && (e = {
      pyramidImages: s.map((b) => b.map((x) => x.arraySync())),
      dogPyramidImages: o.map((b) => b ? b.arraySync() : null),
      extremasResults: r.map((b) => b.arraySync()),
      extremaAngles: u.arraySync(),
      prunedExtremas: i,
      localizedExtremas: a.arraySync()
    }), s.forEach((b) => b.forEach((x) => x.dispose())), o.forEach((b) => b && b.dispose()), r.forEach((b) => b.dispose()), a.dispose(), l.dispose(), c.dispose(), u.dispose(), d.dispose(), h.dispose();
    const g = [];
    for (let b = 0; b < p.length; b++) {
      if (p[b][0] == 0)
        continue;
      const x = [];
      for (let N = 0; N < m[b].length; N += 4) {
        const R = m[b][N], $ = m[b][N + 1], F = m[b][N + 2], W = m[b][N + 3];
        let _ = R * 16777216 + $ * 65536 + F * 256 + W;
        x.push(_);
      }
      const w = p[b][1], y = p[b][2], C = p[b][3] * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, v = y * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, S = Math.pow(2, w);
      g.push({
        maxima: p[b][0] > 0,
        x: C,
        y: v,
        scale: S,
        angle: f[b],
        descriptors: x
      });
    }
    return { featurePoints: g, debugExtra: e };
  }
  _computeFreakDescriptors(t) {
    if (!this.tensorCaches.computeFreakDescriptors) {
      const s = [], o = [];
      for (let a = 0; a < t.shape[1]; a++)
        for (let l = a + 1; l < t.shape[1]; l++)
          s.push(a), o.push(l);
      const r = De(s, [s.length]).cast("int32"), i = De(o, [o.length]).cast("int32");
      this.tensorCaches.computeFreakDescriptors = {
        positionT: xn(ys([r, i], 1))
      };
    }
    const { positionT: e } = this.tensorCaches.computeFreakDescriptors;
    return z(() => Ot().runKernel("ComputeFreakDescriptors", { extremaFreaks: t, positionT: e }));
  }
  _computeExtremaFreak(t, e, s) {
    this.tensorCaches._computeExtremaFreak || z(() => {
      const i = De(rr);
      this.tensorCaches._computeExtremaFreak = {
        freakPointsT: xn(i)
      };
    });
    const { freakPointsT: o } = this.tensorCaches._computeExtremaFreak, r = [];
    for (let i = 1; i < t.length; i++)
      r.push(t[i][1]);
    return z(() => Ot().runKernel("ComputeExtremaFreak", { gaussianImagesT: r, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: o, pyramidImagesLength: t.length }));
  }
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} histograms 
   * @returns 
   */
  _computeExtremaAngles(t) {
    return z(() => Ot().runKernel("ComputeExtremaAngles", { histograms: t }));
  }
  // TODO: maybe can try just using average momentum, instead of histogram method. histogram might be overcomplicated
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} prunedExtremasT 
   * @param {tf.Tensor<tf.Rank>[]} pyramidImagesT 
   * @returns 
   */
  _computeOrientationHistograms(t, e) {
    const s = [];
    for (let r = 1; r < e.length; r++)
      s.push(e[r][1]);
    this.tensorCaches.orientationHistograms || z(() => {
      const r = -1 / (2 * Ih * Ih), i = Ih * i7, a = Math.ceil(i), l = [];
      for (let c = -a; c <= a; c++)
        for (let u = -a; u <= a; u++) {
          const d = u * u + c * c;
          if (d <= i * i) {
            const h = d * r;
            let p = (720 + h * (720 + h * (360 + h * (120 + h * (30 + h * (6 + h)))))) * 0.0013888888;
            l.push([c, u, p]);
          }
        }
      this.tensorCaches.orientationHistograms = {
        radialPropertiesT: xn(De(l, [l.length, 3]))
      };
    });
    const { radialPropertiesT: o } = this.tensorCaches.orientationHistograms;
    return z(() => Ot().runKernel("ComputeOrientationHistograms", { gaussianImagesT: s, prunedExtremasT: t, radialPropertiesT: o, pyramidImagesLength: e.length }));
  }
  // The histogram is smoothed with a Gaussian, with sigma = 1
  _smoothHistograms(t) {
    return z(() => Ot().runKernel("SmoothHistograms", { histograms: t }));
  }
  /**
   * 
   * @param {number[][]} prunedExtremasList 
   * @param {tf.Tensor<tf.Rank>[]} dogPyramidImagesT 
   * @returns 
   */
  _computeLocalization(t, e) {
    return z(() => {
      const o = Ot().runKernel("ComputeLocalization", { prunedExtremasList: t, dogPyramidImagesT: e }).arraySync(), r = [];
      for (let a = 0; a < o.length; a++) {
        r.push([]);
        for (let l = 0; l < o[a].length; l++)
          r[a].push([]);
      }
      const i = [];
      for (let a = 0; a < t.length; a++)
        i[a] = [
          t[a][0],
          t[a][1],
          t[a][2],
          t[a][3]
        ];
      for (let a = 0; a < i.length; a++) {
        if (i[a][0] === 0)
          continue;
        const l = o[a], c = 0.5 * (l[1][2] - l[1][0]), u = 0.5 * (l[2][1] - l[0][1]), d = l[1][2] + l[1][0] - 2 * l[1][1], h = l[2][1] + l[0][1] - 2 * l[1][1], p = 0.25 * (l[0][0] + l[2][2] - l[0][2] - l[2][0]), f = d * h - p * p, m = (h * -c + -p * -u) / f, g = (-p * -c + d * -u) / f, b = i[a][2] + g, x = i[a][3] + m;
        Math.abs(f) < 1e-4 || (i[a][2] = b, i[a][3] = x);
      }
      return De(i, [i.length, i[0].length], "float32");
    });
  }
  // faster to do it in CPU
  // if we do in gpu, we probably need to use tf.topk(), which seems to be run in CPU anyway (no gpu operation for that)
  //  TODO: research adapative maximum supression method
  /**
   * 
   * @param {tf.Tensor<tf.Rank>[]} extremasResultsT 
   * @returns 
   */
  _applyPrune(t) {
    const e = Ci * Ci, s = r7, o = [], r = [];
    for (let a = 0; a < e; a++) {
      r.push([]), o.push([]);
      for (let l = 0; l < s; l++)
        r[a].push([0, 0, 0, 0]), o[a].push(0);
    }
    z(() => {
      for (let a = 0; a < t.length; a++) {
        const l = Ot().runKernel("ExtremaReduction", { extremasResultT: t[a] }), c = a + 1, u = l.arraySync(), d = l.shape[0], h = l.shape[1], p = h * 2 / Ci, f = d * 2 / Ci;
        for (let m = 0; m < d; m++)
          for (let g = 0; g < h; g++) {
            const b = u[m][g];
            if (b == 0)
              continue;
            const x = b % 1e3, w = Math.floor(Math.abs(b) / 1e3), y = g * 2 + (w === 2 || w === 3 ? 1 : 0), I = m * 2 + (w === 1 || w === 3 ? 1 : 0), C = Math.floor(y / p), S = Math.floor(I / f) * Ci + C, N = Math.abs(x);
            let R = s;
            for (; R >= 1 && N > o[S][R - 1]; )
              R -= 1;
            if (R < s) {
              for (let $ = s - 1; $ >= R + 1; $--)
                o[S][$] = o[S][$ - 1], r[S][$][0] = r[S][$ - 1][0], r[S][$][1] = r[S][$ - 1][1], r[S][$][2] = r[S][$ - 1][2], r[S][$][3] = r[S][$ - 1][3];
              o[S][R] = N, r[S][R][0] = x, r[S][R][1] = c, r[S][R][2] = I, r[S][R][3] = y;
            }
          }
      }
    });
    const i = [];
    for (let a = 0; a < e; a++)
      for (let l = 0; l < s; l++)
        i.push(r[a][l]);
    return i;
  }
  _buildExtremas(t, e, s) {
    return z(() => Ot().runKernel("BuildExtremas", { image0: t, image1: e, image2: s }));
  }
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} image1 
   * @param {tf.Tensor<tf.Rank>} image2 
   * @returns 
   */
  _differenceImageBinomial(t, e) {
    return z(() => t.sub(e));
  }
  // 4th order binomail filter [1,4,6,4,1] X [1,4,6,4,1]
  _applyFilter(t) {
    return z(() => Ot().runKernel("BinomialFilter", { image: t }));
  }
  /* _upsampleBilinear(image, targetImage) {
  		const imageHeight = image.shape[0];
  		const imageWidth = image.shape[1];
  
  		const kernelKey = 'w' + imageWidth;
  		if (!this.kernelCaches.upsampleBilinear) {
  			this.kernelCaches.upsampleBilinear = {};
  		}
  
  		if (!this.kernelCaches.upsampleBilinear[kernelKey]) {
  			const kernel = {
  				variableNames: ['p'],
  				outputShape: [targetImage.shape[0], targetImage.shape[1]],
  				userCode: `
  	  void main() {
  		ivec2 coords = getOutputCoords();
  		int j = coords[0];
  		int i = coords[1];
  
  		float sj = 0.5 * float(j) - 0.25; 
  		float si = 0.5 * float(i) - 0.25;
  
  		float sj0 = floor(sj);
  		float sj1 = ceil(sj);
  		float si0 = floor(si);
  		float si1 = ceil(si);
  
  		int sj0I = int(sj0);
  		int sj1I = int(sj1);
  		int si0I = int(si0);
  		int si1I = int(si1);
  
  		float sum = 0.0;
  		sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
  		sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
  		sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
  		sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
  		setOutput(sum);
  	  }
  	`
  			};
  			this.kernelCaches.upsampleBilinear[kernelKey] = kernel;
  		}
  
  		return tf.tidy(() => {
  			const program = this.kernelCaches.upsampleBilinear[kernelKey];
  			return tf.engine().runKernel("UpsampleBilinear", { x: image, width: image.shape[1], height: image.shape[0] });//this._compileAndRun(program, [image]);
  		});
  	} */
  _downsampleBilinear(t) {
    return z(() => Ot().runKernel("DownsampleBilinear", { image: t }));
  }
  /**
   * 
   * @param {tf.MathBackendWebGL.GPGPUProgram} program 
   * @param {*} inputs 
   * @returns 
   */
  _compileAndRun(t, e) {
    const s = Us().compileAndRun(t, e);
    return Ot().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const o = Us().runWebGLProgram(t, e, s);
    return Ot().makeTensorFromDataId(o.dataId, o.shape, o.dtype);
  }
}
class a7 {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let o = Math.min(t, e) / 2, r = Math.pow(2, Math.round(Math.log(o) / Math.log(2)));
    this.cropSize = r, this.detector = new Tv(r, r, s), this.kernelCaches = {}, this.lastRandomIndex = 4;
  }
  detect(t) {
    const e = Math.floor(this.height / 2 - this.cropSize / 2), s = Math.floor(this.width / 2 - this.cropSize / 2), o = this._detect(t, s, e);
    return this.debugMode && (o.debugExtra.crop = { startX: s, startY: e, cropSize: this.cropSize }), o;
  }
  detectMoving(t) {
    const e = this.lastRandomIndex % 3, s = Math.floor(this.lastRandomIndex / 3);
    let o = Math.floor(this.height / 2 - this.cropSize + s * this.cropSize / 2), r = Math.floor(this.width / 2 - this.cropSize + e * this.cropSize / 2);
    return r < 0 && (r = 0), o < 0 && (o = 0), r >= this.width - this.cropSize && (r = this.width - this.cropSize - 1), o >= this.height - this.cropSize && (o = this.height - this.cropSize - 1), this.lastRandomIndex = (this.lastRandomIndex + 1) % 9, this._detect(t, r, o);
  }
  _detect(t, e, s) {
    const o = t.slice([s, e], [this.cropSize, this.cropSize]), { featurePoints: r, debugExtra: i } = this.detector.detect(o);
    return r.forEach((a) => {
      a.x += e, a.y += s;
    }), this.debugMode && (i.projectedImage = o.arraySync()), o.dispose(), { featurePoints: r, debugExtra: i };
  }
}
const Nv = ({ image: n, ratio: t }) => {
  const e = Math.round(n.width * t), s = Math.round(n.height * t), o = new Uint8Array(e * s);
  for (let r = 0; r < e; r++) {
    let i = Math.round(1 * r / t), a = Math.round(1 * (r + 1) / t) - 1;
    a >= n.width && (a = n.width - 1);
    for (let l = 0; l < s; l++) {
      let c = Math.round(1 * l / t), u = Math.round(1 * (l + 1) / t) - 1;
      u >= n.height && (u = n.height - 1);
      let d = 0, h = 0;
      for (let p = i; p <= a; p++)
        for (let f = c; f <= u; f++)
          d += 1 * n.data[f * n.width + p], h += 1;
      o[l * e + r] = Math.floor(d / h);
    }
  }
  return { data: o, width: e, height: s };
}, l7 = 100, c7 = (n) => {
  const t = l7 / Math.min(n.width, n.height), e = [];
  let s = t;
  for (; ; )
    if (e.push(s), s *= Math.pow(2, 1 / 3), s >= 0.95) {
      s = 1;
      break;
    }
  e.push(s), e.reverse();
  const o = [];
  for (let r = 0; r < e.length; r++)
    n.width * e[r], n.height * e[r], o.push(Object.assign(Nv({ image: n, ratio: e[r] }), { scale: e[r] }));
  return o;
}, u7 = (n) => {
  const t = Math.min(n.width, n.height), e = [], s = [];
  e.push(256 / t), e.push(128 / t);
  for (let o = 0; o < e.length; o++)
    s.push(Object.assign(Nv({ image: n, ratio: e[o] }), { scale: e[o] }));
  return s;
}, d7 = (n) => {
  const { v1: t, v2: e } = n;
  let s = 0;
  for (let o = 0; o < t.length; o++) {
    let r = (t[o] ^ e[o]) >>> 0;
    s += h7(r);
  }
  return s;
}, h7 = (n) => {
  var t = n - (n >> 1 & 1431655765);
  return t = (t >> 2 & 858993459) + (t & 858993459), t = (t >> 4) + t & 252645135, t = (t >> 8) + t & 16711935, t = (t >> 16) + t & 65535, t;
}, p7 = 1234, f7 = () => ({
  seed: p7,
  arrayShuffle(t) {
    const { arr: e, sampleSize: s } = t;
    for (let o = 0; o < s; o++) {
      this.seed = (214013 * this.seed + 2531011) % -2147483648;
      let r = this.seed >> 16 & 32767;
      r = r % e.length;
      let i = e[o];
      e[o] = e[r], e[r] = i;
    }
  },
  nextInt(t) {
    this.seed = (214013 * this.seed + 2531011) % -2147483648;
    let e = this.seed >> 16 & 32767;
    return e = e % t, e;
  }
}), m7 = 16, g7 = 128, Rp = 8, b7 = (n) => {
  const { points: t, pointIndexes: e, randomizer: s } = n, o = [];
  for (let l = 0; l < e.length; l++)
    o.push(l);
  let r = Number.MAX_SAFE_INTEGER, i = -1;
  const a = [];
  for (let l = 0; l < g7; l++) {
    s.arrayShuffle({ arr: o, sampleSize: Rp });
    let c = 0;
    const u = [];
    for (let d = 0; d < e.length; d++) {
      let h = Number.MAX_SAFE_INTEGER;
      for (let p = 0; p < Rp; p++) {
        const f = e[o[p]], m = d7({ v1: t[e[d]].descriptors, v2: t[f].descriptors });
        m < h && (u[d] = o[p], h = m);
      }
      c += h;
    }
    a.push(u), c < r && (r = c, i = l);
  }
  return a[i];
}, rx = ({ points: n }) => {
  const t = [];
  for (let o = 0; o < n.length; o++)
    t.push(o);
  const e = f7();
  return { rootNode: Rv({ points: n, pointIndexes: t, centerPointIndex: null, randomizer: e }) };
}, Rv = (n) => {
  const { points: t, pointIndexes: e, centerPointIndex: s, randomizer: o } = n;
  let r = !1;
  (e.length <= Rp || e.length <= m7) && (r = !0);
  const i = {};
  if (!r) {
    const l = b7({ points: t, pointIndexes: e, randomizer: o });
    for (let c = 0; c < l.length; c++)
      i[e[l[c]]] === void 0 && (i[e[l[c]]] = []), i[e[l[c]]].push(e[c]);
  }
  Object.keys(i).length === 1 && (r = !0);
  const a = {
    centerPointIndex: s
  };
  if (r) {
    a.leaf = !0, a.pointIndexes = [];
    for (let l = 0; l < e.length; l++)
      a.pointIndexes.push(e[l]);
    return a;
  }
  return a.leaf = !1, a.children = [], Object.keys(i).forEach((l) => {
    a.children.push(Rv({ points: t, pointIndexes: i[l], centerPointIndex: l, randomizer: o }));
  }), a;
};
var Go = 4294967295;
function x7(n, t, e) {
  var s = e / 4294967296, o = e;
  n.setUint32(t, s), n.setUint32(t + 4, o);
}
function $v(n, t, e) {
  var s = Math.floor(e / 4294967296), o = e;
  n.setUint32(t, s), n.setUint32(t + 4, o);
}
function Ev(n, t) {
  var e = n.getInt32(t), s = n.getUint32(t + 4);
  return e * 4294967296 + s;
}
function y7(n, t) {
  var e = n.getUint32(t), s = n.getUint32(t + 4);
  return e * 4294967296 + s;
}
var Ch, vh, kh, Ed = (typeof process > "u" || ((Ch = process == null ? void 0 : process.env) === null || Ch === void 0 ? void 0 : Ch.TEXT_ENCODING) !== "never") && typeof TextEncoder < "u" && typeof TextDecoder < "u";
function ix(n) {
  for (var t = n.length, e = 0, s = 0; s < t; ) {
    var o = n.charCodeAt(s++);
    if (o & 4294967168)
      if (!(o & 4294965248))
        e += 2;
      else {
        if (o >= 55296 && o <= 56319 && s < t) {
          var r = n.charCodeAt(s);
          (r & 64512) === 56320 && (++s, o = ((o & 1023) << 10) + (r & 1023) + 65536);
        }
        o & 4294901760 ? e += 4 : e += 3;
      }
    else {
      e++;
      continue;
    }
  }
  return e;
}
function w7(n, t, e) {
  for (var s = n.length, o = e, r = 0; r < s; ) {
    var i = n.charCodeAt(r++);
    if (i & 4294967168)
      if (!(i & 4294965248))
        t[o++] = i >> 6 & 31 | 192;
      else {
        if (i >= 55296 && i <= 56319 && r < s) {
          var a = n.charCodeAt(r);
          (a & 64512) === 56320 && (++r, i = ((i & 1023) << 10) + (a & 1023) + 65536);
        }
        i & 4294901760 ? (t[o++] = i >> 18 & 7 | 240, t[o++] = i >> 12 & 63 | 128, t[o++] = i >> 6 & 63 | 128) : (t[o++] = i >> 12 & 15 | 224, t[o++] = i >> 6 & 63 | 128);
      }
    else {
      t[o++] = i;
      continue;
    }
    t[o++] = i & 63 | 128;
  }
}
var Wi = Ed ? new TextEncoder() : void 0, I7 = Ed ? typeof process < "u" && ((vh = process == null ? void 0 : process.env) === null || vh === void 0 ? void 0 : vh.TEXT_ENCODING) !== "force" ? 200 : 0 : Go;
function C7(n, t, e) {
  t.set(Wi.encode(n), e);
}
function v7(n, t, e) {
  Wi.encodeInto(n, t.subarray(e));
}
var k7 = Wi != null && Wi.encodeInto ? v7 : C7, S7 = 4096;
function Gv(n, t, e) {
  for (var s = t, o = s + e, r = [], i = ""; s < o; ) {
    var a = n[s++];
    if (!(a & 128))
      r.push(a);
    else if ((a & 224) === 192) {
      var l = n[s++] & 63;
      r.push((a & 31) << 6 | l);
    } else if ((a & 240) === 224) {
      var l = n[s++] & 63, c = n[s++] & 63;
      r.push((a & 31) << 12 | l << 6 | c);
    } else if ((a & 248) === 240) {
      var l = n[s++] & 63, c = n[s++] & 63, u = n[s++] & 63, d = (a & 7) << 18 | l << 12 | c << 6 | u;
      d > 65535 && (d -= 65536, r.push(d >>> 10 & 1023 | 55296), d = 56320 | d & 1023), r.push(d);
    } else
      r.push(a);
    r.length >= S7 && (i += String.fromCharCode.apply(String, r), r.length = 0);
  }
  return r.length > 0 && (i += String.fromCharCode.apply(String, r)), i;
}
var T7 = Ed ? new TextDecoder() : null, N7 = Ed ? typeof process < "u" && ((kh = process == null ? void 0 : process.env) === null || kh === void 0 ? void 0 : kh.TEXT_DECODER) !== "force" ? 200 : 0 : Go;
function R7(n, t, e) {
  var s = n.subarray(t, t + e);
  return T7.decode(s);
}
var sc = (
  /** @class */
  function() {
    function n(t, e) {
      this.type = t, this.data = e;
    }
    return n;
  }()
), $7 = globalThis && globalThis.__extends || function() {
  var n = function(t, e) {
    return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(s, o) {
      s.__proto__ = o;
    } || function(s, o) {
      for (var r in o)
        Object.prototype.hasOwnProperty.call(o, r) && (s[r] = o[r]);
    }, n(t, e);
  };
  return function(t, e) {
    if (typeof e != "function" && e !== null)
      throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
    n(t, e);
    function s() {
      this.constructor = t;
    }
    t.prototype = e === null ? Object.create(e) : (s.prototype = e.prototype, new s());
  };
}(), is = (
  /** @class */
  function(n) {
    $7(t, n);
    function t(e) {
      var s = n.call(this, e) || this, o = Object.create(t.prototype);
      return Object.setPrototypeOf(s, o), Object.defineProperty(s, "name", {
        configurable: !0,
        enumerable: !1,
        value: t.name
      }), s;
    }
    return t;
  }(Error)
), E7 = -1, G7 = 4294967296 - 1, L7 = 17179869184 - 1;
function D7(n) {
  var t = n.sec, e = n.nsec;
  if (t >= 0 && e >= 0 && t <= L7)
    if (e === 0 && t <= G7) {
      var s = new Uint8Array(4), o = new DataView(s.buffer);
      return o.setUint32(0, t), s;
    } else {
      var r = t / 4294967296, i = t & 4294967295, s = new Uint8Array(8), o = new DataView(s.buffer);
      return o.setUint32(0, e << 2 | r & 3), o.setUint32(4, i), s;
    }
  else {
    var s = new Uint8Array(12), o = new DataView(s.buffer);
    return o.setUint32(0, e), $v(o, 4, t), s;
  }
}
function M7(n) {
  var t = n.getTime(), e = Math.floor(t / 1e3), s = (t - e * 1e3) * 1e6, o = Math.floor(s / 1e9);
  return {
    sec: e + o,
    nsec: s - o * 1e9
  };
}
function z7(n) {
  if (n instanceof Date) {
    var t = M7(n);
    return D7(t);
  } else
    return null;
}
function F7(n) {
  var t = new DataView(n.buffer, n.byteOffset, n.byteLength);
  switch (n.byteLength) {
    case 4: {
      var e = t.getUint32(0), s = 0;
      return { sec: e, nsec: s };
    }
    case 8: {
      var o = t.getUint32(0), r = t.getUint32(4), e = (o & 3) * 4294967296 + r, s = o >>> 2;
      return { sec: e, nsec: s };
    }
    case 12: {
      var e = Ev(t, 4), s = t.getUint32(0);
      return { sec: e, nsec: s };
    }
    default:
      throw new is("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(n.length));
  }
}
function W7(n) {
  var t = F7(n);
  return new Date(t.sec * 1e3 + t.nsec / 1e6);
}
var V7 = {
  type: E7,
  encode: z7,
  decode: W7
}, Lv = (
  /** @class */
  function() {
    function n() {
      this.builtInEncoders = [], this.builtInDecoders = [], this.encoders = [], this.decoders = [], this.register(V7);
    }
    return n.prototype.register = function(t) {
      var e = t.type, s = t.encode, o = t.decode;
      if (e >= 0)
        this.encoders[e] = s, this.decoders[e] = o;
      else {
        var r = 1 + e;
        this.builtInEncoders[r] = s, this.builtInDecoders[r] = o;
      }
    }, n.prototype.tryToEncode = function(t, e) {
      for (var s = 0; s < this.builtInEncoders.length; s++) {
        var o = this.builtInEncoders[s];
        if (o != null) {
          var r = o(t, e);
          if (r != null) {
            var i = -1 - s;
            return new sc(i, r);
          }
        }
      }
      for (var s = 0; s < this.encoders.length; s++) {
        var o = this.encoders[s];
        if (o != null) {
          var r = o(t, e);
          if (r != null) {
            var i = s;
            return new sc(i, r);
          }
        }
      }
      return t instanceof sc ? t : null;
    }, n.prototype.decode = function(t, e, s) {
      var o = e < 0 ? this.builtInDecoders[-1 - e] : this.decoders[e];
      return o ? o(t, e, s) : new sc(e, t);
    }, n.defaultCodec = new n(), n;
  }()
);
function Zc(n) {
  return n instanceof Uint8Array ? n : ArrayBuffer.isView(n) ? new Uint8Array(n.buffer, n.byteOffset, n.byteLength) : n instanceof ArrayBuffer ? new Uint8Array(n) : Uint8Array.from(n);
}
function _7(n) {
  if (n instanceof ArrayBuffer)
    return new DataView(n);
  var t = Zc(n);
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
var A7 = 100, O7 = 2048, X7 = (
  /** @class */
  function() {
    function n(t, e, s, o, r, i, a, l) {
      t === void 0 && (t = Lv.defaultCodec), e === void 0 && (e = void 0), s === void 0 && (s = A7), o === void 0 && (o = O7), r === void 0 && (r = !1), i === void 0 && (i = !1), a === void 0 && (a = !1), l === void 0 && (l = !1), this.extensionCodec = t, this.context = e, this.maxDepth = s, this.initialBufferSize = o, this.sortKeys = r, this.forceFloat32 = i, this.ignoreUndefined = a, this.forceIntegerToFloat = l, this.pos = 0, this.view = new DataView(new ArrayBuffer(this.initialBufferSize)), this.bytes = new Uint8Array(this.view.buffer);
    }
    return n.prototype.reinitializeState = function() {
      this.pos = 0;
    }, n.prototype.encodeSharedRef = function(t) {
      return this.reinitializeState(), this.doEncode(t, 1), this.bytes.subarray(0, this.pos);
    }, n.prototype.encode = function(t) {
      return this.reinitializeState(), this.doEncode(t, 1), this.bytes.slice(0, this.pos);
    }, n.prototype.doEncode = function(t, e) {
      if (e > this.maxDepth)
        throw new Error("Too deep objects in depth ".concat(e));
      t == null ? this.encodeNil() : typeof t == "boolean" ? this.encodeBoolean(t) : typeof t == "number" ? this.encodeNumber(t) : typeof t == "string" ? this.encodeString(t) : this.encodeObject(t, e);
    }, n.prototype.ensureBufferSizeToWrite = function(t) {
      var e = this.pos + t;
      this.view.byteLength < e && this.resizeBuffer(e * 2);
    }, n.prototype.resizeBuffer = function(t) {
      var e = new ArrayBuffer(t), s = new Uint8Array(e), o = new DataView(e);
      s.set(this.bytes), this.view = o, this.bytes = s;
    }, n.prototype.encodeNil = function() {
      this.writeU8(192);
    }, n.prototype.encodeBoolean = function(t) {
      t === !1 ? this.writeU8(194) : this.writeU8(195);
    }, n.prototype.encodeNumber = function(t) {
      Number.isSafeInteger(t) && !this.forceIntegerToFloat ? t >= 0 ? t < 128 ? this.writeU8(t) : t < 256 ? (this.writeU8(204), this.writeU8(t)) : t < 65536 ? (this.writeU8(205), this.writeU16(t)) : t < 4294967296 ? (this.writeU8(206), this.writeU32(t)) : (this.writeU8(207), this.writeU64(t)) : t >= -32 ? this.writeU8(224 | t + 32) : t >= -128 ? (this.writeU8(208), this.writeI8(t)) : t >= -32768 ? (this.writeU8(209), this.writeI16(t)) : t >= -2147483648 ? (this.writeU8(210), this.writeI32(t)) : (this.writeU8(211), this.writeI64(t)) : this.forceFloat32 ? (this.writeU8(202), this.writeF32(t)) : (this.writeU8(203), this.writeF64(t));
    }, n.prototype.writeStringHeader = function(t) {
      if (t < 32)
        this.writeU8(160 + t);
      else if (t < 256)
        this.writeU8(217), this.writeU8(t);
      else if (t < 65536)
        this.writeU8(218), this.writeU16(t);
      else if (t < 4294967296)
        this.writeU8(219), this.writeU32(t);
      else
        throw new Error("Too long string: ".concat(t, " bytes in UTF-8"));
    }, n.prototype.encodeString = function(t) {
      var e = 5, s = t.length;
      if (s > I7) {
        var o = ix(t);
        this.ensureBufferSizeToWrite(e + o), this.writeStringHeader(o), k7(t, this.bytes, this.pos), this.pos += o;
      } else {
        var o = ix(t);
        this.ensureBufferSizeToWrite(e + o), this.writeStringHeader(o), w7(t, this.bytes, this.pos), this.pos += o;
      }
    }, n.prototype.encodeObject = function(t, e) {
      var s = this.extensionCodec.tryToEncode(t, this.context);
      if (s != null)
        this.encodeExtension(s);
      else if (Array.isArray(t))
        this.encodeArray(t, e);
      else if (ArrayBuffer.isView(t))
        this.encodeBinary(t);
      else if (typeof t == "object")
        this.encodeMap(t, e);
      else
        throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(t)));
    }, n.prototype.encodeBinary = function(t) {
      var e = t.byteLength;
      if (e < 256)
        this.writeU8(196), this.writeU8(e);
      else if (e < 65536)
        this.writeU8(197), this.writeU16(e);
      else if (e < 4294967296)
        this.writeU8(198), this.writeU32(e);
      else
        throw new Error("Too large binary: ".concat(e));
      var s = Zc(t);
      this.writeU8a(s);
    }, n.prototype.encodeArray = function(t, e) {
      var s = t.length;
      if (s < 16)
        this.writeU8(144 + s);
      else if (s < 65536)
        this.writeU8(220), this.writeU16(s);
      else if (s < 4294967296)
        this.writeU8(221), this.writeU32(s);
      else
        throw new Error("Too large array: ".concat(s));
      for (var o = 0, r = t; o < r.length; o++) {
        var i = r[o];
        this.doEncode(i, e + 1);
      }
    }, n.prototype.countWithoutUndefined = function(t, e) {
      for (var s = 0, o = 0, r = e; o < r.length; o++) {
        var i = r[o];
        t[i] !== void 0 && s++;
      }
      return s;
    }, n.prototype.encodeMap = function(t, e) {
      var s = Object.keys(t);
      this.sortKeys && s.sort();
      var o = this.ignoreUndefined ? this.countWithoutUndefined(t, s) : s.length;
      if (o < 16)
        this.writeU8(128 + o);
      else if (o < 65536)
        this.writeU8(222), this.writeU16(o);
      else if (o < 4294967296)
        this.writeU8(223), this.writeU32(o);
      else
        throw new Error("Too large map object: ".concat(o));
      for (var r = 0, i = s; r < i.length; r++) {
        var a = i[r], l = t[a];
        this.ignoreUndefined && l === void 0 || (this.encodeString(a), this.doEncode(l, e + 1));
      }
    }, n.prototype.encodeExtension = function(t) {
      var e = t.data.length;
      if (e === 1)
        this.writeU8(212);
      else if (e === 2)
        this.writeU8(213);
      else if (e === 4)
        this.writeU8(214);
      else if (e === 8)
        this.writeU8(215);
      else if (e === 16)
        this.writeU8(216);
      else if (e < 256)
        this.writeU8(199), this.writeU8(e);
      else if (e < 65536)
        this.writeU8(200), this.writeU16(e);
      else if (e < 4294967296)
        this.writeU8(201), this.writeU32(e);
      else
        throw new Error("Too large extension object: ".concat(e));
      this.writeI8(t.type), this.writeU8a(t.data);
    }, n.prototype.writeU8 = function(t) {
      this.ensureBufferSizeToWrite(1), this.view.setUint8(this.pos, t), this.pos++;
    }, n.prototype.writeU8a = function(t) {
      var e = t.length;
      this.ensureBufferSizeToWrite(e), this.bytes.set(t, this.pos), this.pos += e;
    }, n.prototype.writeI8 = function(t) {
      this.ensureBufferSizeToWrite(1), this.view.setInt8(this.pos, t), this.pos++;
    }, n.prototype.writeU16 = function(t) {
      this.ensureBufferSizeToWrite(2), this.view.setUint16(this.pos, t), this.pos += 2;
    }, n.prototype.writeI16 = function(t) {
      this.ensureBufferSizeToWrite(2), this.view.setInt16(this.pos, t), this.pos += 2;
    }, n.prototype.writeU32 = function(t) {
      this.ensureBufferSizeToWrite(4), this.view.setUint32(this.pos, t), this.pos += 4;
    }, n.prototype.writeI32 = function(t) {
      this.ensureBufferSizeToWrite(4), this.view.setInt32(this.pos, t), this.pos += 4;
    }, n.prototype.writeF32 = function(t) {
      this.ensureBufferSizeToWrite(4), this.view.setFloat32(this.pos, t), this.pos += 4;
    }, n.prototype.writeF64 = function(t) {
      this.ensureBufferSizeToWrite(8), this.view.setFloat64(this.pos, t), this.pos += 8;
    }, n.prototype.writeU64 = function(t) {
      this.ensureBufferSizeToWrite(8), x7(this.view, this.pos, t), this.pos += 8;
    }, n.prototype.writeI64 = function(t) {
      this.ensureBufferSizeToWrite(8), $v(this.view, this.pos, t), this.pos += 8;
    }, n;
  }()
), P7 = {};
function Z7(n, t) {
  t === void 0 && (t = P7);
  var e = new X7(t.extensionCodec, t.context, t.maxDepth, t.initialBufferSize, t.sortKeys, t.forceFloat32, t.ignoreUndefined, t.forceIntegerToFloat);
  return e.encodeSharedRef(n);
}
function Sh(n) {
  return "".concat(n < 0 ? "-" : "", "0x").concat(Math.abs(n).toString(16).padStart(2, "0"));
}
var K7 = 16, B7 = 16, H7 = (
  /** @class */
  function() {
    function n(t, e) {
      t === void 0 && (t = K7), e === void 0 && (e = B7), this.maxKeyLength = t, this.maxLengthPerKey = e, this.hit = 0, this.miss = 0, this.caches = [];
      for (var s = 0; s < this.maxKeyLength; s++)
        this.caches.push([]);
    }
    return n.prototype.canBeCached = function(t) {
      return t > 0 && t <= this.maxKeyLength;
    }, n.prototype.find = function(t, e, s) {
      var o = this.caches[s - 1];
      t:
        for (var r = 0, i = o; r < i.length; r++) {
          for (var a = i[r], l = a.bytes, c = 0; c < s; c++)
            if (l[c] !== t[e + c])
              continue t;
          return a.str;
        }
      return null;
    }, n.prototype.store = function(t, e) {
      var s = this.caches[t.length - 1], o = { bytes: t, str: e };
      s.length >= this.maxLengthPerKey ? s[Math.random() * s.length | 0] = o : s.push(o);
    }, n.prototype.decode = function(t, e, s) {
      var o = this.find(t, e, s);
      if (o != null)
        return this.hit++, o;
      this.miss++;
      var r = Gv(t, e, s), i = Uint8Array.prototype.slice.call(t, e, e + s);
      return this.store(i, r), r;
    }, n;
  }()
), U7 = globalThis && globalThis.__awaiter || function(n, t, e, s) {
  function o(r) {
    return r instanceof e ? r : new e(function(i) {
      i(r);
    });
  }
  return new (e || (e = Promise))(function(r, i) {
    function a(u) {
      try {
        c(s.next(u));
      } catch (d) {
        i(d);
      }
    }
    function l(u) {
      try {
        c(s.throw(u));
      } catch (d) {
        i(d);
      }
    }
    function c(u) {
      u.done ? r(u.value) : o(u.value).then(a, l);
    }
    c((s = s.apply(n, t || [])).next());
  });
}, Th = globalThis && globalThis.__generator || function(n, t) {
  var e = { label: 0, sent: function() {
    if (r[0] & 1)
      throw r[1];
    return r[1];
  }, trys: [], ops: [] }, s, o, r, i;
  return i = { next: a(0), throw: a(1), return: a(2) }, typeof Symbol == "function" && (i[Symbol.iterator] = function() {
    return this;
  }), i;
  function a(c) {
    return function(u) {
      return l([c, u]);
    };
  }
  function l(c) {
    if (s)
      throw new TypeError("Generator is already executing.");
    for (; e; )
      try {
        if (s = 1, o && (r = c[0] & 2 ? o.return : c[0] ? o.throw || ((r = o.return) && r.call(o), 0) : o.next) && !(r = r.call(o, c[1])).done)
          return r;
        switch (o = 0, r && (c = [c[0] & 2, r.value]), c[0]) {
          case 0:
          case 1:
            r = c;
            break;
          case 4:
            return e.label++, { value: c[1], done: !1 };
          case 5:
            e.label++, o = c[1], c = [0];
            continue;
          case 7:
            c = e.ops.pop(), e.trys.pop();
            continue;
          default:
            if (r = e.trys, !(r = r.length > 0 && r[r.length - 1]) && (c[0] === 6 || c[0] === 2)) {
              e = 0;
              continue;
            }
            if (c[0] === 3 && (!r || c[1] > r[0] && c[1] < r[3])) {
              e.label = c[1];
              break;
            }
            if (c[0] === 6 && e.label < r[1]) {
              e.label = r[1], r = c;
              break;
            }
            if (r && e.label < r[2]) {
              e.label = r[2], e.ops.push(c);
              break;
            }
            r[2] && e.ops.pop(), e.trys.pop();
            continue;
        }
        c = t.call(n, e);
      } catch (u) {
        c = [6, u], o = 0;
      } finally {
        s = r = 0;
      }
    if (c[0] & 5)
      throw c[1];
    return { value: c[0] ? c[1] : void 0, done: !0 };
  }
}, ax = globalThis && globalThis.__asyncValues || function(n) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var t = n[Symbol.asyncIterator], e;
  return t ? t.call(n) : (n = typeof __values == "function" ? __values(n) : n[Symbol.iterator](), e = {}, s("next"), s("throw"), s("return"), e[Symbol.asyncIterator] = function() {
    return this;
  }, e);
  function s(r) {
    e[r] = n[r] && function(i) {
      return new Promise(function(a, l) {
        i = n[r](i), o(a, l, i.done, i.value);
      });
    };
  }
  function o(r, i, a, l) {
    Promise.resolve(l).then(function(c) {
      r({ value: c, done: a });
    }, i);
  }
}, Mr = globalThis && globalThis.__await || function(n) {
  return this instanceof Mr ? (this.v = n, this) : new Mr(n);
}, Y7 = globalThis && globalThis.__asyncGenerator || function(n, t, e) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var s = e.apply(n, t || []), o, r = [];
  return o = {}, i("next"), i("throw"), i("return"), o[Symbol.asyncIterator] = function() {
    return this;
  }, o;
  function i(h) {
    s[h] && (o[h] = function(p) {
      return new Promise(function(f, m) {
        r.push([h, p, f, m]) > 1 || a(h, p);
      });
    });
  }
  function a(h, p) {
    try {
      l(s[h](p));
    } catch (f) {
      d(r[0][3], f);
    }
  }
  function l(h) {
    h.value instanceof Mr ? Promise.resolve(h.value.v).then(c, u) : d(r[0][2], h);
  }
  function c(h) {
    a("next", h);
  }
  function u(h) {
    a("throw", h);
  }
  function d(h, p) {
    h(p), r.shift(), r.length && a(r[0][0], r[0][1]);
  }
}, Q7 = function(n) {
  var t = typeof n;
  return t === "string" || t === "number";
}, vi = -1, Fg = new DataView(new ArrayBuffer(0)), j7 = new Uint8Array(Fg.buffer), $p = function() {
  try {
    Fg.getInt8(0);
  } catch (n) {
    return n.constructor;
  }
  throw new Error("never reached");
}(), lx = new $p("Insufficient data"), J7 = new H7(), q7 = (
  /** @class */
  function() {
    function n(t, e, s, o, r, i, a, l) {
      t === void 0 && (t = Lv.defaultCodec), e === void 0 && (e = void 0), s === void 0 && (s = Go), o === void 0 && (o = Go), r === void 0 && (r = Go), i === void 0 && (i = Go), a === void 0 && (a = Go), l === void 0 && (l = J7), this.extensionCodec = t, this.context = e, this.maxStrLength = s, this.maxBinLength = o, this.maxArrayLength = r, this.maxMapLength = i, this.maxExtLength = a, this.keyDecoder = l, this.totalPos = 0, this.pos = 0, this.view = Fg, this.bytes = j7, this.headByte = vi, this.stack = [];
    }
    return n.prototype.reinitializeState = function() {
      this.totalPos = 0, this.headByte = vi, this.stack.length = 0;
    }, n.prototype.setBuffer = function(t) {
      this.bytes = Zc(t), this.view = _7(this.bytes), this.pos = 0;
    }, n.prototype.appendBuffer = function(t) {
      if (this.headByte === vi && !this.hasRemaining(1))
        this.setBuffer(t);
      else {
        var e = this.bytes.subarray(this.pos), s = Zc(t), o = new Uint8Array(e.length + s.length);
        o.set(e), o.set(s, e.length), this.setBuffer(o);
      }
    }, n.prototype.hasRemaining = function(t) {
      return this.view.byteLength - this.pos >= t;
    }, n.prototype.createExtraByteError = function(t) {
      var e = this, s = e.view, o = e.pos;
      return new RangeError("Extra ".concat(s.byteLength - o, " of ").concat(s.byteLength, " byte(s) found at buffer[").concat(t, "]"));
    }, n.prototype.decode = function(t) {
      this.reinitializeState(), this.setBuffer(t);
      var e = this.doDecodeSync();
      if (this.hasRemaining(1))
        throw this.createExtraByteError(this.pos);
      return e;
    }, n.prototype.decodeMulti = function(t) {
      return Th(this, function(e) {
        switch (e.label) {
          case 0:
            this.reinitializeState(), this.setBuffer(t), e.label = 1;
          case 1:
            return this.hasRemaining(1) ? [4, this.doDecodeSync()] : [3, 3];
          case 2:
            return e.sent(), [3, 1];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    }, n.prototype.decodeAsync = function(t) {
      var e, s, o, r;
      return U7(this, void 0, void 0, function() {
        var i, a, l, c, u, d, h, p;
        return Th(this, function(f) {
          switch (f.label) {
            case 0:
              i = !1, f.label = 1;
            case 1:
              f.trys.push([1, 6, 7, 12]), e = ax(t), f.label = 2;
            case 2:
              return [4, e.next()];
            case 3:
              if (s = f.sent(), !!s.done)
                return [3, 5];
              if (l = s.value, i)
                throw this.createExtraByteError(this.totalPos);
              this.appendBuffer(l);
              try {
                a = this.doDecodeSync(), i = !0;
              } catch (m) {
                if (!(m instanceof $p))
                  throw m;
              }
              this.totalPos += this.pos, f.label = 4;
            case 4:
              return [3, 2];
            case 5:
              return [3, 12];
            case 6:
              return c = f.sent(), o = { error: c }, [3, 12];
            case 7:
              return f.trys.push([7, , 10, 11]), s && !s.done && (r = e.return) ? [4, r.call(e)] : [3, 9];
            case 8:
              f.sent(), f.label = 9;
            case 9:
              return [3, 11];
            case 10:
              if (o)
                throw o.error;
              return [
                7
                /*endfinally*/
              ];
            case 11:
              return [
                7
                /*endfinally*/
              ];
            case 12:
              if (i) {
                if (this.hasRemaining(1))
                  throw this.createExtraByteError(this.totalPos);
                return [2, a];
              }
              throw u = this, d = u.headByte, h = u.pos, p = u.totalPos, new RangeError("Insufficient data in parsing ".concat(Sh(d), " at ").concat(p, " (").concat(h, " in the current buffer)"));
          }
        });
      });
    }, n.prototype.decodeArrayStream = function(t) {
      return this.decodeMultiAsync(t, !0);
    }, n.prototype.decodeStream = function(t) {
      return this.decodeMultiAsync(t, !1);
    }, n.prototype.decodeMultiAsync = function(t, e) {
      return Y7(this, arguments, function() {
        var o, r, i, a, l, c, u, d, h;
        return Th(this, function(p) {
          switch (p.label) {
            case 0:
              o = e, r = -1, p.label = 1;
            case 1:
              p.trys.push([1, 13, 14, 19]), i = ax(t), p.label = 2;
            case 2:
              return [4, Mr(i.next())];
            case 3:
              if (a = p.sent(), !!a.done)
                return [3, 12];
              if (l = a.value, e && r === 0)
                throw this.createExtraByteError(this.totalPos);
              this.appendBuffer(l), o && (r = this.readArraySize(), o = !1, this.complete()), p.label = 4;
            case 4:
              p.trys.push([4, 9, , 10]), p.label = 5;
            case 5:
              return [4, Mr(this.doDecodeSync())];
            case 6:
              return [4, p.sent()];
            case 7:
              return p.sent(), --r === 0 ? [3, 8] : [3, 5];
            case 8:
              return [3, 10];
            case 9:
              if (c = p.sent(), !(c instanceof $p))
                throw c;
              return [3, 10];
            case 10:
              this.totalPos += this.pos, p.label = 11;
            case 11:
              return [3, 2];
            case 12:
              return [3, 19];
            case 13:
              return u = p.sent(), d = { error: u }, [3, 19];
            case 14:
              return p.trys.push([14, , 17, 18]), a && !a.done && (h = i.return) ? [4, Mr(h.call(i))] : [3, 16];
            case 15:
              p.sent(), p.label = 16;
            case 16:
              return [3, 18];
            case 17:
              if (d)
                throw d.error;
              return [
                7
                /*endfinally*/
              ];
            case 18:
              return [
                7
                /*endfinally*/
              ];
            case 19:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, n.prototype.doDecodeSync = function() {
      t:
        for (; ; ) {
          var t = this.readHeadByte(), e = void 0;
          if (t >= 224)
            e = t - 256;
          else if (t < 192)
            if (t < 128)
              e = t;
            else if (t < 144) {
              var s = t - 128;
              if (s !== 0) {
                this.pushMapState(s), this.complete();
                continue t;
              } else
                e = {};
            } else if (t < 160) {
              var s = t - 144;
              if (s !== 0) {
                this.pushArrayState(s), this.complete();
                continue t;
              } else
                e = [];
            } else {
              var o = t - 160;
              e = this.decodeUtf8String(o, 0);
            }
          else if (t === 192)
            e = null;
          else if (t === 194)
            e = !1;
          else if (t === 195)
            e = !0;
          else if (t === 202)
            e = this.readF32();
          else if (t === 203)
            e = this.readF64();
          else if (t === 204)
            e = this.readU8();
          else if (t === 205)
            e = this.readU16();
          else if (t === 206)
            e = this.readU32();
          else if (t === 207)
            e = this.readU64();
          else if (t === 208)
            e = this.readI8();
          else if (t === 209)
            e = this.readI16();
          else if (t === 210)
            e = this.readI32();
          else if (t === 211)
            e = this.readI64();
          else if (t === 217) {
            var o = this.lookU8();
            e = this.decodeUtf8String(o, 1);
          } else if (t === 218) {
            var o = this.lookU16();
            e = this.decodeUtf8String(o, 2);
          } else if (t === 219) {
            var o = this.lookU32();
            e = this.decodeUtf8String(o, 4);
          } else if (t === 220) {
            var s = this.readU16();
            if (s !== 0) {
              this.pushArrayState(s), this.complete();
              continue t;
            } else
              e = [];
          } else if (t === 221) {
            var s = this.readU32();
            if (s !== 0) {
              this.pushArrayState(s), this.complete();
              continue t;
            } else
              e = [];
          } else if (t === 222) {
            var s = this.readU16();
            if (s !== 0) {
              this.pushMapState(s), this.complete();
              continue t;
            } else
              e = {};
          } else if (t === 223) {
            var s = this.readU32();
            if (s !== 0) {
              this.pushMapState(s), this.complete();
              continue t;
            } else
              e = {};
          } else if (t === 196) {
            var s = this.lookU8();
            e = this.decodeBinary(s, 1);
          } else if (t === 197) {
            var s = this.lookU16();
            e = this.decodeBinary(s, 2);
          } else if (t === 198) {
            var s = this.lookU32();
            e = this.decodeBinary(s, 4);
          } else if (t === 212)
            e = this.decodeExtension(1, 0);
          else if (t === 213)
            e = this.decodeExtension(2, 0);
          else if (t === 214)
            e = this.decodeExtension(4, 0);
          else if (t === 215)
            e = this.decodeExtension(8, 0);
          else if (t === 216)
            e = this.decodeExtension(16, 0);
          else if (t === 199) {
            var s = this.lookU8();
            e = this.decodeExtension(s, 1);
          } else if (t === 200) {
            var s = this.lookU16();
            e = this.decodeExtension(s, 2);
          } else if (t === 201) {
            var s = this.lookU32();
            e = this.decodeExtension(s, 4);
          } else
            throw new is("Unrecognized type byte: ".concat(Sh(t)));
          this.complete();
          for (var r = this.stack; r.length > 0; ) {
            var i = r[r.length - 1];
            if (i.type === 0)
              if (i.array[i.position] = e, i.position++, i.position === i.size)
                r.pop(), e = i.array;
              else
                continue t;
            else if (i.type === 1) {
              if (!Q7(e))
                throw new is("The type of key must be string or number but " + typeof e);
              if (e === "__proto__")
                throw new is("The key __proto__ is not allowed");
              i.key = e, i.type = 2;
              continue t;
            } else if (i.map[i.key] = e, i.readCount++, i.readCount === i.size)
              r.pop(), e = i.map;
            else {
              i.key = null, i.type = 1;
              continue t;
            }
          }
          return e;
        }
    }, n.prototype.readHeadByte = function() {
      return this.headByte === vi && (this.headByte = this.readU8()), this.headByte;
    }, n.prototype.complete = function() {
      this.headByte = vi;
    }, n.prototype.readArraySize = function() {
      var t = this.readHeadByte();
      switch (t) {
        case 220:
          return this.readU16();
        case 221:
          return this.readU32();
        default: {
          if (t < 160)
            return t - 144;
          throw new is("Unrecognized array type byte: ".concat(Sh(t)));
        }
      }
    }, n.prototype.pushMapState = function(t) {
      if (t > this.maxMapLength)
        throw new is("Max length exceeded: map length (".concat(t, ") > maxMapLengthLength (").concat(this.maxMapLength, ")"));
      this.stack.push({
        type: 1,
        size: t,
        key: null,
        readCount: 0,
        map: {}
      });
    }, n.prototype.pushArrayState = function(t) {
      if (t > this.maxArrayLength)
        throw new is("Max length exceeded: array length (".concat(t, ") > maxArrayLength (").concat(this.maxArrayLength, ")"));
      this.stack.push({
        type: 0,
        size: t,
        array: new Array(t),
        position: 0
      });
    }, n.prototype.decodeUtf8String = function(t, e) {
      var s;
      if (t > this.maxStrLength)
        throw new is("Max length exceeded: UTF-8 byte length (".concat(t, ") > maxStrLength (").concat(this.maxStrLength, ")"));
      if (this.bytes.byteLength < this.pos + e + t)
        throw lx;
      var o = this.pos + e, r;
      return this.stateIsMapKey() && (!((s = this.keyDecoder) === null || s === void 0) && s.canBeCached(t)) ? r = this.keyDecoder.decode(this.bytes, o, t) : t > N7 ? r = R7(this.bytes, o, t) : r = Gv(this.bytes, o, t), this.pos += e + t, r;
    }, n.prototype.stateIsMapKey = function() {
      if (this.stack.length > 0) {
        var t = this.stack[this.stack.length - 1];
        return t.type === 1;
      }
      return !1;
    }, n.prototype.decodeBinary = function(t, e) {
      if (t > this.maxBinLength)
        throw new is("Max length exceeded: bin length (".concat(t, ") > maxBinLength (").concat(this.maxBinLength, ")"));
      if (!this.hasRemaining(t + e))
        throw lx;
      var s = this.pos + e, o = this.bytes.subarray(s, s + t);
      return this.pos += e + t, o;
    }, n.prototype.decodeExtension = function(t, e) {
      if (t > this.maxExtLength)
        throw new is("Max length exceeded: ext length (".concat(t, ") > maxExtLength (").concat(this.maxExtLength, ")"));
      var s = this.view.getInt8(this.pos + e), o = this.decodeBinary(
        t,
        e + 1
        /* extType */
      );
      return this.extensionCodec.decode(o, s, this.context);
    }, n.prototype.lookU8 = function() {
      return this.view.getUint8(this.pos);
    }, n.prototype.lookU16 = function() {
      return this.view.getUint16(this.pos);
    }, n.prototype.lookU32 = function() {
      return this.view.getUint32(this.pos);
    }, n.prototype.readU8 = function() {
      var t = this.view.getUint8(this.pos);
      return this.pos++, t;
    }, n.prototype.readI8 = function() {
      var t = this.view.getInt8(this.pos);
      return this.pos++, t;
    }, n.prototype.readU16 = function() {
      var t = this.view.getUint16(this.pos);
      return this.pos += 2, t;
    }, n.prototype.readI16 = function() {
      var t = this.view.getInt16(this.pos);
      return this.pos += 2, t;
    }, n.prototype.readU32 = function() {
      var t = this.view.getUint32(this.pos);
      return this.pos += 4, t;
    }, n.prototype.readI32 = function() {
      var t = this.view.getInt32(this.pos);
      return this.pos += 4, t;
    }, n.prototype.readU64 = function() {
      var t = y7(this.view, this.pos);
      return this.pos += 8, t;
    }, n.prototype.readI64 = function() {
      var t = Ev(this.view, this.pos);
      return this.pos += 8, t;
    }, n.prototype.readF32 = function() {
      var t = this.view.getFloat32(this.pos);
      return this.pos += 4, t;
    }, n.prototype.readF64 = function() {
      var t = this.view.getFloat64(this.pos);
      return this.pos += 8, t;
    }, n;
  }()
), t8 = {};
function e8(n, t) {
  t === void 0 && (t = t8);
  var e = new q7(t.extensionCodec, t.context, t.maxStrLength, t.maxBinLength, t.maxArrayLength, t.maxMapLength, t.maxExtLength);
  return e.decode(n);
}
const cx = 2;
class n8 {
  constructor() {
    this.data = null;
  }
  // input html Images
  compileImageTargets(t, e) {
    return new Promise(async (s, o) => {
      const r = [];
      for (let c = 0; c < t.length; c++) {
        const u = t[c], h = this.createProcessCanvas(u).getContext("2d");
        h.drawImage(u, 0, 0, u.width, u.height);
        const p = h.getImageData(0, 0, u.width, u.height), f = new Uint8Array(u.width * u.height);
        for (let g = 0; g < f.length; g++) {
          const b = g * 4;
          f[g] = Math.floor((p.data[b] + p.data[b + 1] + p.data[b + 2]) / 3);
        }
        const m = { data: f, height: u.height, width: u.width };
        r.push(m);
      }
      const i = 50 / r.length;
      let a = 0;
      this.data = [];
      for (let c = 0; c < r.length; c++) {
        const u = r[c], d = c7(u), h = i / d.length, p = await s8(d, () => {
          a += h, e(a);
        });
        this.data.push({
          targetImage: u,
          imageList: d,
          matchingData: p
        });
      }
      for (let c = 0; c < r.length; c++) {
        const u = u7(r[c]);
        this.data[c].trackingImageList = u;
      }
      const l = await this.compileTrack({ progressCallback: e, targetImages: r, basePercent: 50 });
      for (let c = 0; c < r.length; c++)
        this.data[c].trackingData = l[c];
      s(this.data);
    });
  }
  // not exporting imageList because too large. rebuild this using targetImage
  exportData() {
    const t = [];
    for (let s = 0; s < this.data.length; s++)
      t.push({
        //targetImage: this.data[i].targetImage,
        targetImage: {
          width: this.data[s].targetImage.width,
          height: this.data[s].targetImage.height
        },
        trackingData: this.data[s].trackingData,
        matchingData: this.data[s].matchingData
      });
    return Z7({
      v: cx,
      dataList: t
    });
  }
  importData(t) {
    const e = e8(new Uint8Array(t));
    if (!e.v || e.v !== cx)
      return console.error("Your compiled .mind might be outdated. Please recompile"), [];
    const { dataList: s } = e;
    this.data = [];
    for (let o = 0; o < s.length; o++)
      this.data.push({
        targetImage: s[o].targetImage,
        trackingData: s[o].trackingData,
        matchingData: s[o].matchingData
      });
    return this.data;
  }
  createProcessCanvas(t) {
    console.warn("missing createProcessCanvas implementation");
  }
  compileTrack({ progressCallback: t, targetImages: e, basePercent: s }) {
    console.warn("missing compileTrack implementation");
  }
}
const s8 = async (n, t) => {
  const e = [];
  for (let s = 0; s < n.length; s++) {
    const o = n[s], r = new Tv(o.width, o.height);
    await od(), z(() => {
      const i = De(o.data, [o.data.length], "float32").reshape([o.height, o.width]), { featurePoints: a } = r.detect(i), l = a.filter((h) => h.maxima), c = a.filter((h) => !h.maxima), u = rx({ points: l }), d = rx({ points: c });
      e.push({
        maximaPoints: l,
        minimaPoints: c,
        maximaPointsCluster: u,
        minimaPointsCluster: d,
        width: o.width,
        height: o.height,
        scale: o.scale
      }), t(s);
    });
  }
  return e;
}, Dv = "KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2NsYXNzIHp7Y29uc3RydWN0b3Iocyx0LG8pe3RoaXMuY3Vtc3VtPVtdO2ZvcihsZXQgZT0wO2U8bztlKyspe3RoaXMuY3Vtc3VtLnB1c2goW10pO2ZvcihsZXQgbj0wO248dDtuKyspdGhpcy5jdW1zdW1bZV0ucHVzaCgwKX10aGlzLmN1bXN1bVswXVswXT1zWzBdO2ZvcihsZXQgZT0xO2U8dDtlKyspdGhpcy5jdW1zdW1bMF1bZV09dGhpcy5jdW1zdW1bMF1bZS0xXStzW2VdO2ZvcihsZXQgZT0xO2U8bztlKyspdGhpcy5jdW1zdW1bZV1bMF09dGhpcy5jdW1zdW1bZS0xXVswXStzW2UqdF07Zm9yKGxldCBlPTE7ZTxvO2UrKylmb3IobGV0IG49MTtuPHQ7bisrKXRoaXMuY3Vtc3VtW2VdW25dPXNbZSp0K25dK3RoaXMuY3Vtc3VtW2UtMV1bbl0rdGhpcy5jdW1zdW1bZV1bbi0xXS10aGlzLmN1bXN1bVtlLTFdW24tMV19cXVlcnkocyx0LG8sZSl7bGV0IG49dGhpcy5jdW1zdW1bZV1bb107cmV0dXJuIHQ+MCYmKG4tPXRoaXMuY3Vtc3VtW3QtMV1bb10pLHM+MCYmKG4tPXRoaXMuY3Vtc3VtW2VdW3MtMV0pLHM+MCYmdD4wJiYobis9dGhpcy5jdW1zdW1bdC0xXVtzLTFdKSxufX1jb25zdCBDPTEwLGI9MixNPTYsRj01LEk9Ljk1LEw9LjksTz0uMixaPTgsTj0yNCoyLzMsVT1yPT57Y29uc3R7ZGF0YTpzLHdpZHRoOnQsaGVpZ2h0Om8sc2NhbGU6ZX09cixuPVt0Km9dO2ZvcihsZXQgaT0wO2k8bi5sZW5ndGg7aSsrKW5baV09ITE7Y29uc3QgYT1uZXcgRmxvYXQzMkFycmF5KHMubGVuZ3RoKTtmb3IobGV0IGk9MDtpPHQ7aSsrKWFbaV09LTEsYVt0KihvLTEpK2ldPS0xO2ZvcihsZXQgaT0wO2k8bztpKyspYVtpKnRdPS0xLGFbaSp0K3QtMV09LTE7Zm9yKGxldCBpPTE7aTx0LTE7aSsrKWZvcihsZXQgcD0xO3A8by0xO3ArKyl7bGV0IGY9aSt0KnAsaD0wLGM9MDtmb3IobGV0IHU9LTE7dTw9MTt1KyspaCs9c1tmK3QqdSsxXS1zW2YrdCp1LTFdLGMrPXNbZit0K3VdLXNbZi10K3VdO2gvPTMqMjU2LGMvPTMqMjU2LGFbZl09TWF0aC5zcXJ0KChoKmgrYypjKS8yKX1jb25zdCBnPW5ldyBVaW50MzJBcnJheSgxZTMpO2ZvcihsZXQgaT0wO2k8MWUzO2krKylnW2ldPTA7Y29uc3QgZD1bLTEsMSwtdCx0XTtmb3IobGV0IGk9MTtpPHQtMTtpKyspZm9yKGxldCBwPTE7cDxvLTE7cCsrKXtsZXQgZj1pK3QqcCxoPSEwO2ZvcihsZXQgYz0wO2M8ZC5sZW5ndGg7YysrKWlmKGFbZl08PWFbZitkW2NdXSl7aD0hMTticmVha31pZihoKXtsZXQgYz1NYXRoLmZsb29yKGFbZl0qMWUzKTtjPjk5OSYmKGM9OTk5KSxjPDAmJihjPTApLGdbY10rPTEsbltmXT0hMH19Y29uc3Qgdz0uMDIqdCpvO2xldCBqPTk5OSxFPTA7Zm9yKDtqPj0wJiYoRSs9Z1tqXSwhKEU+dykpOylqLS07Zm9yKGxldCBpPTA7aTxuLmxlbmd0aDtpKyspbltpXSYmYVtpXSoxZTM8aiYmKG5baV09ITEpO2NvbnN0IGw9W107Zm9yKGxldCBpPTA7aTxzLmxlbmd0aDtpKyspbFtpXT1zW2ldKnNbaV07Y29uc3QgUz1uZXcgeihzLHQsbyksRD1uZXcgeihsLHQsbyksaz1uZXcgRmxvYXQzMkFycmF5KHMubGVuZ3RoKTtmb3IobGV0IGk9MDtpPHQ7aSsrKWZvcihsZXQgcD0wO3A8bztwKyspe2NvbnN0IGY9cCp0K2k7aWYoIW5bZl0pe2tbZl09MTtjb250aW51ZX1jb25zdCBoPVAoe2ltYWdlOnIsY3g6aSxjeTpwLHNkVGhyZXNoOkYsaW1hZ2VEYXRhQ3Vtc3VtOlMsaW1hZ2VEYXRhU3FyQ3Vtc3VtOkR9KTtpZihoPT09bnVsbCl7a1tmXT0xO2NvbnRpbnVlfWxldCBjPS0xO2ZvcihsZXQgdT0tQzt1PD1DO3UrKyl7Zm9yKGxldCBtPS1DO208PUM7bSsrKXtpZihtKm0rdSp1PD1iKmIpY29udGludWU7Y29uc3QgeD1SKHtpbWFnZTpyLGN4OmkrbSxjeTpwK3UsdmxlbjpoLHR4OmksdHk6cCxpbWFnZURhdGFDdW1zdW06UyxpbWFnZURhdGFTcXJDdW1zdW06RH0pO2lmKHghPT1udWxsJiZ4PmMmJihjPXgsYz5JKSlicmVha31pZihjPkkpYnJlYWt9a1tmXT1jfXJldHVybiBWKHtpbWFnZTpyLGZlYXR1cmVNYXA6ayx0ZW1wbGF0ZVNpemU6TSxzZWFyY2hTaXplOmIsb2NjU2l6ZTpOLG1heFNpbVRocmVzaDpMLG1pblNpbVRocmVzaDpPLHNkVGhyZXNoOlosaW1hZ2VEYXRhQ3Vtc3VtOlMsaW1hZ2VEYXRhU3FyQ3Vtc3VtOkR9KX0sVj1yPT57bGV0e2ltYWdlOnMsZmVhdHVyZU1hcDp0LHRlbXBsYXRlU2l6ZTpvLHNlYXJjaFNpemU6ZSxvY2NTaXplOm4sbWF4U2ltVGhyZXNoOmEsbWluU2ltVGhyZXNoOmcsc2RUaHJlc2g6ZCxpbWFnZURhdGFDdW1zdW06dyxpbWFnZURhdGFTcXJDdW1zdW06an09cjtjb25zdHtkYXRhOkUsd2lkdGg6bCxoZWlnaHQ6UyxzY2FsZTpEfT1zO249TWF0aC5mbG9vcihNYXRoLm1pbihzLndpZHRoLHMuaGVpZ2h0KS8xMCk7Y29uc3Qgaz0obyoyKzEpKjMsQT1NYXRoLmZsb29yKGwvayksaT1NYXRoLmZsb29yKFMvayk7bGV0IHA9TWF0aC5mbG9vcihsL24pKk1hdGguZmxvb3IoUy9uKStBKmk7Y29uc3QgZj1bXSxoPW5ldyBGbG9hdDMyQXJyYXkoRS5sZW5ndGgpO2ZvcihsZXQgdT0wO3U8aC5sZW5ndGg7dSsrKWhbdV09dFt1XTtsZXQgYz0wO2Zvcig7YzxwOyl7bGV0IHU9YSxtPS0xLHg9LTE7Zm9yKGxldCB5PTA7eTxTO3krKylmb3IobGV0IFQ9MDtUPGw7VCsrKWhbeSpsK1RdPHUmJih1PWhbeSpsK1RdLG09VCx4PXkpO2lmKG09PT0tMSlicmVhaztjb25zdCB2PVAoe2ltYWdlOnMsY3g6bSxjeTp4LHNkVGhyZXNoOjAsaW1hZ2VEYXRhQ3Vtc3VtOncsaW1hZ2VEYXRhU3FyQ3Vtc3VtOmp9KTtpZih2PT09bnVsbCl7aFt4KmwrbV09MTtjb250aW51ZX1pZih2LyhvKjIrMSk8ZCl7aFt4KmwrbV09MTtjb250aW51ZX1sZXQgcT0xLF89LTE7Zm9yKGxldCB5PS1lO3k8PWU7eSsrKXtmb3IobGV0IFQ9LWU7VDw9ZTtUKyspe2lmKFQqVCt5Knk+ZSplfHxUPT09MCYmeT09PTApY29udGludWU7Y29uc3QgSD1SKHtpbWFnZTpzLHZsZW46dixjeDptK1QsY3k6eCt5LHR4Om0sdHk6eCxpbWFnZURhdGFDdW1zdW06dyxpbWFnZURhdGFTcXJDdW1zdW06an0pO2lmKEghPT1udWxsJiYoSDxxJiYocT1ILHE8ZyYmcTx1KXx8SD5fJiYoXz1ILF8+Ljk5KSkpYnJlYWt9aWYocTxnJiZxPHV8fF8+Ljk5KWJyZWFrfWlmKHE8ZyYmcTx1fHxfPi45OSl7aFt4KmwrbV09MTtjb250aW51ZX1mLnB1c2goe3g6bSx5Onh9KSxjKz0xO2ZvcihsZXQgeT0tbjt5PD1uO3krKylmb3IobGV0IFQ9LW47VDw9bjtUKyspeCt5PDB8fHgreT49U3x8bStUPDB8fG0rVD49bHx8KGhbKHgreSkqbCsobStUKV09MSl9cmV0dXJuIGZ9LFA9KHtpbWFnZTpyLGN4OnMsY3k6dCxzZFRocmVzaDpvLGltYWdlRGF0YUN1bXN1bTplLGltYWdlRGF0YVNxckN1bXN1bTpufSk9PntpZihzLU08MHx8cytNPj1yLndpZHRofHx0LU08MHx8dCtNPj1yLmhlaWdodClyZXR1cm4gbnVsbDtjb25zdCBhPTIqTSsxLGc9YSphO2xldCBkPWUucXVlcnkocy1NLHQtTSxzK00sdCtNKTtkLz1nO2xldCB3PW4ucXVlcnkocy1NLHQtTSxzK00sdCtNKTtyZXR1cm4gdy09MipkKmUucXVlcnkocy1NLHQtTSxzK00sdCtNKSx3Kz1nKmQqZCx3L2c8bypvP251bGw6KHc9TWF0aC5zcXJ0KHcpLHcpfSxSPXI9Pntjb25zdHtpbWFnZTpzLGN4OnQsY3k6byx2bGVuOmUsdHg6bix0eTphLGltYWdlRGF0YUN1bXN1bTpnLGltYWdlRGF0YVNxckN1bXN1bTpkfT1yLHtkYXRhOncsd2lkdGg6aixoZWlnaHQ6RX09cyxsPU07aWYodC1sPDB8fHQrbD49anx8by1sPDB8fG8rbD49RSlyZXR1cm4gbnVsbDtjb25zdCBTPTIqbCsxO2xldCBEPWcucXVlcnkodC1sLG8tbCx0K2wsbytsKSxrPWQucXVlcnkodC1sLG8tbCx0K2wsbytsKSxBPTAsaT0oby1sKSpqKyh0LWwpLHA9KGEtbCkqaisobi1sKSxmPWotUztmb3IobGV0IG09MDttPFM7bSsrKXtmb3IobGV0IHg9MDt4PFM7eCsrKUErPXdbaV0qd1twXSxpKz0xLHArPTE7aSs9ZixwKz1mfWxldCBoPWcucXVlcnkobi1sLGEtbCxuK2wsYStsKTtoLz1TKlMsQS09aCpEO2xldCBjPWstRCpELyhTKlMpO3JldHVybiBjPT0wP251bGw6KGM9TWF0aC5zcXJ0KGMpLDEqQS8oZSpjKSl9LFc9KHIscyk9Pntjb25zdCB0PVtdO2ZvcihsZXQgbz0wO288ci5sZW5ndGg7bysrKXtjb25zdCBlPXJbb10sbj1VKGUpLGE9e2RhdGE6ZS5kYXRhLHNjYWxlOmUuc2NhbGUsd2lkdGg6ZS53aWR0aCxoZWlnaHQ6ZS5oZWlnaHQscG9pbnRzOm59O3QucHVzaChhKSxzKG8pfXJldHVybiB0fSxYPSh7aW1hZ2U6cixyYXRpbzpzfSk9Pntjb25zdCB0PU1hdGgucm91bmQoci53aWR0aCpzKSxvPU1hdGgucm91bmQoci5oZWlnaHQqcyksZT1uZXcgVWludDhBcnJheSh0Km8pO2ZvcihsZXQgbj0wO248dDtuKyspe2xldCBhPU1hdGgucm91bmQoMSpuL3MpLGc9TWF0aC5yb3VuZCgxKihuKzEpL3MpLTE7Zz49ci53aWR0aCYmKGc9ci53aWR0aC0xKTtmb3IobGV0IGQ9MDtkPG87ZCsrKXtsZXQgdz1NYXRoLnJvdW5kKDEqZC9zKSxqPU1hdGgucm91bmQoMSooZCsxKS9zKS0xO2o+PXIuaGVpZ2h0JiYoaj1yLmhlaWdodC0xKTtsZXQgRT0wLGw9MDtmb3IobGV0IFM9YTtTPD1nO1MrKylmb3IobGV0IEQ9dztEPD1qO0QrKylFKz0xKnIuZGF0YVtEKnIud2lkdGgrU10sbCs9MTtlW2QqdCtuXT1NYXRoLmZsb29yKEUvbCl9fXJldHVybntkYXRhOmUsd2lkdGg6dCxoZWlnaHQ6b319LFk9cj0+e2NvbnN0IHM9TWF0aC5taW4oci53aWR0aCxyLmhlaWdodCksdD1bXSxvPVtdO3QucHVzaCgyNTYvcyksdC5wdXNoKDEyOC9zKTtmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKylvLnB1c2goT2JqZWN0LmFzc2lnbihYKHtpbWFnZTpyLHJhdGlvOnRbZV19KSx7c2NhbGU6dFtlXX0pKTtyZXR1cm4gb307b25tZXNzYWdlPXI9Pntjb25zdHtkYXRhOnN9PXI7aWYocy50eXBlPT09ImNvbXBpbGUiKXtjb25zdHt0YXJnZXRJbWFnZXM6dH09cyxvPTEwMC90Lmxlbmd0aDtsZXQgZT0wO2NvbnN0IG49W107Zm9yKGxldCBhPTA7YTx0Lmxlbmd0aDthKyspe2NvbnN0IGc9dFthXSxkPVkoZyksdz1vL2QubGVuZ3RoLGo9VyhkLEU9PntlKz13LHBvc3RNZXNzYWdlKHt0eXBlOiJwcm9ncmVzcyIscGVyY2VudDplfSl9KTtuLnB1c2goail9cG9zdE1lc3NhZ2Uoe3R5cGU6ImNvbXBpbGVEb25lIixsaXN0Om59KX19fSkoKTsK", ux = typeof window < "u" && window.Blob && new Blob([atob(Dv)], { type: "text/javascript;charset=utf-8" });
function o8() {
  const n = ux && (window.URL || window.webkitURL).createObjectURL(ux);
  try {
    return n ? new Worker(n) : new Worker("data:application/javascript;base64," + Dv);
  } finally {
    n && (window.URL || window.webkitURL).revokeObjectURL(n);
  }
}
class r8 extends n8 {
  createProcessCanvas(t) {
    const e = document.createElement("canvas");
    return e.width = t.width, e.height = t.height, e;
  }
  compileTrack({ progressCallback: t, targetImages: e, basePercent: s }) {
    return new Promise((o, r) => {
      const i = new o8();
      i.onmessage = (a) => {
        a.data.type === "progress" ? t(s + a.data.percent * s / 100) : a.data.type === "compileDone" && o(a.data.list);
      }, i.postMessage({ type: "compile", targetImages: e });
    });
  }
}
class i8 {
  constructor(t, e) {
    this.width = t, this.height = e, this.texShape = [e, t];
    const s = document.createElement("canvas").getContext("2d");
    s.canvas.width = t, s.canvas.height = e, this.context = s, this.program = this.buildProgram(t, e);
    const o = Us();
    this.tempPixelHandle = o.makeTensorInfo(this.texShape, "float32"), o.texData.get(this.tempPixelHandle.dataId).usage = 2;
  }
  // old method
  _loadInput(t) {
    return z(() => {
      let e = B1(t);
      return e = e.mean(2), e;
    });
  }
  // input is instance of HTMLVideoElement or HTMLImageElement
  loadInput(t) {
    this.context.drawImage(t, 0, 0, this.width, this.height);
    const e = Us();
    return e.gpgpu.uploadPixelDataToTexture(e.getTexture(this.tempPixelHandle.dataId), this.context.canvas), this._compileAndRun(this.program, [this.tempPixelHandle]);
  }
  buildProgram(t, e) {
    const s = V().getNumber("WEBGL_VERSION") === 2 ? "texture" : "texture2D";
    return {
      variableNames: ["A"],
      outputShape: this.texShape,
      userCode: `
	void main() {
	  ivec2 coords = getOutputCoords();
	  int texR = coords[0];
	  int texC = coords[1];
	  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${t}.0, ${e}.0);

	  vec4 values = ${s}(A, uv);
	  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);
	}
      `
    };
  }
  _compileAndRun(t, e) {
    const s = Us().compileAndRun(t, e);
    return Ot().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const o = Us().runWebGLProgram(t, e, s);
    return Ot().makeTensorFromDataId(o.dataId, o.shape, o.dtype);
  }
}
const Nh = { memory: bc, nextFrame: od }, a8 = 1e-3, l8 = 1e3, c8 = 5, u8 = 5;
class y6 {
  constructor({
    inputWidth: t,
    inputHeight: e,
    onUpdate: s = null,
    debugMode: o = !1,
    maxTrack: r = 1,
    warmupTolerance: i = null,
    missTolerance: a = null,
    filterMinCF: l = null,
    filterBeta: c = null
  }) {
    this.inputWidth = t, this.inputHeight = e, this.maxTrack = r, this.filterMinCF = l === null ? a8 : l, this.filterBeta = c === null ? l8 : c, this.warmupTolerance = i === null ? c8 : i, this.missTolerance = a === null ? u8 : a, this.cropDetector = new a7(
      this.inputWidth,
      this.inputHeight,
      o
    ), this.inputLoader = new i8(this.inputWidth, this.inputHeight), this.markerDimensions = null, this.onUpdate = s, this.debugMode = o, this.processingVideo = !1, this.interestedTargetIndex = -1, this.trackingStates = [];
    const u = 10, d = 1e5, h = 45 * Math.PI / 180, p = this.inputHeight / 2 / Math.tan(h / 2);
    this.projectionTransform = [
      [p, 0, this.inputWidth / 2],
      [0, p, this.inputHeight / 2],
      [0, 0, 1]
    ], this.projectionMatrix = this._glProjectionMatrix({
      projectionTransform: this.projectionTransform,
      width: this.inputWidth,
      height: this.inputHeight,
      near: u,
      far: d
    }), this.worker = new uJ(), this.workerMatchDone = null, this.workerTrackDone = null, this.worker.onmessage = (f) => {
      f.data.type === "matchDone" && this.workerMatchDone !== null && this.workerMatchDone(f.data), f.data.type === "trackUpdateDone" && this.workerTrackDone !== null && this.workerTrackDone(f.data);
    };
  }
  showTFStats() {
    console.log(Nh.memory().numTensors), console.table(Nh.memory());
  }
  addImageTargets(t) {
    return new Promise(async (e, s) => {
      try {
        const r = await (await fetch(t)).arrayBuffer(), i = new Uint8Array(r), a = cJ(i), l = this.addImageTargetsFromBuffer(a);
        e(l);
      } catch (o) {
        s(o);
      }
    });
  }
  addImageTargetsFromBuffer(t) {
    const s = new r8().importData(t), o = [], r = [], i = [];
    for (let a = 0; a < s.length; a++)
      r.push(s[a].matchingData), o.push(s[a].trackingData), i.push([
        s[a].targetImage.width,
        s[a].targetImage.height
      ]);
    return this.tracker = new wJ(
      i,
      o,
      this.projectionTransform,
      this.inputWidth,
      this.inputHeight,
      this.debugMode
    ), this.worker.postMessage({
      type: "setup",
      inputWidth: this.inputWidth,
      inputHeight: this.inputHeight,
      projectionTransform: this.projectionTransform,
      debugMode: this.debugMode,
      matchingDataList: r
    }), this.markerDimensions = i, { dimensions: i, matchingDataList: r, trackingDataList: o };
  }
  dispose() {
    this.stopProcessVideo(), this.worker.postMessage({
      type: "dispose"
    });
  }
  // warm up gpu - build kernels is slow
  dummyRun(t) {
    const e = this.inputLoader.loadInput(t);
    this.cropDetector.detect(e), this.tracker.dummyRun(e), e.dispose();
  }
  getProjectionMatrix() {
    return this.projectionMatrix;
  }
  getWorldMatrix(t, e) {
    return this._glModelViewMatrix(t, e);
  }
  async _detectAndMatch(t, e) {
    const { featurePoints: s } = this.cropDetector.detectMoving(t), { targetIndex: o, modelViewTransform: r } = await this._workerMatch(s, e);
    return { targetIndex: o, modelViewTransform: r };
  }
  async _trackAndUpdate(t, e, s) {
    const { worldCoords: o, screenCoords: r } = this.tracker.track(
      t,
      e,
      s
    );
    return o.length < 4 ? null : await this._workerTrackUpdate(
      e,
      { worldCoords: o, screenCoords: r }
    );
  }
  processVideo(t) {
    if (this.processingVideo)
      return;
    this.processingVideo = !0, this.trackingStates = [];
    for (let s = 0; s < this.markerDimensions.length; s++)
      this.trackingStates.push({
        showing: !1,
        isTracking: !1,
        currentModelViewTransform: null,
        trackCount: 0,
        trackMiss: 0,
        filter: new Vv({
          minCutOff: this.filterMinCF,
          beta: this.filterBeta
        })
      });
    (async () => {
      for (; this.processingVideo; ) {
        const s = this.inputLoader.loadInput(t);
        if (this.trackingStates.reduce((r, i) => r + (i.isTracking ? 1 : 0), 0) < this.maxTrack) {
          const r = [];
          for (let l = 0; l < this.trackingStates.length; l++)
            this.trackingStates[l].isTracking !== !0 && (this.interestedTargetIndex !== -1 && this.interestedTargetIndex !== l || r.push(l));
          const { targetIndex: i, modelViewTransform: a } = await this._detectAndMatch(s, r);
          i !== -1 && (this.trackingStates[i].isTracking = !0, this.trackingStates[i].currentModelViewTransform = a);
        }
        for (let r = 0; r < this.trackingStates.length; r++) {
          const i = this.trackingStates[r];
          if (i.isTracking) {
            let a = await this._trackAndUpdate(
              s,
              i.currentModelViewTransform,
              r
            );
            a === null ? i.isTracking = !1 : i.currentModelViewTransform = a;
          }
          if (i.showing || i.isTracking && (i.trackMiss = 0, i.trackCount += 1, i.trackCount > this.warmupTolerance && (i.showing = !0, i.trackingMatrix = null, i.filter.reset())), i.showing && (i.isTracking ? i.trackMiss = 0 : (i.trackCount = 0, i.trackMiss += 1, i.trackMiss > this.missTolerance && (i.showing = !1, i.trackingMatrix = null, this.onUpdate && this.onUpdate({
            type: "updateMatrix",
            targetIndex: r,
            worldMatrix: null
          })))), i.showing) {
            const a = this._glModelViewMatrix(
              i.currentModelViewTransform,
              r
            );
            i.trackingMatrix = i.filter.filter(
              Date.now(),
              a
            );
            const l = [];
            for (let c = 0; c < i.trackingMatrix.length; c++)
              l[c] = i.trackingMatrix[c];
            this.onUpdate && this.onUpdate({
              type: "updateMatrix",
              targetIndex: r,
              worldMatrix: l
            });
          }
        }
        s.dispose(), this.onUpdate && this.onUpdate({ type: "processDone" }), await Nh.nextFrame();
      }
    })();
  }
  stopProcessVideo() {
    this.processingVideo = !1;
  }
  async detect(t) {
    const e = this.inputLoader.loadInput(t), { featurePoints: s, debugExtra: o } = await this.cropDetector.detect(
      e
    );
    return e.dispose(), { featurePoints: s, debugExtra: o };
  }
  async match(t, e) {
    const { modelViewTransform: s, debugExtra: o } = await this._workerMatch(
      t,
      [e]
    );
    return { modelViewTransform: s, debugExtra: o };
  }
  async track(t, e, s) {
    const o = this.inputLoader.loadInput(t), r = this.tracker.track(o, e, s);
    return o.dispose(), r;
  }
  async trackUpdate(t, e) {
    return e.worldCoords.length < 4 ? null : await this._workerTrackUpdate(
      t,
      e
    );
  }
  _workerMatch(t, e) {
    return new Promise(async (s, o) => {
      this.workerMatchDone = (r) => {
        s({
          targetIndex: r.targetIndex,
          modelViewTransform: r.modelViewTransform,
          debugExtra: r.debugExtra
        });
      }, this.worker.postMessage({
        type: "match",
        featurePoints: t,
        targetIndexes: e
      });
    });
  }
  _workerTrackUpdate(t, e) {
    return new Promise(async (s, o) => {
      this.workerTrackDone = (a) => {
        s(a.modelViewTransform);
      };
      const { worldCoords: r, screenCoords: i } = e;
      this.worker.postMessage({
        type: "trackUpdate",
        modelViewTransform: t,
        worldCoords: r,
        screenCoords: i
      });
    });
  }
  _glModelViewMatrix(t, e) {
    const s = this.markerDimensions[e][1];
    return [
      t[0][0],
      -t[1][0],
      -t[2][0],
      0,
      -t[0][1],
      t[1][1],
      t[2][1],
      0,
      -t[0][2],
      t[1][2],
      t[2][2],
      0,
      t[0][1] * s + t[0][3],
      -(t[1][1] * s + t[1][3]),
      -(t[2][1] * s + t[2][3]),
      1
    ];
  }
  // build openGL projection matrix
  // ref: https://strawlab.org/2011/11/05/augmented-reality-with-OpenGL/
  _glProjectionMatrix({ projectionTransform: t, width: e, height: s, near: o, far: r }) {
    const i = [
      [
        2 * t[0][0] / e,
        0,
        -(2 * t[0][2] / e - 1),
        0
      ],
      [
        0,
        2 * t[1][1] / s,
        -(2 * t[1][2] / s - 1),
        0
      ],
      [0, 0, -(r + o) / (r - o), -2 * r * o / (r - o)],
      [0, 0, -1, 0]
    ], a = [];
    for (let l = 0; l < 4; l++)
      for (let c = 0; c < 4; c++)
        a.push(i[c][l]);
    return a;
  }
}
export {
  E1 as $,
  Fp as A,
  Ix as B,
  y6 as C,
  Cx as D,
  E,
  Es as F,
  U8 as G,
  vt as H,
  IR as I,
  jo as J,
  Me as K,
  Sx as L,
  Tx as M,
  Bc as N,
  il as O,
  $1 as P,
  Xe as Q,
  Rx as R,
  Lx as S,
  Mt as T,
  ul as U,
  Zf as V,
  Ck as W,
  gt as X,
  lt as Y,
  ut as Z,
  Vr as _,
  r8 as a,
  an as a$,
  Gx as a0,
  Dx as a1,
  kx as a2,
  Ie as a3,
  De as a4,
  dm as a5,
  Xf as a6,
  um as a7,
  Fe as a8,
  je as a9,
  Fk as aA,
  Z1 as aB,
  n0 as aC,
  S8 as aD,
  QE as aE,
  R8 as aF,
  k8 as aG,
  v8 as aH,
  T8 as aI,
  jE as aJ,
  g1 as aK,
  et as aL,
  St as aM,
  hm as aN,
  pm as aO,
  fm as aP,
  Ky as aQ,
  By as aR,
  Hy as aS,
  Uy as aT,
  Wy as aU,
  Bm as aV,
  Vy as aW,
  _y as aX,
  Ay as aY,
  Oy as aZ,
  Xy as a_,
  $e as aa,
  re as ab,
  bt as ac,
  Qo as ad,
  Mx as ae,
  Bo as af,
  lm as ag,
  I$ as ah,
  y$ as ai,
  cm as aj,
  b$ as ak,
  Jg as al,
  oe as am,
  zk as an,
  Hx as ao,
  C8 as ap,
  V as aq,
  Dk as ar,
  zf as as,
  eG as at,
  N8 as au,
  Bx as av,
  Yg as aw,
  Xk as ax,
  Mk as ay,
  Ok as az,
  k as b,
  cg as b$,
  Hm as b0,
  Um as b1,
  Ym as b2,
  Qm as b3,
  jm as b4,
  Jm as b5,
  Py as b6,
  Gr as b7,
  Ui as b8,
  qL as b9,
  eI as bA,
  sI as bB,
  iI as bC,
  oI as bD,
  rI as bE,
  nI as bF,
  aI as bG,
  dI as bH,
  hI as bI,
  pI as bJ,
  bI as bK,
  wI as bL,
  vI as bM,
  SI as bN,
  RI as bO,
  TI as bP,
  $I as bQ,
  gI as bR,
  yI as bS,
  CI as bT,
  Xw as bU,
  ag as bV,
  Pw as bW,
  bd as bX,
  Ow as bY,
  ig as bZ,
  Kw as b_,
  Nn as ba,
  yl as bb,
  Rw as bc,
  Sw as bd,
  Tw as be,
  Nw as bf,
  Ew as bg,
  $w as bh,
  md as bi,
  Il as bj,
  Lw as bk,
  Cl as bl,
  Dw as bm,
  zw as bn,
  Fw as bo,
  Ww as bp,
  Vw as bq,
  Yw as br,
  Hw as bs,
  ug as bt,
  Bw as bu,
  Uw as bv,
  Qw as bw,
  jw as bx,
  Jw as by,
  tI as bz,
  T as c,
  hT as c$,
  wo as c0,
  lg as c1,
  LI as c2,
  GI as c3,
  lI as c4,
  cI as c5,
  uI as c6,
  qw as c7,
  DI as c8,
  MI as c9,
  be as cA,
  pS as cB,
  mS as cC,
  s1 as cD,
  Bh as cE,
  Ai as cF,
  wS as cG,
  CS as cH,
  kS as cI,
  TS as cJ,
  RS as cK,
  ES as cL,
  Wf as cM,
  VS as cN,
  Yu as cO,
  US as cP,
  QS as cQ,
  JS as cR,
  _f as cS,
  tT as cT,
  Li as cU,
  sT as cV,
  Cn as cW,
  Po as cX,
  iT as cY,
  lT as cZ,
  uT as c_,
  FI as ca,
  zI as cb,
  kt as cc,
  gd as cd,
  qy as ce,
  CD as cf,
  vD as cg,
  tw as ch,
  nw as ci,
  ID as cj,
  o6 as ck,
  Jy as cl,
  eg as cm,
  ng as cn,
  dd as co,
  r6 as cp,
  pd as cq,
  c6 as cr,
  u6 as cs,
  Ki as ct,
  xt as cu,
  So as cv,
  Mn as cw,
  _o as cx,
  D0 as cy,
  Rk as cz,
  $t as d,
  Qf as d$,
  o1 as d0,
  Uo as d1,
  r1 as d2,
  xT as d3,
  IT as d4,
  Of as d5,
  a1 as d6,
  G1 as d7,
  Uh as d8,
  l1 as d9,
  cN as dA,
  dN as dB,
  pN as dC,
  Bf as dD,
  h1 as dE,
  ti as dF,
  HE as dG,
  xN as dH,
  Wn as dI,
  Hf as dJ,
  SN as dK,
  p1 as dL,
  f1 as dM,
  xs as dN,
  Uf as dO,
  m1 as dP,
  DN as dQ,
  J8 as dR,
  Qn as dS,
  Yf as dT,
  FN as dU,
  bo as dV,
  ie as dW,
  xc as dX,
  td as dY,
  ON as dZ,
  PN as d_,
  jg as da,
  RT as db,
  GT as dc,
  FT as dd,
  VT as de,
  p$ as df,
  Qu as dg,
  f$ as dh,
  zn as di,
  OT as dj,
  QT as dk,
  Fn as dl,
  tn as dm,
  tN as dn,
  d1 as dp,
  om as dq,
  ll as dr,
  Ju as ds,
  n1 as dt,
  dn as du,
  cr as dv,
  Ic as dw,
  Kf as dx,
  Mo as dy,
  S1 as dz,
  ze as e,
  dk as e$,
  ee as e0,
  ju as e1,
  Pi as e2,
  Vn as e3,
  qN as e4,
  qf as e5,
  rS as e6,
  nR as e7,
  ed as e8,
  Zi as e9,
  ys as eA,
  dl as eB,
  JR as eC,
  t6 as eD,
  at as eE,
  t$ as eF,
  sn as eG,
  ic as eH,
  e$ as eI,
  Un as eJ,
  s$ as eK,
  N1 as eL,
  i$ as eM,
  R1 as eN,
  Jo as eO,
  c$ as eP,
  Ue as eQ,
  ye as eR,
  Nt as eS,
  xn as eT,
  z as eU,
  la as eV,
  yt as eW,
  dg as eX,
  Ye as eY,
  B1 as eZ,
  DM as e_,
  yc as ea,
  SR as eb,
  Vs as ec,
  b1 as ed,
  rm as ee,
  x1 as ef,
  y1 as eg,
  w1 as eh,
  I1 as ei,
  MR as ej,
  j8 as ek,
  C1 as el,
  v1 as em,
  em as en,
  k1 as eo,
  nm as ep,
  wc as eq,
  sm as er,
  cl as es,
  Jf as et,
  q8 as eu,
  Q8 as ev,
  yn as ew,
  Ae as ex,
  Pt as ey,
  T1 as ez,
  U as f,
  va as f$,
  IM as f0,
  Tn as f1,
  f6 as f2,
  m6 as f3,
  rw as f4,
  Uc as f5,
  ca as f6,
  ua as f7,
  F1 as f8,
  W1 as f9,
  nu as fA,
  su as fB,
  Pp as fC,
  ou as fD,
  ru as fE,
  Zp as fF,
  Kp as fG,
  ya as fH,
  wa as fI,
  Hp as fJ,
  Bp as fK,
  iu as fL,
  uD as fM,
  dx as fN,
  Up as fO,
  Yp as fP,
  au as fQ,
  Qp as fR,
  jp as fS,
  lu as fT,
  Eh as fU,
  $h as fV,
  yx as fW,
  Ca as fX,
  Jp as fY,
  Uv as fZ,
  cu as f_,
  V1 as fa,
  _1 as fb,
  Jr as fc,
  Wp as fd,
  Vp as fe,
  Yc as ff,
  Qc as fg,
  da as fh,
  ha as fi,
  pa as fj,
  ma as fk,
  fa as fl,
  jc as fm,
  Jc as fn,
  Ap as fo,
  _p as fp,
  qc as fq,
  tu as fr,
  Op as fs,
  tk as ft,
  aD as fu,
  ga as fv,
  ba as fw,
  xa as fx,
  Xp as fy,
  eu as fz,
  G as g,
  Du as g$,
  ka as g0,
  uu as g1,
  Sa as g2,
  qp as g3,
  tf as g4,
  ef as g5,
  Ta as g6,
  Na as g7,
  Gh as g8,
  du as g9,
  p8 as gA,
  Iu as gB,
  Cu as gC,
  vu as gD,
  af as gE,
  rf as gF,
  za as gG,
  ku as gH,
  Su as gI,
  Fa as gJ,
  Tu as gK,
  Wa as gL,
  A1 as gM,
  Va as gN,
  Nu as gO,
  lf as gP,
  cf as gQ,
  uf as gR,
  Ru as gS,
  Eu as gT,
  $u as gU,
  yo as gV,
  pG as gW,
  Gu as gX,
  Lu as gY,
  f8 as gZ,
  _a as g_,
  pc as ga,
  hu as gb,
  pu as gc,
  Ra as gd,
  cD as ge,
  nf as gf,
  $a as gg,
  sf as gh,
  fe as gi,
  Ea as gj,
  Ga as gk,
  La as gl,
  Ep as gm,
  wu as gn,
  of as go,
  HL as gp,
  fu as gq,
  mu as gr,
  gu as gs,
  Da as gt,
  Ma as gu,
  ek as gv,
  bu as gw,
  xu as gx,
  yu as gy,
  h8 as gz,
  qr as h,
  x8 as h$,
  Mu as h0,
  O1 as h1,
  df as h2,
  Bg as h3,
  hf as h4,
  Ia as h5,
  Aa as h6,
  Be as h7,
  Oa as h8,
  Xa as h9,
  yf as hA,
  Ja as hB,
  sl as hC,
  wf as hD,
  If as hE,
  Cf as hF,
  vf as hG,
  qa as hH,
  Ou as hI,
  ds as hJ,
  tl as hK,
  el as hL,
  nl as hM,
  kf as hN,
  Sf as hO,
  Rr as hP,
  Tf as hQ,
  Ku as hR,
  Bu as hS,
  m8 as hT,
  mc as hU,
  Hu as hV,
  hc as hW,
  Us as hX,
  xG as hY,
  P8 as hZ,
  n6 as h_,
  zu as ha,
  Wu as hb,
  ff as hc,
  Fu as hd,
  pf as he,
  Vu as hf,
  Nf as hg,
  Pa as hh,
  Za as hi,
  gm as hj,
  _u as hk,
  Ka as hl,
  Ya as hm,
  Ua as hn,
  Ba as ho,
  Ha as hp,
  Au as hq,
  Zu as hr,
  Qa as hs,
  Xu as ht,
  mf as hu,
  gf as hv,
  bf as hw,
  xf as hx,
  Pu as hy,
  ja as hz,
  vx as i,
  L8 as i0,
  I8 as i1,
  G8 as i2,
  D8 as i3,
  E8 as i4,
  $8 as i5,
  Ot as i6,
  A8 as i7,
  O8 as i8,
  s6 as i9,
  b8 as iA,
  g8 as iB,
  rn as iC,
  y8 as iD,
  B8 as iE,
  H8 as iF,
  IN as iG,
  V8 as ia,
  Vg as ib,
  Lh as ic,
  Dh as id,
  Z8 as ie,
  K8 as ig,
  i6 as ih,
  bc as ii,
  od as ij,
  M8 as ik,
  W8 as il,
  e1 as im,
  sk as io,
  cn as ip,
  _8 as iq,
  Y8 as ir,
  e6 as is,
  F8 as it,
  X8 as iu,
  hG as iv,
  Ef as iw,
  w8 as ix,
  z8 as iy,
  xr as iz,
  X as j,
  xo as k,
  Df as l,
  Gt as m,
  Nx as n,
  D as o,
  jf as p,
  $x as q,
  M as r,
  Wt as s,
  Vf as t,
  Ex as u,
  Is as v,
  wn as w,
  rl as x,
  ao as y,
  Qr as z
};
